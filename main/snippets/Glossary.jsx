export const GlossaryPage = () => {
  const GLOSSARY = [
    {
      term: "Access Token",
      description:
        "Credential that can be used by an application to access an API. It informs the API that the bearer of the token has been authorized to access the API and perform specific actions specified by the scope that has been granted. An Access Token can be in any format, but two popular options include opaque strings and JSON Web Tokens (JWT). They should be transmitted to the API as a Bearer credential in an HTTP Authorization header.",
    },
    {
      term: "Account Linking",
      description:
        "Connecting user accounts across multiple platforms to allow users access to more than one resource or application by providing credentials one time.",
    },
    {
      term: "Actions",
      description:
        "Secure, tenant-specific, versioned functions written in Node.js that execute at certain points during the Auth0 runtime. Actions are used to customize and extend Auth0's capabilities with custom logic.",
    },
    {
      term: "Adaptive Multi-factor Authentication",
      description:
        "Multi-factor authentication (MFA) that is only triggered for users when an attempted login is determined to be a low confidence login. With Adaptive MFA, Auth0 triggers MFA only when needed to add friction for bad actors while keeping the login experience unchanged for good actors.",
    },
    {
      term: "Application",
      description:
        "Your software that relies on Auth0 for authentication and identity management. Auth0 supports single-page, regular web, native, and machine-to-machine applications.",
    },
    {
      term: "Attack Protection",
      description:
        "Features that Auth0 provides to detect and mitigate attacks, including brute-force protection, suspicious IP throttling, breached password detection, bot detection, and adaptive multi-factor authentication.",
    },
    {
      term: "Audience",
      description:
        "Unique identifier of the audience for an issued token, identified within a JSON Web Token as the aud claim. The audience value is either the application (Client ID) for an ID Token or the API that is being called (API Identifier) for an Access Token. At Auth0, the Audience value sent in a request for an Access Token dictates whether that token is returned in an opaque or JWT format.",
    },
    {
      term: "Auth0 Dashboard",
      description:
        "Auth0’s primary administrator interface in which you can register your application or API, connect to a user store or another identity provider, and configure your Auth0 services.",
    },
    {
      term: "Authentication Device",
      description:
        "The device on which the user will authenticate and grant consent in the Client-Initiated Backchannel Authentication Flow.",
    },
    {
      term: "Authentication Server",
      description:
        "Server that confirms or denies a user’s identity. An authentication server does not limit the actions or resources available to the user (although it can provide context for this purpose).",
    },
    {
      term: "Authorization Code",
      description:
        "Random string generated by the authorization server and returned to the application as part of the authorization response. The authorization code is relatively short-lived and is exchanged for an Access Token at the token endpoint when using the Authorization Code Flow (either with or without Proof Key for Code Exchange (PKCE)).",
    },
    {
      term: "Authorization Flow",
      description:
        "Another name for Authorization Grants outlined in OAuth 2.0. Authorization flows are the workflows a resource (an application or an AIP) uses to grant requestors access. Based on the type of technology and the type of requestor, resource owners can use Authorization Code Flow, PKCE, ROPG, Implicit, or Client Credential.",
    },
    {
      term: "Authorization Server",
      description:
        "Centralized server that contributes to defining the boundaries of a user’s access. For example, your authorization server can control the data, tasks, and features available to a user. An authorization server does not authenticate users. It’s the role of the authentication server to verify a user’s identity.",
    },
    {
      term: "Bad Actors",
      description:
        "Also known as threat actors. Entity (a person or group) that poses a threat to the business or environment with the intention to cause harm. Harm can constitute physical or cyber damages, from breaking into a data center to hacking into systems with stolen credentials.",
    },
    {
      term: "Beta",
      description:
        "Product release stage during which the referenced feature or behavior is provided to subscribers to give them time to explore and adopt new product capabilities while providing final feedback prior to a GA release. Functionality is code-complete, stable, useful in a variety of scenarios, and believed to meet or almost meet quality expectations for a GA release. Beta releases may be private or public.",
    },
    {
      term: "Block/Unblock Users",
      description:
        "Removing or restoring a requestor's access to a resource. Refers to the features from Auth0's Attack Protection suite. Each service assesses login/sign-up trends and blocks IP addresses associated with suspicious activity.",
    },
    {
      term: "Bot Detection",
      description:
        "Form of attack protection in which Auth0 blocks suspected bot traffic by enabling a CAPTCHA during the login process.",
    },
    {
      term: "Breached Password Detection",
      description:
        "Form of attack protection in which Auth0 notifies your users if they use a username/password combination that has been compromised in a data leak on a third-party website or app.",
    },
    {
      term: "Breaking Change",
      description:
        "Change to the Auth0 platform that, to Auth0's knowledge, will cause failures in the interoperation of the Auth0 platform and customer applications.",
    },
    {
      term: "Brute-force Protection",
      description:
        "Form of attack protection that safeguards against brute-force attacks that occur from a single IP address and target a single user account.",
    },
    {
      term: "Callback",
      description:
        "URL to which Auth0 sends its response after authentication. It is often the same URL to which a user is redirected after authentication.",
    },
    {
      term: "Claim",
      description:
        "Attribute packaged in a security token which represents a claim that the provider of the token is making about an entity.",
    },
    {
      term: "Client ID",
      description:
        "Identification value assigned to your application after registration. This value is used in conjunction with other third-party services and can be found in Auth0 Dashboard > Application Settings.",
    },
    {
      term: "Client Secret",
      description:
        "Secret used by a client (application) to authenticate with the Authorization Server; it should be known to only the client and the Authorization Server and must be sufficiently random to not be guessable.",
    },
    {
      term: "Confidential Client",
      description:
        "According to the OAuth 2.0 protocol, clients (applications) can be classified as either confidential or public. Confidential clients can hold credentials securely and require a trusted backend server to do so. They can use grant types that require authentication by specifying their client ID and secret when calling the token endpoint.",
    },
    {
      term: "Confused Deputy",
      description:
        "Situation in which an attacker tricks a client or service into performing an action on their behalf.",
    },
    {
      term: "Connection",
      description:
        "Relationship between Auth0 and the sources of users for your applications. Examples include identity providers, passwordless authentication methods, or user databases.",
    },
    {
      term: "Consumption Device",
      description:
        "The device that helps the user consume a service in the Client-Initiated Backchannel Authentication Flow.",
    },
    {
      term: "Custom Domain",
      description: "Third-party domain with a specialized, or vanity, name. Also known as a CNAME.",
    },
    {
      term: "Deprecation",
      description:
        "Product release stage indicating that the referenced feature or behavior is not supported for new subscribers, is not actively being enhanced, and is being only minimally maintained.",
    },
    {
      term: "Digital Identity",
      description:
        "Set of attributes that define a particular user in the context of a function delivered by a particular application.",
    },
    {
      term: "Digital Signature",
      description:
        "Encrypted string that protects bits in a token from tampering. If the bits are changed or tampered with, the signature will no longer be able to be verified and it will be rejected.",
    },
    {
      term: "Directory",
      description:
        "Centralized repository of users (the most well-known of which is Active Directory) which centralizes credentials and attributes and makes it unnecessary for each application to have their own local identity setup.",
    },
    {
      term: "Early Access",
      description:
        "Product release stage during which the referenced feature or behavior is provided to a limited number of subscribers or customer development partners (CDPs) to test and provide feedback.",
    },
    {
      term: "End of Life",
      description:
        "Product release stage indicating that the referenced feature or behavior is removed from the platform. Continued use will likely result in errors.",
    },
    {
      term: "End of Life Date",
      description:
        "Date when access to a feature or behavior is removed from the platform. End Of Life Dates can vary between different plan types.",
    },
    {
      term: "Fine-grained Authorization (FGA)",
      description:
        "Auth0’s SaaS product that gives individual users access to specific objects or resources within your application.",
    },
    {
      term: "Flow",
      description:
        "Processes that can be extended using Actions. Each Flow is made up of one or more Triggers and represents the logical pipeline through which information moves during a single point in the Auth0 journey.",
    },
    {
      term: "General Availability",
      description:
        "Product release stage during which the referenced feature or behavior is fully functional and available to all subscribers for production use.",
    },
    {
      term: "Group",
      description:
        "Set of one or more users. In the Auth0 Authorization Extension, use groups to grant access to many users at a time.",
    },
    {
      term: "ID Token",
      description:
        "Credential meant for the client itself, rather than for accessing a resource. It has a fixed format that clients can parse and validate.",
    },
    {
      term: "Identity Provider (IdP)",
      description:
        "Service that stores and manages digital identities. Auth0 supports trusted social, enterprise, and legal identity providers.",
    },
    {
      term: "JSON Web Token (JWT)",
      description:
        "Open, industry standard RFC 7519 method for representing claims securely between two parties. At Auth0, ID Tokens are always returned in JWT format, and Access Tokens are often in JWT format.",
    },
    {
      term: "Localization",
      description: "Ability to render the New Universal Login experience into a supported language.",
    },
    {
      term: "Lock",
      description:
        "Auth0's UI widget for authenticating users. It is ready to go as-is and is the default face of the Classic Universal Login experience.",
    },
    {
      term: "Management API",
      description: "Auth0's API to manage Auth0 services and perform administrative tasks programatically.",
    },
    {
      term: "Metadata",
      description:
        "Information users can update, such as preferences or profile settings. Metadata is added to ID tokens and can be stored in user profiles.",
    },
    {
      term: "Migration",
      description:
        "Process by which a customer moves away from a particular feature or behavior. Migrations should occur during the Deprecation stage.",
    },
    {
      term: "Multi-factor authentication (MFA)",
      description:
        "Authentication process that considers multiple factors. Typically the first factor is username/password, and the second is a code or link via email/SMS, or OTP via an app.",
    },
    {
      term: "Nonce",
      description:
        "Arbitrary (often random or pseudo-random) number issued in an authentication protocol that can be used to help detect and mitigate replay attacks.",
    },
    {
      term: "OAuth 2.0",
      description:
        "Authorization framework that defines authorization protocols and workflows. OAuth 2.0 defines roles, authorization grants, authorization requests and responses, and token handling.",
    },
    {
      term: "OpenID",
      description:
        "Open standard for authentication that allows applications to verify users are who they say they are without needing to collect or store login information.",
    },
    {
      term: "Organizations",
      description:
        "Auth0 product that allows B2B customers to categorize end-users and define specific roles, login experience, and access to resources.",
    },
    {
      term: "Passwordless",
      description:
        "Form of authentication where the first factor is not a password. Instead, it could be a one-time password received by email or SMS, a push notification, or a biometric sensor.",
    },
    {
      term: "Perimeter",
      description:
        "Set of boundaries that encompass a directory, all of its users, and all of the applications which use the directory.",
    },
    {
      term: "Product Release Stages",
      description: "Phases that describe how Auth0 stages, releases, and retires product functionality.",
    },
    {
      term: "Public Client",
      description:
        "According to the OAuth 2.0 protocol, clients can be confidential or public. Public clients cannot hold credentials securely, so should only use grant types that do not require the use of their client secret.",
    },
    {
      term: "Raw Credential",
      description:
        "Shared secret or set of information that is agreed upon between the user and the resource that allow the resource to verify the identity of a user.",
    },
    {
      term: "Refresh Token",
      description:
        "Special kind of token that can be used to obtain a renewed Access Token. It is useful for renewing expiring Access Tokens without forcing the user to log in again.",
    },
    {
      term: "Refresh Token Rotation",
      description:
        "Strategy of frequently replacing refresh tokens to minimize vulnerability. Each exchange also returns a new refresh token.",
    },
    {
      term: "Relying Party",
      description:
        "Entity (such as a service or application) that depends on a third-party identity provider to authenticate a user.",
    },
    {
      term: "Resource Owner",
      description: "Entity (such as a user or application) capable of granting access to a protected resource.",
    },
    {
      term: "Resource Server",
      description:
        "Server hosting protected resources. Resource servers accept and respond to protected resource requests.",
    },
    {
      term: "Role",
      description:
        "Aspect of a user’s identity assigned to the user to indicate the level of access they should have to the system.",
    },
    {
      term: "Scope",
      description:
        "Mechanism that defines the specific actions applications can be allowed to do or information they can request on a user’s behalf.",
    },
    {
      term: "Security Assertion Markup Language (SAML)",
      description:
        "XML-based standardized protocol by which two parties can exchange authentication information without the use of a password.",
    },
    {
      term: "Security Token",
      description: "Digitally-signed artifact used to prove that the user was successfully authenticated.",
    },
    {
      term: "Session Cookie",
      description:
        "Entity emitted by middleware after it establishes that the token it is receiving is signed, valid, and comes from a trusted source.",
    },
    {
      term: "Shadow Account",
      description:
        "Difficult-to-sustain practice of manually provisioning a user from a local directory separately in a remote directory when they need access to remote applications.",
    },
    {
      term: "Signing Algorithm",
      description: "Hashing algorithm used to digitally sign tokens to ensure the token has not been tampered with.",
    },
    {
      term: "Single Sign-On (SSO)",
      description:
        "Service that, after a user logs into one application, automatically logs them into other applications as well. Single Logout works similarly in reverse.",
    },
    {
      term: "Subscription",
      description: "Agreement that defines the features and quotas available for each of your tenants.",
    },
    {
      term: "Suspicious IP Throttling",
      description:
        "Form of attack protection that protects your tenant against suspicious logins targeting too many accounts from a single IP address.",
    },
    {
      term: "Tenant",
      description:
        "A logically-isolated group of users who share common access with specific privileges to a single software instance.",
    },
    {
      term: "Token Endpoint",
      description: "Endpoint on the Authorization Server that is used to programmatically request tokens.",
    },
    {
      term: "Trigger",
      description:
        "Event that automatically invokes an Action when a specific operation, such as a user logging in, occurs at runtime.",
    },
    {
      term: "Trust",
      description:
        "A resource trusts an identity provider or authority when that resource is willing to believe what the authority says about its users.",
    },
    {
      term: "Universal Login",
      description:
        "Auth0’s implementation of the authentication flow, which is the key feature of an Authorization Server.",
    },
    {
      term: "Web Service Federation (WS-Fed)",
      description:
        "Protocol for managing user identities between systems, domains, and identity providers with established trust using WS-Trust. Mainly used for Microsoft products.",
    },
  ];

  const A_TO_Z = Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i));
  const norm = (s) => s.normalize("NFKD").toLowerCase().trim();

  const useQueryParamState = (key, initial = "") => {
    const [value, setValue] = useState(() => {
      if (typeof window === "undefined") return initial;
      const url = new URL(window.location.href);
      return url.searchParams.get(key) ?? initial;
    });

    useEffect(() => {
      if (typeof window === "undefined") return;
      const url = new URL(window.location.href);
      if (value) url.searchParams.set(key, value);
      else url.searchParams.delete(key);
      window.history.replaceState({}, "", url.toString());
    }, [key, value]);

    return [value, setValue];
  };

  const highlight = (text, query) => {
    if (!query) return text;
    const i = norm(text).indexOf(norm(query));
    if (i < 0) return text;
    const end = i + query.length;
    return (
      <>
        {text.slice(0, i)}
        <mark>{text.slice(i, end)}</mark>
        {text.slice(end)}
      </>
    );
  };

  const [term, setTerm] = useQueryParamState("term", "");
  const groups = useMemo(() => {
    const filtered = term ? GLOSSARY.filter((g) => norm(g.term).includes(norm(term))) : GLOSSARY;

    const map = new Map();
    for (const item of filtered.sort((a, b) => a.term.localeCompare(b.term))) {
      const key = (item.term[0] || "").toUpperCase();
      map.set(key, [...(map.get(key) || []), item]);
    }
    return map;
  }, [term]);

  const letterRefs = useRef({});
  const handleJump = (letter) => {
    const el = letterRefs.current[letter];
    if (el) el.scrollIntoView({ behavior: "smooth", block: "start" });
  };

  return (
    <div className="mx-auto max-w-5xl py-10 text-gray-900 dark:text-gray-100">
      {/* Search */}
      <div className="mb-6">
        <div className="relative">
          <span className="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 dark:text-gray-400">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <circle cx="11" cy="11" r="8"></circle>
              <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
            </svg>
          </span>
          <input
            id="search-input-control"
            type="text"
            placeholder="Search by name"
            value={term}
            onChange={(e) => setTerm(e.target.value)}
            className="w-full rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-black pl-10 pr-4 py-3 outline-none focus:border-indigo-500 dark:focus:border-indigo-400 text-gray-900 dark:text-gray-100"
          />
        </div>
      </div>

      {/* A–Z index */}
      <nav className="mb-8 flex flex-wrap gap-3">
        {A_TO_Z.map((letter) => {
          const enabled = groups.has(letter);
          return (
            <button
              key={letter}
              onClick={() => enabled && handleJump(letter)}
              disabled={!enabled}
              className={`text-lg ${
                enabled
                  ? "text-indigo-600 dark:text-indigo-300 hover:text-black dark:hover:text-white"
                  : "text-gray-400 dark:text-gray-600 cursor-not-allowed"
              }`}
              aria-label={`Jump to ${letter}`}
            >
              {letter}
            </button>
          );
        })}
      </nav>

      {/* Groups */}
      <section>
        {A_TO_Z.filter((L) => groups.has(L)).map((letter) => {
          const items = groups.get(letter);
          return (
            <section key={letter} className="mb-10">
              <div className="flex items-end gap-1">
                <h2
                  id={letter}
                  ref={(el) => (letterRefs.current[letter] = el)}
                  className="text-3xl font-semibold glossary_h2"
                >
                  {letter}
                </h2>
                <div className="flex-1 border-b-2 border-[#3F59E4]" />
              </div>

              <ul className="mt-6 space-y-6 glossary_list">
                {items.map((it) => (
                  <li key={it.term} className="scroll-mt-24">
                    <h3 id={norm(it.term)} className="text-xl font-medium text-gray-900 dark:text-gray-100 glossary_h3">
                      {it.term}
                    </h3>
                    <p className="mt-1 text-gray-700 dark:text-gray-300">{highlight(it.description, term)}</p>
                  </li>
                ))}
              </ul>
            </section>
          );
        })}

        {groups.size === 0 && (
          <p className="text-gray-500 dark:text-gray-400">No results for “{term}”. Try a different term.</p>
        )}
      </section>
    </div>
  );
};

export const GlossaryFR = () => {
  const GLOSSARY = [
    {
      term: "Abonnement",
      description:
        "Entente qui définit les fonctionnalités et les quotas alloués à chacun de vos locataires. Auth0 dispose de plusieurs niveaux d’abonnement pour répondre aux besoins des différents développeurs et organisations.",
    },
    {
      term: "Accès anticipé",
      description:
        "Phase de lancement du produit durant laquelle une fonctionnalité ou un comportement particulier est fourni à un nombre restreint d’abonnés ou de partenaires de développement client (CDP) afin qu’ils puissent l’essayer et nous faire part de leurs commentaires. À ce stade, celle-ci n’est pas encore terminée, mais elle est suffisamment avancée pour être testée.",
    },
    {
      term: "Acteurs menaçants",
      description:
        "On appelle aussi ces individus ou groupes des auteurs de cybermenaces. Ce sont des entités qui représentent une menace pour une entreprise ou un environnement, avec l’intention de causer des dommages. Ces dommages peuvent être physiques ou informatiques, allant d’une intrusion dans un centre de données à un piratage de systèmes à l’aide d’identifiants volés.",
    },
    {
      term: "Actions",
      description:
        "Fonctions sécurisées, propres au locataire, versionnées et écrites en Node.js qui s’exécutent à certains moments pendant le temps d’exécution d’Auth0. Les actions sont utilisées pour personnaliser et étendre les capacités d’Auth0 avec une logique personnalisée.",
    },
    {
      term: "Algorithme de signature",
      description:
        "Algorithme de hachage utilisé pour signer numériquement les jetons afin de s’assurer qu’ils n’ont pas été altérés par des acteurs menaçants.",
    },
    {
      term: "Appareil d’authentification",
      description: "dans le flux d’authentification par canal d’appui initié par le client.",
    },
    {
      term: "Appareil de consommation",
      description:
        "L’appareil qui aide l’utilisateur à consommer un service dans le flux d’authentification par canal d’appui initié par le client.",
    },
    {
      term: "Application",
      description:
        "Votre logiciel qui s’appuie sur Auth0 pour l’authentification et la gestion des identités. Auth0 prend en charge les applications Web classiques, les applications natives et les applications de communication entre machines.",
    },
    {
      term: "Association de comptes",
      description:
        "Association de comptes d’utilisateurs sur plusieurs plateformes pour permettre aux utilisateurs d’accéder à plusieurs ressources ou applications en fournissant des identifiants une seule fois.",
    },
    {
      term: "Audience",
      description:
        "Identifiant unique de l'audience d’un jeton émis, déterminé au sein d’un jeton Web JSON comme la demande **aud**. La valeur audience est soit l’application (ID client) pour un jeton d’ID, soit l’API appelée (`identifiant de l’API`) pour un jeton d’accès. Au sein d’Auth0, la valeur audience envoyée dans une demande de jeton d’accès dicte si ce jeton est renvoyé dans un format opaque ou JWT.",
    },
    {
      term: "Auth0 Dashboard",
      description:
        "L’interface principale d’administration d’Auth0 dans laquelle vous pouvez enregistrer votre application ou API, vous connecter à un magasin d’utilisateurs ou à un autre fournisseur d’identité, et configurer vos services Auth0.",
    },
    {
      term: "Authentification multifacteur (MFA)",
      description:
        "Processus d’authentification qui prend en compte plusieurs facteurs. En général, chez Auth0, le premier facteur est l’échange courant du nom d’utilisateur/mot de passe, et le deuxième est un code ou un lien par courriel ou SMS, un mot de passe à usage unique au moyen d’une application comme Authy ou GoogleºAuthenticator, ou une notification poussée au moyen d’une application pour téléphone, comme Guardian ou Duo. L’utilisation de plusieurs facteurs permet à votre compte de rester sécurisé même si une personne mal intentionnée obtient l’un ou l’autre des facteurs (par exemple, en volant votre mot de passe ou votre téléphone).",
    },
    {
      term: "Authentification multifacteur (MFA) adaptative",
      description:
        "L’authentification multifacteur (MFA) qui n’est déclenchée pour les utilisateurs que lorsqu’une tentative de connexion est déterminée comme étant une connexion de faible confiance. Avec Adaptive MFA, Auth0 ne déclenche l’authentification multifacteur (MFA) adaptative que lorsque c’est nécessaire pour ajouter de la friction pour les acteurs menaçants tout en gardant l’expérience de connexion inchangée pour les bons acteurs.",
    },
    {
      term: "Authentification unique (SSO)",
      description:
        "Service qui, après qu’un utilisateur se soit connecté à une application, le connecte automatiquement à d’autres applications, quels que soient la plateforme, la technologie ou le domaine utilisés par l’utilisateur. L’utilisateur ne se connecte qu’une seule fois (d’où le nom de la fonctionnalité). On parle aussi de déconnexion unique (SLO) lorsqu’un utilisateur, après s’être déconnecté d’une application, est déconnecté de chaque application ou service où il était connecté. La SSO et la SLO sont rendues possibles grâce à l’utilisation de sessions.",
    },
    {
      term: "Autorisation à granularité fine (FGA)",
      description:
        "Produit SaaS d’Auth0 qui permet à des utilisateurs individuels d’accéder à des objets ou ressources particulières au sein de votre application.",
    },
    {
      term: "Bêta",
      description:
        "Phase de lancement du produit durant laquelle la fonctionnalité ou le comportement référencé est fourni aux abonnés. Cela leur permet d’explorer et d’adopter les nouvelles capacités du produit, tout en nous fournissant un retour d’information final avant la disponibilité générale (DG). La fonctionnalité est entièrement fonctionnelle, stable, adaptable à divers contextes et considérée comme répondant ou s’approchant des normes de qualité pour une version de disponibilité générale. Les versions bêta peuvent être restreintes à un nombre défini d’abonnés (privées) ou ouvertes à tous les abonnés (publiques).",
    },
    {
      term: "Bloquer/débloquer des utilisateurs",
      description:
        "Suppression ou restauration de l’accès d’un demandeur à une ressource. Fait référence aux fonctionnalités de la suite de protection contre les attaques d’Auth0 : détection de mots de passe compromis, protection contre les attaques par force brute et limitation des adresses IP suspectes. Chaque service évalue les tendances de connexion/signature et bloque les adresses IP associées à une activité suspecte.",
    },
    {
      term: "Changement cassant",
      description:
        "Modification de la plateforme Auth0 qui, à la connaissance d’Auth0, entraînera des défaillances dans l’interopérabilité de la plateforme Auth0 et des applications clients.",
    },
    {
      term: "Client confidentiel",
      description:
        "Selon le protocole OAuth 2.0, les clients (applications) peuvent être classés comme confidentiels ou publics selon qu’ils sont capables ou non de détenir des identifiants (telles qu’un identifiant client et un secret) en toute sécurité. Les clients confidentiels peuvent conserver des identifiants de manière sécurisée sans les exposer à des parties non autorisées et ont besoin d’un serveur dorsal de confiance pour ce faire. Ils peuvent utiliser des types d’autorisation qui exigent qu’ils s’authentifient en spécifiant leur ID client et leur secret lorsqu’ils appellent le point de terminaison du jeton et peuvent se voir délivrer des jetons signés de manière symétrique ou asymétrique.",
    },
    {
      term: "Client public",
      description:
        "Selon le protocole OAuth 2.0, les clients (applications) peuvent être classés comme confidentiels ou publics selon qu’ils sont capables ou non de détenir des identifiants (telles qu’un ID client et un secret) en toute sécurité. Les clients publics ne peuvent pas détenir d’identifiants en toute sécurité et ne doivent donc utiliser que des types d’autorisation qui ne requièrent pas l’utilisation de leur secret client. Les jetons d’ID qui leur sont délivrés doivent être signés de manière asymétrique à l’aide d’une clé privée (RS256) et vérifiés à l’aide de la clé publique correspondant à la clé privée utilisée pour signer le jeton.",
    },
    {
      term: "Code d’autorisation",
      description:
        "Chaîne aléatoire générée par le serveur d’autorisation et renvoyée à l’application dans le cadre de la réponse d’autorisation. Un code d’autorisation a une durée de vie relativement courte et est remplacé par un jeton d’accès au point de terminaison du jeton lors de l’utilisation du flux de code d’autorisation, avec ou sans Proof Key for Code Exchange (PKCE).",
    },
    {
      term: "Compte fantôme",
      description:
        "Cette pratique difficile à maintenir consiste à fournir manuellement un utilisateur à partir d’un répertoire local séparément dans un répertoire distant (essentiellement en créant une copie, ou un compte fantôme, du compte d’origine) lorsqu’il a besoin d’accéder à des applications distantes.",
    },
    {
      term: "Confiance",
      description:
        "Une ressource fait confiance à un fournisseur d’identité ou à une autorité lorsqu’elle est prête à croire ce que l’autorité dit sur ses utilisateurs.",
    },
    {
      term: "Connexion",
      description:
        "Relation entre Auth0 et les sources d’utilisateurs pour vos applications. Il peut s’agir par exemple de fournisseurs d’identité (tels que Google ou Active Directory), de méthodes d’authentification sans mot de passe ou de bases de données d’utilisateurs.",
    },
    {
      term: "Connexion universelle",
      description:
        "Auth0 met en œuvre le flux d’authentification, qui constitue la fonctionnalité principale d’un serveur d’autorisation. Chaque fois qu’un utilisateur doit prouver son identité, vos applications effectuent une redirection vers la connexion universelle. Auth0 prend ensuite les mesures nécessaires pour confirmer l’identité de l’utilisateur",
    },
    {
      term: "Date de fin de vie",
      description:
        "Date à laquelle l’accès à une fonctionnalité ou à un comportement est supprimé de la plateforme. Les dates de fin de vie peuvent varier d’un type de plan à l’autre.",
    },
    {
      term: "Déclencheur",
      description:
        "Événement qui invoque automatiquement une action lorsqu’une opération particulière, telle que l’ouverture d’une session par un utilisateur, se produit au moment de l’exécution. Certains déclencheurs sont exécutés de manière synchrone, bloquant le flux dans lequel ils sont impliqués, et d’autres sont exécutés de manière asynchrone.",
    },
    {
      term: "Demande",
      description:
        "Attribut inclus dans un jeton de sécurité qui représente une demande que le fournisseur du jeton fait au sujet d’une entité.",
    },
    {
      term: "Détection de mot de passe compromis",
      description:
        "Forme de protection contre les attaques par laquelle Auth0 notifie vos utilisateurs s’ils utilisent une combinaison nom d’utilisateur/mot de passe qui a été compromise lors d’une fuite de données sur un site Web ou une application tierce.",
    },
    {
      term: "Détection de robots",
      description:
        "Forme de protection contre les attaques par laquelle Auth0 bloque le trafic suspecté d’être le fait de robots en activant un CAPTCHA pendant le processus de connexion.",
    },
    {
      term: "Disponibilité générale",
      description:
        "Phase de lancement du produit au cours de laquelle la fonctionnalité ou le comportement référencé est pleinement fonctionnel et accessible à tous les abonnés (selon le niveau de tarification) pour une utilisation en production. Lorsqu’une fonctionnalité existante est remplacée par une nouvelle version, Auth0 garantit une période de compatibilité rétroactive conformément à notre politique de dépréciation, et nous informons les clients pour leur permettre de s’adapter à la nouvelle version dans les délais impartis.",
    },
    {
      term: "Domaine personnalisé",
      description: "Domaine tiers avec un nom spécialisé ou reflétant votre marque. Appelé égalementºCNAME.",
    },
    {
      term: "Données d’identification brutes",
      description:
        "Partage d’informations secrètes ou ensemble d’informations convenues entre l’utilisateur et la ressource servant à vérifier l’identité de l’utilisateur.",
    },
    {
      term: "Fin de vie",
      description:
        "Étape de la phase de lancement du produit indiquant que la fonctionnalité ou le comportement référencé a été retiré de la plateforme. La poursuite de l’utilisation de la fonctionnalité ou du comportement entraînera probablement des erreurs. Le nouveau comportement sera automatiquement activé pour les locataires qui n’ont pas opté pour cette option pendant la fenêtre de migration.",
    },
    {
      term: "Flux",
      description:
        "Processus qui peuvent être étendus par des actions. Chaque flux est composé d’un ou de plusieurs déclencheurs et représente le pipeline logique dans lequel l’information se déplace à un moment donné du parcours d’Auth0.",
    },
    {
      term: "Flux d’autorisation",
      description:
        "Un autre nom pour les octrois d’autorisations décrits dans OAuth 2.0. Les flux d’autorisation sont les flux de production qu’une ressource (application ou AIP) utilise pour accorder l’accès aux demandeurs. En fonction du type de technologie (p. ex., si une application peut stocker un secret client) et du type de demandeur, les propriétaires de ressources peuvent utiliser un flux de code d’autorisation, une preuve d’échange de code clé (PKCE), l’identifiant de mot de passe du propriétaire des ressources (ROPG), un identifiant implicite ou un identifiant client.",
    },
    {
      term: "Fournisseur d’identité (IdP)",
      description:
        "Service de stockage et de gestion des identités numériques. Auth0 prend en charge les fournisseurs d’identité des réseaux sociaux, des entreprises et des organismes légaux de confiance. Auth0 peut également fonctionner comme un fournisseur d’identité pour vos applications.",
    },
    {
      term: "Groupe",
      description:
        "Ensemble d’un ou plusieurs utilisateurs. Dans Auth0 Authorization Extension, utilisez les groupes pour accorder l’accès à plusieurs utilisateurs à la fois.",
    },
    {
      term: "ID client",
      description:
        "Valeur d’identification attribuée à votre application après l’enregistrement. Cette valeur est utilisée en conjonction avec d’autres services tiers et figure dans **Auth0 Dashboard** > **Paramètres de l’application**.",
    },
    {
      term: "Identité numérique",
      description:
        "Ensemble d’attributs qui définissent un utilisateur particulier dans le contexte d’une fonction assurée par une application particulière.",
    },
    {
      term: "Jeton d’accès",
      description:
        "Identifiant qui peut être utilisé par une application pour accéder à une API. Il informe l’API que le porteur du jeton a été autorisé à accéder à l’API et à effectuer des actions particulières définies par la permission qui lui a été accordée. Un jeton d’accès peut se présenter sous n’importe quel format, mais les chaînes opaques et les jetons Web JSON (JWT) constituent deux options populaires. Ils doivent être transmis à l’API en tant qu’identifiant porteur dans un en-tête d’autorisation HTTP.",
    },
    {
      term: "Jeton d’actualisation",
      description:
        "Type particulier de jeton qui peut être utilisé pour obtenir un jeton d’accès renouvelé. Il est utile pour renouveler les jetons d’accès arrivant à expiration sans obliger l’utilisateur à se connecter à nouveau. Le jeton d’actualisation permet de demander un nouveau jeton d’accès à tout moment jusqu’à ce que le jeton d’actualisation soit bloqué.",
    },
    {
      term: "Jeton d’ID",
      description:
        "Identifiant conçu pour le client lui-même, et non pour l’accès à une ressource. Il a un format fixe que les clients peuvent analyser et valider.",
    },
    {
      term: "Jeton de sécurité",
      description: "Artéfact signé numériquement utilisé pour prouver que l’utilisateur a été authentifié avec succès.",
    },
    {
      term: "Jeton Web JSON (JWT)",
      description:
        "Méthode ouverte, conforme à la norme industrielle RFC 7519, qui permet de représenter en toute sécurité les demandes entre deux parties. Chez Auth0, les jetons d’ID sont toujours renvoyés au format JWT, tandis que les jetons d’accès sont généralement au même format. Il est possible de décoder et d’afficher les demandes contenues dans un JWT bien formé sur le site JWT.io.",
    },
    {
      term: "Limitation des adresses IP suspectes",
      description:
        "Cette mesure de sécurité protège votre locataire contre les connexions suspectes provenant d’une seule adresse IP qui ciblent un grand nombre de comptes.",
    },
    {
      term: "Localisation",
      description:
        "Possibilité de présenter l’interface de la nouvelle connexion universelle dans une des langues prises en charge.",
    },
    {
      term: "Locataire",
      description:
        "Au sein d’Auth0, un groupe d’utilisateurs logiquement isolés qui partagent un accès commun à une instance logicielle unique et qui possèdent des privilèges particuliers. Chaque locataire est isolé, empêchant tout autre locataire d’accéder à ses données, même si plusieurs locataires peuvent fonctionner sur la même machine. Le terme « locataire », en général, est emprunté à l’architecture logicielle multilocataire.",
    },
    {
      term: "Lock",
      description:
        "Gadget logiciel d’interface utilisateur pour l’authentification des utilisateurs par Auth0. Il est prêt à l’emploi et représente l’expérience de connexion universelle standard. Lock vous permet de personnaliser légèrement le comportement et l’apparence, mais son objectif principal est la simplicité d’utilisation.",
    },
    {
      term: "Management API",
      description:
        "API d’Auth0 permettant de gérer les services Auth0 et d’effectuer des tâches administratives de façon programmatique.",
    },
    {
      term: "Métadonnées",
      description:
        "Informations que les utilisateurs peuvent mettre à jour, telles que les préférences ou les paramètres de profil. Les métadonnées sont ajoutées aux jetons d’ID et peuvent être stockées dans les profils utilisateurs.",
    },
    {
      term: "Migration",
      description:
        "Processus par lequel un client abandonne une fonctionnalité ou un comportement particulier. Les migrations devraient avoir lieu au cours de la phase de lancement du produit où celui-ci est déconseillé.",
    },
    {
      term: "Nombre aléatoire",
      description:
        "Nombre arbitraire (souvent aléatoire ou pseudo-aléatoire) émis dans un protocole d’authentification qui peut être utilisé pour aider à détecter et atténuer les attaques par réinsertion utilisant d’anciennes communications. En d’autres termes, le nombre aléatoire n’est émis qu’une seule fois, de sorte que si un attaquant tente de rejouer une transaction avec un nombre aléatoire différent, sa fausse transaction peut être détectée plus facilement.",
    },
    {
      term: "OAuth 2.0",
      description:
        "Cadre d’applications d’autorisation qui définit les protocoles d’autorisation et les flux de production. OAuth 2.0 définit les rôles, les octrois d’autorisation (ou flux de production), les demandes d’autorisation et les réponses, ainsi que la gestion des jetons. Les protocoles OpenID Connect (OIDC) pour vérifier l’identité de l’utilisateur étendent OAuth 2.0.",
    },
    {
      term: "Obsolescence",
      description:
        "Phase de diffusion d’un produit indiquant que la fonctionnalité ou le comportement référencé n’est plus pris en charge pour les nouveaux abonnés, qu’il ne fait pas l’objet d’améliorations actives et qu’il ne fait l’objet que d’un entretien minimal. Les locataires utilisant la fonctionnalité ou le comportement au moment de l’obsolescence continueront d’y avoir accès.",
    },
    {
      term: "OpenID",
      description:
        "Norme ouverte d’authentification qui permet aux applications de vérifier que les utilisateurs sont bien ceux qu’ils prétendent être sans avoir à collecter, stocker et donc être responsable des informations de connexion de l’utilisateur.",
    },
    {
      term: "Organizations",
      description:
        "Produit Auth0 qui permet aux clients de commerce électronique interentreprises (C3E) de catégoriser les utilisateurs finaux et de définir des rôles particuliers, l’expérience de connexion et l’accès aux ressources.",
    },
    {
      term: "Partie de confiance",
      description:
        "Entité (telle qu’un service ou une application) qui dépend d’un fournisseur d’identité tiers pour authentifier un utilisateur.",
    },
    {
      term: "Périmètre",
      description:
        "Ensemble des limites qui englobent un répertoire, tous ses utilisateurs et toutes les applications qui utilisent le répertoire. Dans certaines mises en œuvre, ce périmètre est un emplacement physique; dans d’autres, il s’agit d’un ensemble de réseaux ou d’appareils connectés par VPN.",
    },
    {
      term: "Permission",
      description:
        "Mécanisme qui définit les actions que les applications peuvent être autorisées à effectuer ou les informations qu’elles peuvent demander au nom d’un utilisateur. Souvent, les applications voudront utiliser les informations qui ont déjà été créées dans une ressource en ligne. Dans ce cas, l’application devra demander l’autorisation d’accéder à ces informations au nom de l’utilisateur. Lorsqu’une application demande l’autorisation d’accéder à une ressource par l’intermédiaire d’un serveur d’autorisations, elle utilise le paramètre Permissions pour préciser l’accès dont elle a besoin, et le serveur d’autorisations utilise ce même paramètre pour répondre avec l’accès qui a été effectivement accordé.",
    },
    {
      term: "Phases de lancement du produit",
      description:
        "Phases qui décrivent comment Auth0 implémente, diffuse et retire des fonctionnalités du produit. Les fonctionnalités du produit peuvent ne pas passer par toutes les phases de lancement, et la durée de chaque phase varie en fonction de la permission et de la portée de la fonctionnalité.",
    },
    {
      term: "Point de terminaison de jeton",
      description:
        "Point de terminaison sur le serveur d’autorisations utilisé pour demander des jetons de manière programmatique.",
    },
    {
      term: "Propriétaire de ressources",
      description:
        "Entité (telle qu’un utilisateur ou une application) capable d’accorder l’accès à une ressource protégée.",
    },
    {
      term: "Protection contre les attaques",
      description:
        "Fonctionnalités offertes par Auth0 pour détecter et atténuer les attaques, notamment la protection contre les attaques par force brute, la limitation des IP suspectes, la détection des mots de passe frauduleux, la détection des robots et l’authentification multifacteur (MFA) adaptative.",
    },
    {
      term: "Protection contre les attaques par force brute",
      description:
        "Forme de protection contre les attaques par force brute provenant d’une seule adresse IP et qui ciblent un seul compte d’utilisateur.",
    },
    {
      term: "Rappel",
      description:
        "URL vers laquelle Auth0 envoie sa réponse après l’authentification. Il s’agit souvent de la même URL vers laquelle un utilisateur est redirigé après l’authentification.",
    },
    {
      term: "Répertoire",
      description:
        "Référentiel centralisé d’utilisateurs (dont le plus connu est Active Directory) qui centralise les identifiants et les attributs et rend inutile pour chaque application d’avoir sa propre configuration d’identité locale et son propre groupe d’utilisateurs. Permet l’authentification unique pour toutes les applications utilisant le même répertoire d’utilisateurs.",
    },
    {
      term: "Rôle",
      description:
        "Aspect de l’identité d’un utilisateur qui lui est attribué pour indiquer le niveau d’accès qu’il doit avoir au système. Les rôles sont essentiellement des collections d’autorisations.",
    },
    {
      term: "Rotation des jetons d’actualisation",
      description:
        "Stratégie consistant à remplacer fréquemment les jetons d’actualisation pour minimiser la vulnérabilité. Avec la rotation des jetons d’actualisation, chaque fois que votre application échange un jeton d’actualisation pour obtenir un nouveau jeton d’accès, Auth0 renvoie également un nouveau jeton d’actualisation.",
    },
    {
      term: "Sans mot de passe",
      description:
        "Forme d’authentification où le premier facteur n’est pas un mot de passe. Il peut s’agir d’un mot de passe à usage unique reçu par courriel ou SMS, d’une notification poussée ou d’un capteur biométrique. L’authentification sans mot de passe utilise des mots de passe à usage unique, de sorte que les utilisateurs sont moins exposés aux attaques typiques par mot de passe (p. ex., attaque par dictionnaire ou par bourrage d’identifiant) qu’avec les connexions traditionnelles par nom d’utilisateur/mot de passe.",
    },
    {
      term: "Secret client",
      description:
        "Secret utilisé par un client (application) pour s’authentifier auprès du serveur d’autorisation; il ne doit être connu que du client et du serveur d’autorisation et doit être suffisamment aléatoire pour ne pas être deviné.",
    },
    {
      term: "Security Assertion Markup Language (SAML)",
      description:
        "Protocole normalisé basé sur XML permettant à deux parties d’échanger des informations d’authentification sans utiliser de mot de passe.",
    },
    {
      term: "Serveur d’authentification",
      description:
        "Serveur qui confirme ou rejette l’identité d’un utilisateur. Un serveur d’authentification ne limite pas les actions ou les ressources disponibles pour l’utilisateur (bien qu’il puisse fournir un contexte à cette raison).",
    },
    {
      term: "Serveur d’autorisations :",
      description:
        "Serveur centralisé qui contribue à définir les limites de l’accès d’un utilisateur. Par exemple, votre serveur d’autorisations peut contrôler les données, les tâches et les fonctionnalités accessibles à un utilisateur. Un serveur d’autorisation ne sert pas à authentifier les utilisateurs. Cette tâche incombe au serveur d’authentification, qui est chargé de vérifier l’identité d’un utilisateur.",
    },
    {
      term: "Serveur de ressources",
      description:
        "Serveur hébergeant des ressources protégées. Les serveurs de ressources traitent les requêtes pour des ressources sécurisées et y répondent.",
    },
    {
      term: "Signature numérique",
      description:
        "Chaîne cryptée qui protège les bits d’un jeton contre la falsification. Si les bits sont modifiés ou altérés, la signature ne pourra plus être vérifiée et sera rejetée.",
    },
    {
      term: "Témoin de session",
      description:
        "Entité émise par le logiciel médiateur après avoir établi que le jeton qu’il reçoit est signé, valide et provient d’une source de confiance (le fournisseur d’identité). Cette entité représente le fait qu’une authentification réussie a eu lieu avec le fournisseur d’identité. Ce témoin évite de devoir répéter continuellement ce processus avec les jetons, en permettant à l’utilisateur d’être considéré comme authentifié tant que le témoin est présent.",
    },
    {
      term: "Tokenset",
      description:
        "For each user's authorized connection, like Google or Microsoft, Token Vault creates a secure container called a tokenset. A tokenset contains the access and refresh tokens needed to call that external provider's APIs on the user's behalf. A tokenset securely stores access and refresh tokens on the Auth0 Authorization Server.",
    },
    {
      term: "Usurpation",
      description: "Scénario où un assaillant persuade un client ou un service de réaliser une tâche à sa place.",
    },
    {
      term: "Web Service Federation (WS-Fed)",
      description:
        "Protocole de gestion des identités des utilisateurs entre les systèmes, les domaines et les fournisseurs d’identité. Ce protocole s’appuie sur WS-Trust pour établir une confiance et est principalement utilisé pour les produits Microsoft. Il définit des politiques sur la manière de partager les métadonnées de fédération. Developers * [Developer Hub](https://developer.auth0.com/resources) * [Code Samples and Guides](https://developer.auth0.com/resources/code-samples) * [Blog posts](https://auth0.com/blog/developers/) * [Videos](https://auth0.com/docs/videos) * [Identity Unlocked - Podcasts](https://identityunlocked.auth0.com/public/49/Identity,-Unlocked.--bed7fada) * [Zero Index Newsletter](https://developer.auth0.com/newsletter) Documentation * [Articles](https://auth0.com/docs/articles) * [Quickstarts](https://auth0.com/docs/quickstarts) * [APIs](https://auth0.com/docs/api) * [SDK Libraries](https://auth0.com/docs/libraries) * [Blog](https://auth0.com/blog/) * [Reports](https://auth0.com/resources/ebooks) * [Webinars](https://auth0.com/resources/webinars) Get Involved * [Forum](https://community.auth0.com/) * [Events](https://developer.auth0.com/events) * [Ambassador Program](https://auth0.com/ambassador-program) * [Auth0 Research Program](https://auth0.com/research-program) Company * [Our Customers](https://auth0.com/customers) * [Compliance - Ensuring privacy and security](https://auth0.com/security) * [Partners](https://auth0.com/partners) * [Careers We're hiring!](https://www.okta.com/company/careers/) * [Okta + Auth0](https://www.okta.com/okta-and-auth0/) Support Center * [Community](https://community.auth0.com/) * [Support](https://support.auth0.com/) * [Help](https://community.auth0.com/c/help/6) * [FAQs](https://community.auth0.com/c/faq/42) * [Auth0 Marketplace](https://marketplace.auth0.com) Learning * [Learn](https://auth0.com/learn) * [Intro to IAM (CIAM)](https://auth0.com/intro-to-iam) * [Blog](https://auth0.com/blog/) Platform * [Access Management](https://auth0.com/platform/access-management) * [Extensibility](https://auth0.com/platform/extensibility) * [Security](https://auth0.com/platform/login-security) * [User Management](https://auth0.com/platform/user-management) * [Authentication](https://auth0.com/platform/authentication) Features * [Universal Login](https://auth0.com/features/universal-login) * [Single Sign On](https://auth0.com/features/single-sign-on) * [Multifactor Authentication](https://auth0.com/features/multifactor-authentication) * [Actions](https://auth0.com/features/actions) * [Machine to Machine](https://auth0.com/features/machine-to-machine) * [Passwordless](https://auth0.com/features/passwordless) * [Breached Passwords](https://auth0.com/features/breached-passwords) © 2025 Okta, Inc. All Rights Reserved. [Status](https://status.auth0.com) • [Legal](https://www.okta.com/agreements/) • [Privacy](https://auth0.com/privacy) • [Terms](https://auth0.com/web-terms) • [Your Privacy Choices](https://auth0.com/your-privacy-choices)<Frame>![](https://cdn.auth0.com/website/footer/ccpa.svg)</Frame> [Status](https://status.auth0.com) • [Legal](https://www.okta.com/agreements/) • [Privacy](https://auth0.com/privacy) • [Terms](https://auth0.com/web-terms) • [Your Privacy Choices](https://auth0.com/your-privacy-choices)<Frame>![](https://cdn.auth0.com/website/footer/ccpa.svg)</Frame>",
    },
  ];

  const A_TO_Z = Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i));
  const norm = (s) => s.normalize("NFKD").toLowerCase().trim();

  const useQueryParamState = (key, initial = "") => {
    const [value, setValue] = useState(() => {
      if (typeof window === "undefined") return initial;
      const url = new URL(window.location.href);
      return url.searchParams.get(key) ?? initial;
    });

    useEffect(() => {
      if (typeof window === "undefined") return;
      const url = new URL(window.location.href);
      if (value) url.searchParams.set(key, value);
      else url.searchParams.delete(key);
      window.history.replaceState({}, "", url.toString());
    }, [key, value]);

    return [value, setValue];
  };

  const highlight = (text, query) => {
    if (!query) return text;
    const i = norm(text).indexOf(norm(query));
    if (i < 0) return text;
    const end = i + query.length;
    return (
      <>
        {text.slice(0, i)}
        <mark>{text.slice(i, end)}</mark>
        {text.slice(end)}
      </>
    );
  };

  const [term, setTerm] = useQueryParamState("term", "");
  const groups = useMemo(() => {
    const filtered = term ? GLOSSARY.filter((g) => norm(g.term).includes(norm(term))) : GLOSSARY;

    const map = new Map();
    for (const item of filtered.sort((a, b) => a.term.localeCompare(b.term))) {
      const key = (item.term[0] || "").toUpperCase();
      map.set(key, [...(map.get(key) || []), item]);
    }
    return map;
  }, [term]);

  const letterRefs = useRef({});
  const handleJump = (letter) => {
    const el = letterRefs.current[letter];
    if (el) el.scrollIntoView({ behavior: "smooth", block: "start" });
  };

  return (
    <div className="mx-auto max-w-5xl py-10 text-gray-900 dark:text-gray-100">
      {/* Search */}
      <div className="mb-6">
        <div className="relative">
          <span className="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 dark:text-gray-400">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <circle cx="11" cy="11" r="8"></circle>
              <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
            </svg>
          </span>
          <input
            id="search-input-control"
            type="text"
            placeholder="Search by name"
            value={term}
            onChange={(e) => setTerm(e.target.value)}
            className="w-full rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-black pl-10 pr-4 py-3 outline-none focus:border-indigo-500 dark:focus:border-indigo-400 text-gray-900 dark:text-gray-100"
          />
        </div>
      </div>

      {/* A–Z index */}
      <nav className="mb-8 flex flex-wrap gap-3">
        {A_TO_Z.map((letter) => {
          const enabled = groups.has(letter);
          return (
            <button
              key={letter}
              onClick={() => enabled && handleJump(letter)}
              disabled={!enabled}
              className={`text-lg ${
                enabled
                  ? "text-indigo-600 dark:text-indigo-300 hover:text-black dark:hover:text-white"
                  : "text-gray-400 dark:text-gray-600 cursor-not-allowed"
              }`}
              aria-label={`Jump to ${letter}`}
            >
              {letter}
            </button>
          );
        })}
      </nav>

      {/* Groups */}
      <section>
        {A_TO_Z.filter((L) => groups.has(L)).map((letter) => {
          const items = groups.get(letter);
          return (
            <section key={letter} className="mb-10">
              <div className="flex items-end gap-1">
                <h2
                  id={letter}
                  ref={(el) => (letterRefs.current[letter] = el)}
                  className="text-3xl font-semibold glossary_h2"
                >
                  {letter}
                </h2>
                <div className="flex-1 border-b-2 border-[#3F59E4]" />
              </div>

              <ul className="mt-6 space-y-6 glossary_list">
                {items.map((it) => (
                  <li key={it.term} className="scroll-mt-24">
                    <h3 id={norm(it.term)} className="text-xl font-medium text-gray-900 dark:text-gray-100 glossary_h3">
                      {it.term}
                    </h3>
                    <p className="mt-1 text-gray-700 dark:text-gray-300">{highlight(it.description, term)}</p>
                  </li>
                ))}
              </ul>
            </section>
          );
        })}

        {groups.size === 0 && (
          <p className="text-gray-500 dark:text-gray-400">No results for “{term}”. Try a different term.</p>
        )}
      </section>
    </div>
  );
};

export const GlossaryJA = () => {
  const GLOSSARY = [
    {
      term: "Adaptive Multifactor Authentication",
      description:
        "ログイン試行が信頼性の低いログインであると判断された場合にのみ、ユーザーに対してトリガーされる多要素認証（MFA）。Auth0はAdaptive MFAを使用して、正当なユーザーのログインエクスペリエンスを変えずに維持しながら、不正者に対してセキュリティを強化する必要がある場合にのみMFAをトリガーします。",
    },
    {
      term: "Auth0 Dashboard",
      description:
        "Auth0のプライマリ管理者インターフェイスで、アプリケーションまたはAPIを登録し、ユーザーストアまたは別のIDプロバイダーに接続して、Auth0サービスを構成できます。",
    },
    {
      term: "Fine-grained Authorization (FGA)",
      description:
        "個々のユーザーがアプリケーション内の特定のオブジェクトまたはリソースにアクセスできるようにするAuth0のSaaS製品。",
    },
    {
      term: "IDトークン",
      description:
        "リソースにアクセスするためのものではなく、クライアント自体を対象とした資格情報。クライアントが解析および検証できる固定形式です。",
    },
    {
      term: "IDプロバイダー (IdP)",
      description:
        "デジタルIDを保存および管理するサービス。Auth0は、信頼できるソーシャルIDプロバイダー、エンタープライズIDプロバイダー、および法的IDプロバイダーをサポートしています。Auth0は、アプリケーションのIDプロバイダーとしても機能します。",
    },
    {
      term: "JSON Web Token (JWT)",
      description:
        "二者間のクレームを安全に表現するための、オープンかつ業界標準のRFC 7519方法。Auth0では、IDトークンは常にJWT形式で返され、アクセストークンも多くの場合、JWT形式で返されます。JWT.ioで整形式のJWTをデコードして、クレームを表示できます。",
    },
    {
      term: "Lock",
      description:
        "ユーザーを認証するためのAuth0のUIウィジェット。これはそのまま使用でき、クラシックユニバーサルログインエクスペリエンスのデフォルトの顔です。Lockを使用すると、細かい動作や外観のオプションをカスタマイズできますが、その主な目的は使いやすさです。",
    },
    {
      term: "Management API",
      description: "Auth0サービスを管理し、プログラムに従って管理タスクを実行するためのAuth0のAPI。",
    },
    {
      term: "Nonce",
      description:
        "認証プロトコルで発行される任意の数値（多くの場合、乱数または擬似乱数）で、旧式の通信を使用したリプレイ攻撃の検出と軽減に使用できます。nonceは1回しか発行されないため、攻撃者が別のnonceを使用してトランザクションを再実行しようとすると、その誤ったトランザクションをより簡単に検出できます。",
    },
    {
      term: "OAuth 2.0",
      description:
        "認可プロトコルとワークフローを定義する認可フレームワーク。OAuth 2.0は、ロール、認可付与（またはワークフロー）、認可要求と応答、およびトークン処理を定義します。ユーザーIDを検証するOpenID Connect（OIDC）プロトコルによって、OAuth 2.0を拡張できます。",
    },
    {
      term: "OpenID",
      description:
        "アプリケーションがユーザーのログイン情報を収集および保存することなく（したがって、ユーザーのログイン情報について責任を負わずに）、ユーザーが本人であることを確認できる認証用のオープン標準。",
    },
    {
      term: "Organization",
      description:
        "B2B顧客がエンドユーザーを分類し、特定のロール、ログインエクスペリエンス、およびリソースへのアクセスを定義できるようにするAuth0製品。",
    },
    {
      term: "Security Assertion Markup Language (SAML)",
      description: "パスワードを使用せずに二者間で認証情報を交換できるXMLベースの標準化プロトコル。",
    },
    {
      term: "Tokenset",
      description:
        "For each user's authorized connection, like Google or Microsoft, Token Vault creates a secure container called a tokenset. A tokenset contains the access and refresh tokens needed to call that external provider's APIs on the user's behalf. A tokenset securely stores access and refresh tokens on the Auth0 Authorization Server.",
    },
    {
      term: "Webサービスフェデレーション (WS-Fed)",
      description:
        "WS-Trustを使用して信頼が確立されているシステム、ドメイン、およびIDプロバイダーの間でユーザーIDを管理するためのプロトコル。このプロトコルは主にMicrosoft製品に使用され、フェデレーションメタデータの共有方法に関するポリシーを定義します。",
    },
    {
      term: "アカウントリンク",
      description:
        "資格情報を1回提供するだけで、ユーザーが複数のリソースやアプリケーションにアクセスできるように、複数のプラットフォーム間でユーザーアカウントを接続すること。",
    },
    {
      term: "アクション",
      description:
        "Auth0実行中の特定の時点で実行される、Node.jsで記述された安全な関数。これはテナント固有であり、バージョン管理されています。アクションは、カスタムロジックでAuth0の機能をカスタマイズおよび拡張するために使用されます。",
    },
    {
      term: "アクセストークン",
      description:
        "アプリケーションがAPIにアクセスするために使用できる資格情報。これは、トークンのベアラーがAPIにアクセスし、付与されたスコープで指定された特定のアクションを実行する許可を得ていることをAPIに通知します。アクセストークンは任意の形式にできますが、一般的な2つのオプションとして、不透明な文字列とJSON Webトークン（JWT）があります。これらは、HTTP認可ヘッダー内のBearer資格情報としてAPIに送信される必要があります。",
    },
    {
      term: "アプリケーション",
      description:
        "認証とID管理を行うためにAuth0に依存するソフトウェア。Auth0は、シングルページ、通常のWeb、ネイティブ、およびマシンツーマシンのアプリケーションをサポートしています。",
    },
    {
      term: "オーディエンス",
      description:
        "発行されたトークンに対するオーディエンスを表す一意の識別子で、JSON Webトークン内でaudクレームとして特定されたもの。オーディエンス値は、IDトークンの場合はアプリケーション（Client ID）、アクセストークンの場合は呼び出されるAPI（API Identifier）のいずれかです。Auth0では、アクセストークンの要求で送信されるオーディエンス値によって、トークンが不透明形式で返されるかJWT形式で返されるかが決まります。",
    },
    {
      term: "カスタムドメイン",
      description: "特殊な名前、またはバニティ名を持つサードパーティのドメイン。CNAMEとも呼ばれます。",
    },
    {
      term: "クライアントID",
      description:
        "登録後にアプリケーションに割り当てられる識別値。この値は他のサードパーティーサービスと組み合わせて使用され、Auth0 Dashboard > Application Settingsで確認できます。",
    },
    {
      term: "クライアントシークレット",
      description:
        "クライアント（アプリケーション）が認可サーバーで認証するために使用するシークレット。これはクライアントと認可サーバーだけが知っているものであり、推測できないように十分にランダムである必要があります。",
    },
    {
      term: "クレーム",
      description:
        "セキュリティトークンにパッケージ化される属性で、トークンのプロバイダーがエンティティに関して行っているクレームを表します。",
    },
    {
      term: "グループ",
      description:
        "1人以上のユーザーのセット。Auth0認可拡張機能では、グループを使用して、一度に多くのユーザーにアクセスを許可します。",
    },
    {
      term: "コールバック",
      description:
        "認証後にAuth0が応答を送信する先のURL。多くの場合、認証後にユーザーがリダイレクトされるURLと同じです。",
    },
    {
      term: "サブスクリプション",
      description:
        "各テナントで使用できる機能や割り当てを定義する契約。Auth0には、さまざまな開発者や組織のニーズを満たすために複数のサブスクリプションレベルがあります。",
    },
    {
      term: "サポート終了",
      description:
        "対象の機能または動作がプラットフォームから削除されることを示す製品リリース段階。その機能または動作を続けて使用すると、おそらくエラーが発生します。新しい動作は、移行期間中にオプトインしなかったテナントに対して自動的に有効になります。",
    },
    {
      term: "サポート終了日",
      description:
        "機能または動作へのアクセスがプラットフォームから削除される日付。サポート終了日は、プランのタイプによって異なる場合があります。",
    },
    {
      term: "シャドーアカウント",
      description:
        "リモートアプリケーションにアクセスする必要があるユーザーを個別に、ローカルディレクトリからリモートディレクトリに手動でプロビジョニングする（実質的に元のアカウントのコピー、すなわちシャドーを作成する）、継続するのが困難な方法。",
    },
    {
      term: "シングルサインオン（SSO）",
      description:
        "ユーザーが1つのアプリケーションにログインした後、そのユーザーが使用しているプラットフォーム、テクノロジー、ドメインに関係なく、そのユーザーを他のアプリケーションに自動的にログインさせるサービス。ユーザーは1回だけサインインします（これがこの機能の名前の由来です）。同様に、シングルログアウト（SLO）は、ユーザーが1つのアプリケーションからログアウトした後、ログインしていた各アプリケーションまたはサービスからログアウトされるときに発生します。SSOとSLOはセッションを使用することで可能になります。",
    },
    {
      term: "スコープ",
      description:
        "アプリケーションが実行できる特定のアクション、またはユーザーに代わってアプリケーションが要求できる情報を定義するメカニズム。多くの場合、アプリケーションは、オンラインリソースですでに作成されている情報を利用しようとします。そのためには、アプリケーションはユーザーに代わってこの情報にアクセスするための認可を求める必要があります。アプリが認可サーバー経由でリソースへのアクセス許可を要求する場合、そのアプリはスコープパラメーターを使用して必要なアクセスを指定し、認可サーバーはスコープパラメーターを使用して実際に付与されたアクセスで応答します。",
    },
    {
      term: "セキュリティトークン",
      description: "ユーザーが正常に認証されたことを証明するために使用される、デジタル署名されたアーティファクト。",
    },
    {
      term: "セッションクッキー",
      description:
        "受信しているトークンが署名され、有効であり、信頼できるソース（IDプロバイダー）からのものであることをミドルウェアが確認した後に、ミドルウェアによって発行されるエンティティ。このエンティティは、IDプロバイダーによる認証が成功したという事実を表します。クッキーが存在する限りユーザーが認証されているとみなされるため、トークンを使用したこのプロセスを継続的に繰り返す必要がなくなります。",
    },
    {
      term: "ディレクトリ",
      description:
        "ユーザーの中央リポジトリ（最もよく知られているのはActive Directory）。資格情報と属性を一元管理できるため、各アプリケーションがそれぞれ独自のローカルID設定やユーザーのプールを持つ必要がなくなります。同じユーザーディレクトリを使用するすべてのアプリケーションに対し、シングルサインオンできます。",
    },
    {
      term: "デジタルID",
      description: "特定のアプリケーションによって提供される機能のコンテキストで特定のユーザーを定義する属性のセット。",
    },
    {
      term: "デジタル署名",
      description:
        "トークン内の情報を改ざんから保護する暗号化された文字列。これらの情報が変更または改ざんされると、署名は検証できなくなり、拒否されます。",
    },
    {
      term: "テナント",
      description:
        "Auth0では、単一のソフトウェアインスタンスに対して特定の権限があるアクセスを共有する、論理的に分離されたユーザーのグループのこと。複数のテナントが同じマシン上で実行している場合でも、その中の1つのテナントが別のテナントのデータにアクセスすることはできません。一般に、テナントは、ソフトウェアマルチテナントアーキテクチャから借用された用語です。",
    },
    {
      term: "トークンエンドポイント",
      description: "プログラムに従ってトークンを要求するために使用される認可サーバー上のエンドポイント。",
    },
    {
      term: "トリガー",
      description:
        "ユーザーのログインなどの特定の操作が実行時に発生したときに、アクションを自動的に呼び出すイベント。複数のトリガーが同時に実行され、関与するフローをブロックするものもありますが、同時には実行されないものもあります。",
    },
    {
      term: "パスワードレス",
      description:
        "最初の要素がパスワードではない認証の形式。代わりに、メールやSMS、プッシュ通知、または生体認証センサーで受信したワンタイムパスワードを使用できます。パスワードレスではワンタイムパスワードが使用されるため、ユーザーは従来のユーザー名/パスワードによるログインに比べて、一般的なパスワードベースの攻撃（辞書や資格情報のスタッフィングなど）の影響を受けにくくなります。",
    },
    {
      term: "パスワード漏洩検知",
      description:
        "サードパーティのWebサイトまたはアプリでのデータ漏洩で侵害されたユーザー名とパスワードの組み合わせをユーザーが使用した場合に、Auth0がユーザーに通知する攻撃防御の形式。",
    },
    {
      term: "パブリッククライアント",
      description:
        "OAuth 2.0プロトコルによると、クライアント（アプリケーション）は、資格情報（クライアントIDやシークレットなど）を安全に保持できるかどうかに応じて、機密またはパブリックに分類できます。パブリッククライアントは資格情報を安全に保持できないため、クライアントシークレットの使用を必要としない付与タイプのみを使用する必要があります。パブリッククライアントに発行されたIDトークンは、秘密鍵（RS256）を使用して非対称に署名され、トークンの署名に使用された秘密鍵に対応する公開鍵を使用して検証される必要があります。",
    },
    {
      term: "フロー",
      description:
        "アクションを使用して拡張できるプロセス。各フローはそれぞれ1つ以上のトリガーで構成され、Auth0手順の単一ポイント中に情報が移動する論理パイプラインを表します。",
    },
    {
      term: "ベータ版",
      description:
        "一般提供（GA）版に先立って、対象の機能または動作がサブスクライバーに提供され、最終的なフィードバックを提供しながら新製品の機能を吟味して導入する時間を与える、製品リリース段階。機能面では、完全なコードが使われ、安定しており、さまざまなシナリオで役立ちます。また、GA版における品質の期待に応えている、またはほぼ応えていると考えられます。ベータ版は、選ばれた一握りのサブスクライバーに制限することも（プライベート）、すべてのサブスクライバーに提供することもできます（パブリック）。",
    },
    {
      term: "ボット検知",
      description:
        "Auth0がログインプロセス中にCAPTCHAを有効にすることで、疑わしいボットトラフィックをブロックする攻撃防御の形式。",
    },
    {
      term: "メタデータ",
      description:
        "環境設定やプロファイル設定など、ユーザーが更新できる情報。メタデータはIDトークンに追加され、ユーザープロファイルに保存できます。",
    },
    {
      term: "ユーザーのブロック/ブロック解除",
      description:
        "要求元のリソースへのアクセスを削除または復元すること。Auth0の攻撃防御スイートの機能（侵害されたパスワードの検出、ブルートフォース保護、不審なIPのスロットリング）を指します。各サービスはログイン/サインアップの傾向を評価し、疑わしいアクティビティに関連付けられたIPアドレスをブロックします。",
    },
    {
      term: "ユニバーサルログイン",
      description:
        "Auth0による認証フローの実装で、これは認可サーバーの主要な機能です。ユーザーの本人証明が必要になるたびに、アプリケーションはユニバーサルログインにリダイレクトされ、Auth0がユーザーのアイデンティティを保証するために必要な処理を行います。",
    },
    {
      term: "リソースサーバー",
      description:
        "保護されたリソースをホストするサーバー。リソースサーバーは保護されたリソースの要求を受け入れ、応答します。",
    },
    {
      term: "リソース所有者",
      description: "保護されたリソースへのアクセスを許可できるエンティティ（ユーザーやアプリケーションなど）。",
    },
    {
      term: "リフレッシュトークン",
      description:
        "更新されたアクセストークンを取得するために使用できる特殊なトークン。これは、ユーザーに再度ログインを強いることなく、期限切れになるアクセストークンを更新する場合に便利です。リフレッシュトークンを使用すると、リフレッシュトークンがブロックリストに登録されるまで、いつでも新しいアクセストークンを要求できます。",
    },
    {
      term: "リフレッシュトークンのローテーション",
      description:
        "脆弱性を最小限に抑えるためにリフレッシュトークンを頻繁に置き換える戦略。リフレッシュトークンのローテーションを使用すると、アプリケーションがリフレッシュトークンを交換して新しいアクセストークンを取得するたびに、Auth0も新しいリフレッシュトークンを返します。",
    },
    {
      term: "ローカリゼーション",
      description: "新しいユニバーサルログインエクスペリエンスをサポートされている言語でレンダリングできる機能。",
    },
    {
      term: "ロール",
      description:
        "ユーザーがシステムに対して必要とするアクセスのレベルを示す、ユーザーに割り当てられるユーザーアイデンティティのアスペクト。ロールは基本的に権限の集合です。",
    },
    {
      term: "一般提供",
      description:
        "対象の機能または動作が完全に機能し、（価格レベルによって制限される）すべてのサブスクライバーが本番環境で使用できる製品リリース段階。新しいリリースが既存の機能を置き換える場合、Auth0は弊社の廃止ポリシーに従って下位互換性の期間を提供し、新しいリリースの導入時間を確保できるよう、お客様に通知します。",
    },
    {
      term: "不審なIPのスロットリング",
      description:
        "非常に多くのアカウントをターゲットにした、単一IPアドレスからの不審なログインからテナントを保護する攻撃防御の形式。",
    },
    {
      term: "不正者",
      description:
        "脅威アクターとも呼ばれます。害を及ぼす意図をもってビジネスまたは環境に脅威を与えるエンティティ（個人またはグループ）。データセンターへの侵入から、盗まれた資格情報によるシステムへのハッキングまで、被害には物理的およびサイバー上の損害が含まれる可能性があります。",
    },
    {
      term: "信頼",
      description:
        "IDプロバイダーや認証局がユーザーについて言及することをリソースが前向きに信じる場合、そのリソースはそのIDプロバイダーまたは認証局を信頼しています。",
    },
    {
      term: "境界",
      description:
        "ディレクトリ、そのすべてのユーザー、およびそのディレクトリを使用するすべてのアプリケーションを囲む一連の境界。一部の実装では、この境界は物理的な場所を指します。また、VPNを介して接続された一連のネットワークまたはデバイスを指す場合もあります。",
    },
    {
      term: "多要素認証（MFA）",
      description:
        "複数の要素を考慮した認証プロセス。通常、Auth0では、最初の要素は標準のユーザー名/パスワード交換であり、2番目の要素はメールまたはSMS経由のコードまたはリンク、AuthyやGoogle Authenticatorなどのアプリ経由ワンタイムパスワード、あるいはGuardianやDuoなどの電話アプリ経由のプッシュ通知です。複数の要素を使用することで、パスワードが他人の手に渡ったり、携帯電話が盗まれたりするなど、いずれかの要素が誰かに取得された場合でも、アカウントの安全性を保つことができます。",
    },
    {
      term: "廃止",
      description:
        "対象の機能または動作が新規サブスクライバーによる使用をサポートしていないことに加え、積極的な強化が行われおらず、かつ最小限のメンテナンスしか行われていないことを示す製品リリース段階。廃止の時点でその機能または動作を使用していたテナントは、引き続きアクセスできます。",
    },
    {
      term: "接続",
      description:
        "Auth0と、アプリケーションのユーザーのソースとの関係。例として、IDプロバイダー（GoogleやActive Directoryなど）、パスワードレス認証方法、ユーザーデータベースなどがあります。",
    },
    {
      term: "攻撃防御",
      description:
        "ブルートフォース保護、不審なIPのスロットリング、侵害されたパスワードの検出、ボット検知、Adaptive Multi-factor Authenticationなど、攻撃を検出して軽減するためにAuth0が提供する機能。",
    },
    {
      term: "早期アクセス",
      description:
        "対象の機能や動作が限られた数のサブスクライバーまたは顧客開発パートナー（CDP）に提供され、それらのサブスクライバーまたはCDPがテストを行い、今後の機能に関するフィードバックを返すことができる製品リリース段階。この段階では、機能がまだ完成していない可能性がありますが、検証はできます。",
    },
    {
      term: "未加工の資格情報",
      description:
        "リソースがユーザーのアイデンティティを確認できるようにする、ユーザーとリソースの間で合意された共有シークレットまたは一連の情報。",
    },
    {
      term: "機密クライアント",
      description:
        "OAuth 2.0プロトコルによると、クライアント（アプリケーション）は、資格情報（クライアントIDやシークレットなど）を安全に保持できるかどうかに応じて、機密またはパブリックに分類できます。機密クライアントは、資格情報を無許可の当事者に公開することなく安全な方法で保持でき、そのためには信頼できるバックエンドサーバーが必要です。これらのクライアントは、トークンエンドポイントを呼び出すときにクライアントIDとシークレットを指定して認証しなければならない付与タイプを使用でき、対称または非対称に署名されたトークンを発行させることができます。",
    },
    {
      term: "消費デバイス",
      description: "クライアントが開始するバックチャネル認証フローで、ユーザーがサービスを利用するのに役立つデバイス。",
    },
    {
      term: "混乱した代理人",
      description: "攻撃者がクライアントまたはサービスを騙してアクションを実行させる状況。",
    },
    {
      term: "破壊的変更",
      description:
        "Auth0が知る範囲で、Auth0プラットフォームと顧客アプリケーションの相互運用に障害をきたす、Auth0プラットフォームへの変更。",
    },
    {
      term: "移行",
      description: "顧客が特定の機能や動作から離れるプロセス。移行は、製品リリースの廃止段階で行う必要があります。",
    },
    {
      term: "総当たり攻撃防御",
      description:
        "単一のIPアドレスから発生し、単一のユーザーアカウントをターゲットとする総当たり攻撃から保護する攻撃防御の形式。",
    },
    {
      term: "署名アルゴリズム",
      description:
        "トークンが不正者によって改ざんされないように、トークンにデジタル署名するためのハッシュアルゴリズム。",
    },
    {
      term: "製品のリリース段階",
      description:
        "Auth0が製品機能をどのように計画、リリース、廃止するかを説明するフェーズ。製品機能はすべてのリリース段階を経て進行するとは限らず、各段階の期間は機能のスコープや影響力によって異なります。",
    },
    {
      term: "証明書利用者",
      description:
        "ユーザーを認証するためにサードパーティーのIDプロバイダーに依存するエンティティ（サービスやアプリケーションなど）。",
    },
    {
      term: "認可コード",
      description:
        "認可サーバーによって生成され、認可応答の一部としてアプリケーションに返されるランダムな文字列。認可コードの有効期間は比較的短く、認可コードフローの使用時に（Proof Key for Code Exchange（PKCE）の有無にかかわらず）トークンエンドポイントでアクセストークンと交換されます。",
    },
    {
      term: "認可サーバー",
      description:
        "ユーザーによるアクセスの限界を定義するために使用される集中管理型サーバー。たとえば、認可サーバーは、ユーザーが利用できるデータ、タスク、機能を制御できます。認可サーバーによってユーザーが認証されることはありません。ユーザーの身元を確認するのは認証サーバーの役割です。",
    },
    {
      term: "認可フロー",
      description:
        "OAuth 2.0で概説されている認可付与の別名。認可フローは、リソース（アプリケーションまたはAPI）が要求元にアクセスを許可するために使用するワークフローです。テクノロジーのタイプ（たとえば、アプリケーションがクライアントシークレットを保存できる場合）と要求元のタイプに基づいて、リソース所有者は認可コードフロー、Proof of Key Code Exchange（PKCE）、Resource Owner Password Credential（ROPG）、暗黙フロー、またはクライアントの資格情報を使用できます。",
    },
    {
      term: "認証サーバー",
      description:
        "ユーザーのアイデンティティを確認または拒否するサーバー。認証サーバーによって、ユーザーが利用できるアクションやリソースが制限されることはありません（ただし、この目的でコンテキストを提供することは可能）。",
    },
    {
      term: "認証デバイス",
      description: "クライアントが開始するバックチャネル認証フロー内。",
    },
  ];

  // All A-Z letters + dynamically extracted unique Japanese characters
  const ENGLISH_LETTERS = Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i));
  const uniqueJapaneseChars = [
    ...new Set(
      GLOSSARY.map((item) => item.term[0] || "")
        .filter((char) => !/[A-Z]/i.test(char))
        .map((char) => char.toUpperCase())
    ),
  ].sort((a, b) => a.localeCompare(b, "ja"));
  const A_TO_Z = [...ENGLISH_LETTERS, ...uniqueJapaneseChars];

  const norm = (s) => s.normalize("NFKD").toLowerCase().trim();

  const useQueryParamState = (key, initial = "") => {
    const [value, setValue] = useState(() => {
      if (typeof window === "undefined") return initial;
      const url = new URL(window.location.href);
      return url.searchParams.get(key) ?? initial;
    });

    useEffect(() => {
      if (typeof window === "undefined") return;
      const url = new URL(window.location.href);
      if (value) url.searchParams.set(key, value);
      else url.searchParams.delete(key);
      window.history.replaceState({}, "", url.toString());
    }, [key, value]);

    return [value, setValue];
  };

  const highlight = (text, query) => {
    if (!query) return text;
    const i = norm(text).indexOf(norm(query));
    if (i < 0) return text;
    const end = i + query.length;
    return (
      <>
        {text.slice(0, i)}
        <mark>{text.slice(i, end)}</mark>
        {text.slice(end)}
      </>
    );
  };

  const [term, setTerm] = useQueryParamState("term", "");
  const groups = useMemo(() => {
    const filtered = term ? GLOSSARY.filter((g) => norm(g.term).includes(norm(term))) : GLOSSARY;

    const map = new Map();
    for (const item of filtered.sort((a, b) => a.term.localeCompare(b.term))) {
      const key = (item.term[0] || "").toUpperCase();
      map.set(key, [...(map.get(key) || []), item]);
    }
    return map;
  }, [term]);

  const letterRefs = useRef({});
  const handleJump = (letter) => {
    const el = letterRefs.current[letter];
    if (el) el.scrollIntoView({ behavior: "smooth", block: "start" });
  };

  return (
    <div className="mx-auto max-w-5xl py-10 text-gray-900 dark:text-gray-100">
      {/* Search */}
      <div className="mb-6">
        <div className="relative">
          <span className="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 dark:text-gray-400">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <circle cx="11" cy="11" r="8"></circle>
              <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
            </svg>
          </span>
          <input
            id="search-input-control"
            type="text"
            placeholder="Search by name"
            value={term}
            onChange={(e) => setTerm(e.target.value)}
            className="w-full rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-black pl-10 pr-4 py-3 outline-none focus:border-indigo-500 dark:focus:border-indigo-400 text-gray-900 dark:text-gray-100"
          />
        </div>
      </div>

      {/* A–Z index */}
      <nav className="mb-8 flex flex-wrap gap-3">
        {A_TO_Z.map((letter) => {
          const enabled = groups.has(letter);
          return (
            <button
              key={letter}
              onClick={() => enabled && handleJump(letter)}
              disabled={!enabled}
              className={`text-lg ${
                enabled
                  ? "text-indigo-600 dark:text-indigo-300 hover:text-black dark:hover:text-white"
                  : "text-gray-400 dark:text-gray-600 cursor-not-allowed"
              }`}
              aria-label={`Jump to ${letter}`}
            >
              {letter}
            </button>
          );
        })}
      </nav>

      {/* Groups */}
      <section>
        {A_TO_Z.filter((L) => groups.has(L)).map((letter) => {
          const items = groups.get(letter);
          return (
            <section key={letter} className="mb-10">
              <div className="flex items-end gap-1">
                <h2
                  id={letter}
                  ref={(el) => (letterRefs.current[letter] = el)}
                  className="text-3xl font-semibold glossary_h2"
                >
                  {letter}
                </h2>
                <div className="flex-1 border-b-2 border-[#3F59E4]" />
              </div>

              <ul className="mt-6 space-y-6 glossary_list">
                {items.map((it) => (
                  <li key={it.term} className="scroll-mt-24">
                    <h3 id={norm(it.term)} className="text-xl font-medium text-gray-900 dark:text-gray-100 glossary_h3">
                      {it.term}
                    </h3>
                    <p className="mt-1 text-gray-700 dark:text-gray-300">{highlight(it.description, term)}</p>
                  </li>
                ))}
              </ul>
            </section>
          );
        })}

        {groups.size === 0 && (
          <p className="text-gray-500 dark:text-gray-400">No results for “{term}”. Try a different term.</p>
        )}
      </section>
    </div>
  );
};
