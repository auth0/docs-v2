{
  "openapi": "3.1.0",
  "info": {
    "title": "Auth0 Management API",
    "description": "Auth0 Management API v2.",
    "termsOfService": "https://auth0.com/web-terms/",
    "version": "2.0"
  },
  "servers": [
    {
      "url": "https://{tenantDomain}/api/v2",
      "variables": {
        "tenantDomain": {
          "default": "{TENANT}.auth0.com",
          "description": "Auth0 Tenant Domain"
        }
      }
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "externalDocs": {
    "description": "Auth0 Management API Documentation",
    "url": "https://auth0.com/docs/api/management/v2/"
  },
  "paths": {
    "/actions/actions": {
      "get": {
        "summary": "Get actions",
        "description": "Retrieve all actions.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "triggerId",
            "in": "query",
            "description": "An actions extensibility point.",
            "schema": {
              "$ref": "#/components/schemas/ActionTriggerTypeEnum"
            }
          },
          {
            "name": "actionName",
            "in": "query",
            "description": "The name of the action to retrieve.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deployed",
            "in": "query",
            "description": "Optional filter to only retrieve actions that are deployed.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Use this field to request a specific page of the list results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "The maximum number of results to be returned by the server in single response. 20 by default",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "installed",
            "in": "query",
            "description": "Optional. When true, return only installed actions. When false, return only custom actions. Returns all actions by default.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The actions were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActionsPaginatedResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_actions",
        "x-operation-name": "list",
        "x-operation-request-parameters-name": "ListActionsRequestParameters",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:actions"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create an action",
        "description": "Create an action. Once an action is created, it must be deployed, and then bound to a trigger before it will be executed as part of a flow.\n",
        "tags": [
          "actions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateActionRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateActionRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Action successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateActionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request Body."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: create:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_action",
        "x-operation-name": "create",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:actions"
            ]
          }
        ]
      }
    },
    "/actions/actions/{actionId}/versions": {
      "get": {
        "summary": "Get an action's versions",
        "description": "Retrieve all of an action's versions. An action version is created whenever an action is deployed. An action version is immutable, once created.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "The ID of the action.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Use this field to request a specific page of the list results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "This field specify the maximum number of results to be returned by the server. 20 by default",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The action versions were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActionVersionsPaginatedResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_action_versions",
        "x-operation-name": "list",
        "x-operation-request-parameters-name": "ListActionVersionsRequestParameters",
        "x-operation-group": [
          "actions",
          "versions"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:actions"
            ]
          }
        ]
      }
    },
    "/actions/actions/{actionId}/versions/{id}": {
      "get": {
        "summary": "Get a specific version of an action",
        "description": "Retrieve a specific version of an action. An action version is created whenever an action is deployed. An action version is immutable, once created.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "The ID of the action.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the action version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The action version was retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActionVersionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:actions."
          },
          "404": {
            "description": "The action version does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_action_version",
        "x-operation-name": "get",
        "x-operation-group": [
          "actions",
          "versions"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:actions"
            ]
          }
        ]
      }
    },
    "/actions/actions/{actionId}/versions/{id}/deploy": {
      "post": {
        "summary": "Roll back to a previous action version",
        "description": "Performs the equivalent of a roll-back of an action to an earlier, specified version. Creates a new, deployed action version that is identical to the specified version. If this action is currently bound to a trigger, the system will begin executing the newly-created version immediately.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of an action version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "The ID of an action.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployActionVersionRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DeployActionVersionRequestContent"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Request to create action version was accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployActionVersionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request Body."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: create:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_deploy_draft_version",
        "x-operation-name": "deploy",
        "x-operation-group": [
          "actions",
          "versions"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:actions"
            ]
          }
        ]
      }
    },
    "/actions/actions/{id}": {
      "get": {
        "summary": "Get an action",
        "description": "Retrieve an action by its ID.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the action to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The action was retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:actions."
          },
          "404": {
            "description": "The action does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_action",
        "x-operation-name": "get",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:actions"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete an action",
        "description": "Deletes an action and all of its associated versions. An action must be unbound from all triggers before it can be deleted.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the action to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Force action deletion detaching bindings",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Action successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: delete:actions."
          },
          "404": {
            "description": "The action version does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_action",
        "x-operation-name": "delete",
        "x-operation-request-parameters-name": "DeleteActionRequestParameters",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:actions"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update an action",
        "description": "Update an existing action. If this action is currently bound to a trigger, updating it will <strong>not</strong> affect any user flows until the action is deployed.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActionRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActionRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateActionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request Body."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: update:actions."
          },
          "404": {
            "description": "Action not found and cannot be updated."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_action",
        "x-operation-name": "update",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:actions"
            ]
          }
        ]
      }
    },
    "/actions/actions/{id}/deploy": {
      "post": {
        "summary": "Deploy an action",
        "description": "Deploy an action. Deploying an action will create a new immutable version of the action. If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately. Otherwise, the action will only be executed as a part of a flow once it is bound to that flow.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of an action.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request to create action version was accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployActionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request Body."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: create:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_deploy_action",
        "x-operation-name": "deploy",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:actions"
            ]
          }
        ]
      }
    },
    "/actions/actions/{id}/test": {
      "post": {
        "summary": "Test an Action",
        "description": "Test an action. After updating an action, it can be tested prior to being deployed to ensure it behaves as expected.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action to test.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestActionRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TestActionRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test action version successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestActionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request Body."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: create:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_test_action",
        "x-operation-name": "test",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:actions"
            ]
          }
        ]
      }
    },
    "/actions/executions/{id}": {
      "get": {
        "summary": "Get an execution",
        "description": "Retrieve information about a specific execution of a trigger. Relevant execution IDs will be included in tenant logs generated as part of that authentication flow. Executions will only be stored for 10 days after their creation.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the execution to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The execution was retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActionExecutionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:actions."
          },
          "404": {
            "description": "The execution does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_execution",
        "x-operation-name": "getExecution",
        "x-operation-group": "actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:actions"
            ]
          }
        ]
      }
    },
    "/actions/triggers": {
      "get": {
        "summary": "Get triggers",
        "description": "Retrieve the set of triggers currently available within actions. A trigger is an extensibility point to which actions can be bound.\n",
        "tags": [
          "actions"
        ],
        "responses": {
          "200": {
            "description": "The triggers were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActionTriggersResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_triggers",
        "x-operation-name": "list",
        "x-operation-group": [
          "actions",
          "triggers"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:actions"
            ]
          }
        ]
      }
    },
    "/actions/triggers/{triggerId}/bindings": {
      "get": {
        "summary": "Get trigger bindings",
        "description": "Retrieve the actions that are bound to a trigger. Once an action is created and deployed, it must be attached (i.e. bound) to a trigger so that it will be executed as part of a flow. The list of actions returned reflects the order in which they will be executed during the appropriate flow.\n",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "triggerId",
            "in": "path",
            "description": "An actions extensibility point.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ActionTriggerTypeEnum"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Use this field to request a specific page of the list results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "The maximum number of results to be returned in a single request. 20 by default",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The bindings were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActionBindingsPaginatedResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: read:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_bindings",
        "x-operation-name": "list",
        "x-operation-request-parameters-name": "ListActionTriggerBindingsRequestParameters",
        "x-operation-group": [
          "actions",
          "triggers",
          "bindings"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:actions"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update trigger bindings",
        "description": "Update the actions that are bound (i.e. attached) to a trigger. Once an action is created and deployed, it must be attached (i.e. bound) to a trigger so that it will be executed as part of a flow. The order in which the actions are provided will determine the order in which they are executed.",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "triggerId",
            "in": "path",
            "description": "An actions extensibility point.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ActionTriggerTypeEnum"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActionBindingsRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActionBindingsRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The bindings were updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateActionBindingsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request Body.",
            "x-description-1": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: update:actions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_bindings",
        "x-operation-name": "updateMany",
        "x-operation-group": [
          "actions",
          "triggers",
          "bindings"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:actions"
            ]
          }
        ]
      }
    },
    "/anomaly/blocks/ips/{id}": {
      "get": {
        "summary": "Check if an IP address is blocked",
        "description": "Check if the given IP address is blocked via the <a href=\"https://auth0.com/docs/configure/attack-protection/suspicious-ip-throttling\">Suspicious IP Throttling</a> due to multiple suspicious attempts.",
        "tags": [
          "anomaly"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP address to check.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AnomalyIPFormat"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IP address specified is currently blocked."
          },
          "400": {
            "description": "Connection does not exist.",
            "x-description-1": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: get:anomaly_block."
          },
          "404": {
            "description": "IP address specified is not currently blocked."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_ips_by_id",
        "x-operation-name": "checkIfIpIsBlocked",
        "x-operation-group": "anomaly",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:anomaly_blocks"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Remove the blocked IP address",
        "description": "Remove a block imposed by <a href=\"https://auth0.com/docs/configure/attack-protection/suspicious-ip-throttling\">Suspicious IP Throttling</a> for the given IP address.",
        "tags": [
          "anomaly"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP address to unblock.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AnomalyIPFormat"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "IP address specified successfully unblocked."
          },
          "400": {
            "description": "Connection does not exist.",
            "x-description-1": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:anomaly_block."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_ips_by_id",
        "x-operation-name": "deleteBlockedIp",
        "x-operation-group": "anomaly",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:anomaly_blocks"
            ]
          }
        ]
      }
    },
    "/attack-protection/breached-password-detection": {
      "get": {
        "summary": "Get Breached Password Detection settings",
        "description": "Retrieve details of the Breached Password Detection configuration of your tenant.",
        "tags": [
          "attack-protection"
        ],
        "responses": {
          "200": {
            "description": "Breached password detection settings successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBreachedPasswordDetectionSettingsResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:attack_protection."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_breached-password-detection",
        "x-operation-name": "getBreachedPasswordDetectionConfig",
        "x-operation-group": "attackProtection",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:attack_protection"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update Breached Password Detection settings",
        "description": "Update details of the Breached Password Detection configuration of your tenant.",
        "tags": [
          "attack-protection"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBreachedPasswordDetectionSettingsRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBreachedPasswordDetectionSettingsRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Breached password detection settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBreachedPasswordDetectionSettingsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:attack_protection."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_breached-password-detection",
        "x-operation-name": "updateBreachedPasswordDetectionConfig",
        "x-operation-group": "attackProtection",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:attack_protection"
            ]
          }
        ]
      }
    },
    "/attack-protection/brute-force-protection": {
      "get": {
        "summary": "Get Brute-force settings",
        "description": "Retrieve details of the Brute-force Protection configuration of your tenant.",
        "tags": [
          "attack-protection"
        ],
        "responses": {
          "200": {
            "description": "Brute force configuration successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBruteForceSettingsResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:attack_protection."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_brute-force-protection",
        "x-operation-name": "getBruteForceConfig",
        "x-operation-group": "attackProtection",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:attack_protection"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update Brute-force settings",
        "description": "Update the Brute-force Protection configuration of your tenant.",
        "tags": [
          "attack-protection"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBruteForceSettingsRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBruteForceSettingsRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Brute force configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBruteForceSettingsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:attack_protection."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_brute-force-protection",
        "x-operation-name": "updateBruteForceConfig",
        "x-operation-group": "attackProtection",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:attack_protection"
            ]
          }
        ]
      }
    },
    "/attack-protection/suspicious-ip-throttling": {
      "get": {
        "summary": "Get Suspicious IP Throttling settings",
        "description": "Retrieve details of the Suspicious IP Throttling configuration of your tenant.",
        "tags": [
          "attack-protection"
        ],
        "responses": {
          "200": {
            "description": "Suspicious IP throttling configuration successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSuspiciousIPThrottlingSettingsResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:attack_protection."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_suspicious-ip-throttling",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:attack_protection"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update Suspicious IP Throttling settings",
        "description": "Update the details of the Suspicious IP Throttling configuration of your tenant.",
        "tags": [
          "attack-protection"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSuspiciousIPThrottlingSettingsRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSuspiciousIPThrottlingSettingsRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Suspicious IP throttling configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSuspiciousIPThrottlingSettingsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:attack_protection."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_suspicious-ip-throttling",
        "x-operation-name": "updateSuspiciousIpThrottlingConfig",
        "x-operation-group": "attackProtection",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:attack_protection"
            ]
          }
        ]
      }
    },
    "/branding": {
      "get": {
        "summary": "Get branding settings",
        "description": "Retrieve branding settings.",
        "tags": [
          "branding"
        ],
        "responses": {
          "200": {
            "description": "Branding settings successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBrandingResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "The specified client cannot perform the requested operation.",
            "x-description-1": "Insufficient scope; expected any of: read:branding."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_branding",
        "x-operation-name": "get",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:branding"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update branding settings",
        "description": "Update branding settings.",
        "tags": [
          "branding"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBrandingRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBrandingRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Branding settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBrandingResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:branding."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_branding",
        "x-operation-name": "update",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:branding"
            ]
          }
        ]
      }
    },
    "/branding/phone/providers": {
      "get": {
        "summary": "Get a list of phone providers",
        "description": "Retrieve a list of <a href=\"https://auth0.com/docs/customize/phone-messages/configure-phone-messaging-providers\">phone providers</a> details set for a Tenant. A list of fields to include or exclude may also be specified.\n",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "disabled",
            "in": "query",
            "description": "Whether the provider is enabled (false) or disabled (true).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone providers have been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBrandingPhoneProvidersResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:phone_provider."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_branding_phone_providers",
        "x-operation-name": "listPhoneProviders",
        "x-operation-request-parameters-name": "ListBrandingPhoneProvidersRequestParameters",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:phone_providers"
            ]
          }
        ]
      },
      "post": {
        "summary": "Configure the phone provider",
        "description": "Create a <a href=\"https://auth0.com/docs/customize/phone-messages/configure-phone-messaging-providers\">phone provider</a>.\nThe <code>credentials</code> object requires different properties depending on the phone provider (which is specified using the <code>name</code> property).\n",
        "tags": [
          "branding"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBrandingPhoneProviderRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateBrandingPhoneProviderRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Phone notification provider successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBrandingPhoneProviderResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:phone_provider."
          },
          "409": {
            "description": "Custom phone provider conflict."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "create_phone_provider",
        "x-operation-name": "createPhoneProvider",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:phone_providers"
            ]
          }
        ]
      }
    },
    "/branding/phone/providers/{id}": {
      "get": {
        "summary": "Get a phone provider",
        "description": "Retrieve <a href=\"https://auth0.com/docs/customize/phone-messages/configure-phone-messaging-providers\">phone provider</a> details. A list of fields to include or exclude may also be specified.\n",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone provider successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBrandingPhoneProviderResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id for provider."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:phone_provider."
          },
          "404": {
            "description": "Phone provider has not been configured."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_phone_provider",
        "x-operation-name": "getPhoneProvider",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:phone_providers"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Deletes a Phone Provider",
        "description": "Delete the configured phone provider.\n",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Phone provider successfully deleted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:phone_provider."
          },
          "404": {
            "description": "Phone provider has not been configured."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_phone_provider",
        "x-operation-name": "deletePhoneProvider",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:phone_providers"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update the phone provider",
        "description": "Update a <a href=\"https://auth0.com/docs/customize/phone-messages/configure-phone-messaging-providers\">phone provider</a>.\nThe <code>credentials</code> object requires different properties depending on the phone provider (which is specified using the <code>name</code> property).\n",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBrandingPhoneProviderRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBrandingPhoneProviderRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone provider successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBrandingPhoneProviderResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:phone_provider."
          },
          "404": {
            "description": "Phone provider has not been configured."
          },
          "409": {
            "description": "Custom phone provider conflict."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "update_phone_provider",
        "x-operation-name": "updatePhoneProvider",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:phone_providers"
            ]
          }
        ]
      }
    },
    "/branding/phone/providers/{id}/try": {
      "post": {
        "summary": "Send a test phone notification for the configured provider",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhoneProviderSendTestRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhoneProviderSendTestRequestContent"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Phone notification sent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePhoneProviderSendTestResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope, expected: create:phone_provider."
          },
          "404": {
            "description": "Phone provider has not been configured."
          },
          "409": {
            "description": "Custom phone provider conflict."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "try_phone_provider",
        "x-operation-name": "testPhoneProvider",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:phone_providers"
            ]
          }
        ]
      }
    },
    "/branding/phone/templates": {
      "get": {
        "summary": "Get a list of phone notification templates",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "disabled",
            "in": "query",
            "description": "Whether the template is enabled (false) or disabled (true).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The phone notification templates were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPhoneTemplatesResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:phone_templates"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_phone_templates",
        "x-operation-name": "listPhoneTemplates",
        "x-operation-request-parameters-name": "ListPhoneTemplatesRequestParameters",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:phone_templates"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a phone notification template",
        "tags": [
          "branding"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhoneTemplateRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhoneTemplateRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The phone notification template was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePhoneTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: create:phone_templates"
          },
          "409": {
            "description": "Phone template already configured for tenant"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "create_phone_template",
        "x-operation-name": "createPhoneTemplate",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:phone_templates"
            ]
          }
        ]
      }
    },
    "/branding/phone/templates/{id}": {
      "get": {
        "summary": "Get a phone notification template",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The phone notification template were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPhoneTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:phone_templates"
          },
          "404": {
            "description": "Phone template does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_phone_template",
        "x-operation-name": "getPhoneTemplate",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:phone_templates"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a phone notification template",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The phone notification template was deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: delete:phone_templates"
          },
          "404": {
            "description": "Phone template does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_phone_template",
        "x-operation-name": "deletePhoneTemplate",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:phone_templates"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a phone notification template",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneTemplateRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneTemplateRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The phone notification template was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePhoneTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: update:phone_templates"
          },
          "404": {
            "description": "Phone template does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "update_phone_template",
        "x-operation-name": "updatePhoneTemplate",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:phone_templates"
            ]
          }
        ]
      }
    },
    "/branding/phone/templates/{id}/reset": {
      "patch": {
        "summary": "Resets a phone notification template values",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPhoneTemplateRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ResetPhoneTemplateRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The phone notification template was reset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPhoneTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: create:phone_templates"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "reset_phone_template",
        "x-operation-name": "resetPhoneTemplate",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:phone_templates"
            ]
          }
        ]
      }
    },
    "/branding/phone/templates/{id}/try": {
      "post": {
        "summary": "Send a test phone notification for the configured template",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhoneTemplateTestNotificationRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhoneTemplateTestNotificationRequestContent"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The phone testing notification for the template was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePhoneTemplateTestNotificationResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: create:phone_templates"
          },
          "404": {
            "description": "Phone template does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "try_phone_template",
        "x-operation-name": "testPhoneTemplate",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:phone_templates"
            ]
          }
        ]
      }
    },
    "/branding/templates/universal-login": {
      "get": {
        "summary": "Get template for New Universal Login Experience",
        "tags": [
          "branding"
        ],
        "responses": {
          "200": {
            "description": "Template successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUniversalLoginTemplateResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "402": {
            "description": "A paid subscription is required for this feature."
          },
          "403": {
            "description": "Insufficient scope; expected: read:branding"
          },
          "404": {
            "description": "Template does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_universal-login",
        "x-operation-name": "getUniversalLoginTemplate",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:branding"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete template for New Universal Login Experience",
        "tags": [
          "branding"
        ],
        "responses": {
          "204": {
            "description": "Template successfully deleted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "402": {
            "description": "A paid subscription is required for this feature."
          },
          "403": {
            "description": "Insufficient scope; expected: delete:branding."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_universal-login",
        "x-operation-name": "deleteUniversalLoginTemplate",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:branding"
            ]
          }
        ]
      },
      "put": {
        "summary": "Set template for New Universal Login Experience",
        "description": "Update the Universal Login branding template.\n\n<p>When <code>content-type</code> header is set to <code>application/json</code>, the expected body must be JSON:</p>\n<pre>\n{\n  \"template\": \"&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;{%- auth0:head -%}&lt;/head&gt;&lt;body&gt;{%- auth0:widget -%}&lt;/body&gt;&lt;/html&gt;\"\n}\n</pre>\n\n<p>\n  When <code>content-type</code> header is set to <code>text/html</code>, the expected body must be the HTML template:\n</p>\n<pre>\n&lt!DOCTYPE html&gt;\n&lt;code&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n     {%- auth0:head -%}\n    &lt;/head&gt;\n    &lt;body&gt;\n      {%- auth0:widget -%}\n    &lt;/body&gt;\n  &lt;/html&gt;\n&lt;/code&gt;\n</pre>\n",
        "tags": [
          "branding"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUniversalLoginTemplateRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUniversalLoginTemplateRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template successfully created."
          },
          "204": {
            "description": "Template successfully updated."
          },
          "400": {
            "description": "Payload content length greater than maximum allowed: 102400.",
            "x-description-1": "Payload content missing required Liquid tags (auth0:head and auth0:widget)."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "402": {
            "description": "A paid subscription is required for this feature."
          },
          "403": {
            "description": "Insufficient scope; expected: update:branding."
          },
          "409": {
            "description": "Template update conflict."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "put_universal-login",
        "x-operation-name": "updateUniversalLoginTemplate",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:branding"
            ]
          }
        ]
      }
    },
    "/branding/themes": {
      "post": {
        "summary": "Create branding theme",
        "description": "Create branding theme.",
        "tags": [
          "branding"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBrandingThemeRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateBrandingThemeRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Branding settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBrandingThemeResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:branding."
          },
          "409": {
            "description": "There was an error updating branding settings: The theme already exists"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_branding_theme",
        "x-operation-name": "createTheme",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:branding"
            ]
          }
        ]
      }
    },
    "/branding/themes/default": {
      "get": {
        "summary": "Get default branding theme",
        "description": "Retrieve default branding theme.",
        "tags": [
          "branding"
        ],
        "responses": {
          "200": {
            "description": "Branding theme successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBrandingDefaultThemeResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "The specified client cannot perform the requested operation.",
            "x-description-1": "Insufficient scope; expected any of: read:branding."
          },
          "404": {
            "description": "There was an error retrieving branding settings: invalid theme ID"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_default_branding_theme",
        "x-operation-name": "getDefaultTheme",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:branding"
            ]
          }
        ]
      }
    },
    "/branding/themes/{themeId}": {
      "get": {
        "summary": "Get branding theme",
        "description": "Retrieve branding theme.",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "description": "The ID of the theme",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Branding theme successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBrandingThemeResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "The specified client cannot perform the requested operation.",
            "x-description-1": "Insufficient scope; expected any of: read:branding."
          },
          "404": {
            "description": "There was an error retrieving branding settings: invalid theme ID"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_branding_theme",
        "x-operation-name": "getTheme",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:branding"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete branding theme",
        "description": "Delete branding theme.",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "description": "The ID of the theme",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Branding theme successfully deleted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "The specified client cannot perform the requested operation.",
            "x-description-1": "Insufficient scope; expected any of: delete:branding."
          },
          "404": {
            "description": "There was an error deleting branding settings: invalid theme ID"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_branding_theme",
        "x-operation-name": "deleteTheme",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:branding"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update branding theme",
        "description": "Update branding theme.",
        "tags": [
          "branding"
        ],
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "description": "The ID of the theme",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBrandingThemeRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBrandingThemeRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Branding settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBrandingThemeResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:branding."
          },
          "404": {
            "description": "There was an error updating branding settings: invalid theme ID"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_branding_theme",
        "x-operation-name": "updateTheme",
        "x-operation-group": "branding",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:branding"
            ]
          }
        ]
      }
    },
    "/client-grants": {
      "get": {
        "summary": "Get client grants",
        "description": "Retrieve a list of <a href=\"https://auth0.com/docs/api-auth/grant/client-credentials\">client grants</a>, including the scopes associated with the application/API pair.\n",
        "tags": [
          "client-grants"
        ],
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "audience",
            "in": "query",
            "description": "Optional filter on audience.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "Optional filter on client_id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allow_any_organization",
            "in": "query",
            "description": "Optional filter on allow_any_organization.",
            "schema": {
              "$ref": "#/components/schemas/ClientGrantAllowAnyOrganizationEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client grants successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListClientGrantResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:client_grants."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_client-grants",
        "x-operation-name": "list",
        "x-operation-request-parameters-name": "ListClientGrantsRequestParameters",
        "x-operation-group": "clientGrants",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:client_grants"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create client grant",
        "description": "Create a client grant for a machine-to-machine login flow. To learn more, read <a href=\"https://www.auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow\">Client Credential Flow</a>.",
        "tags": [
          "client-grants"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientGrantRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientGrantRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client grant successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateClientGrantResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:client_grants."
          },
          "404": {
            "description": "Resource server not found",
            "x-description-1": "Client not found"
          },
          "409": {
            "description": "A resource server with the same identifier already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_client-grants",
        "x-operation-name": "create",
        "x-operation-group": "clientGrants",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:client_grants"
            ]
          }
        ]
      }
    },
    "/client-grants/{id}": {
      "delete": {
        "summary": "Delete client grant",
        "description": "Delete the <a href=\"https://www.auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow\">Client Credential Flow</a> from your machine-to-machine application.\n",
        "tags": [
          "client-grants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client grant to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Client grant successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:client_grants."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_client-grants_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "clientGrants",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:client_grants"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update client grant",
        "description": "Update a client grant.",
        "tags": [
          "client-grants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client grant to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientGrantRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientGrantRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client grant successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateClientGrantResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:client_grants."
          },
          "404": {
            "description": "The client grant does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_client-grants_by_id",
        "x-operation-name": "update",
        "x-operation-group": "clientGrants",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:client_grants"
            ]
          }
        ]
      }
    },
    "/client-grants/{id}/organizations": {
      "get": {
        "summary": "Get the organizations associated to a client grant",
        "tags": [
          "client-grants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client grant",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organizations successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListClientGrantOrganizationsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:organization_client_grants."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_client-grant-organizations",
        "x-operation-name": "listOrganizations",
        "x-operation-request-parameters-name": "ListClientGrantOrganizationsRequestParameters",
        "x-operation-group": "clientGrants",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:organization_client_grants"
            ]
          }
        ]
      }
    },
    "/clients": {
      "get": {
        "summary": "Get clients",
        "description": "Retrieve clients (applications and SSO integrations) matching provided filters. A list of fields to include or exclude may also be specified.\nFor more information, read <a href=\"https://www.auth0.com/docs/get-started/applications\"> Applications in Auth0</a> and <a href=\"https://www.auth0.com/docs/authenticate/single-sign-on\"> Single Sign-On</a>.\n\n<ul>\n  <li>\n    The following can be retrieved with any scope:\n    <code>client_id</code>, <code>app_type</code>, <code>name</code>, and <code>description</code>.\n  </li>\n  <li>\n    The following properties can only be retrieved with the <code>read:clients</code> or\n    <code>read:client_keys</code> scope:\n    <code>callbacks</code>, <code>oidc_logout</code>, <code>allowed_origins</code>,\n    <code>web_origins</code>, <code>tenant</code>, <code>global</code>, <code>config_route</code>,\n    <code>callback_url_template</code>, <code>jwt_configuration</code>,\n    <code>jwt_configuration.lifetime_in_seconds</code>, <code>jwt_configuration.secret_encoded</code>,\n    <code>jwt_configuration.scopes</code>, <code>jwt_configuration.alg</code>, <code>api_type</code>,\n    <code>logo_uri</code>, <code>allowed_clients</code>, <code>owners</code>, <code>custom_login_page</code>,\n    <code>custom_login_page_off</code>, <code>sso</code>, <code>addons</code>, <code>form_template</code>,\n    <code>custom_login_page_codeview</code>, <code>resource_servers</code>, <code>client_metadata</code>,\n    <code>mobile</code>, <code>mobile.android</code>, <code>mobile.ios</code>, <code>allowed_logout_urls</code>,\n    <code>token_endpoint_auth_method</code>, <code>is_first_party</code>, <code>oidc_conformant</code>,\n    <code>is_token_endpoint_ip_header_trusted</code>, <code>initiate_login_uri</code>, <code>grant_types</code>,\n    <code>refresh_token</code>, <code>refresh_token.rotation_type</code>, <code>refresh_token.expiration_type</code>,\n    <code>refresh_token.leeway</code>, <code>refresh_token.token_lifetime</code>, <code>refresh_token.policies</code>, <code>organization_usage</code>,\n    <code>organization_require_behavior</code>.\n  </li>\n  <li>\n    The following properties can only be retrieved with the\n    <code>read:client_keys</code> or <code>read:client_credentials</code> scope:\n    <code>encryption_key</code>, <code>encryption_key.pub</code>, <code>encryption_key.cert</code>,\n    <code>client_secret</code>, <code>client_authentication_methods</code> and <code>signing_key</code>.\n  </li>\n</ul>\n",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Default value is 50, maximum value is 100",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "is_global",
            "in": "query",
            "description": "Optional filter on the global client parameter.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_first_party",
            "in": "query",
            "description": "Optional filter on whether or not a client is a first-party client.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "app_type",
            "in": "query",
            "description": "Optional filter by a comma-separated list of application types.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Advanced Query in <a href=\"http://www.lucenetutorial.com/lucene-query-syntax.html\">Lucene</a> syntax.<br /><b>Permitted Queries</b>:<br /><ul><li><i>client_grant.organization_id:{organization_id}</i></li><li><i>client_grant.allow_any_organization:true</i></li></ul><b>Additional Restrictions</b>:<br /><ul><li>Cannot be used in combination with other filters</li><li>Requires use of the <i>from</i> and <i>take</i> paging parameters (checkpoint paginatinon)</li><li>Reduced rate limits apply. See <a href=\"https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy/rate-limit-configurations/enterprise-public\">Rate Limit Configurations</a></li></ul><i><b>Note</b>: Recent updates may not be immediately reflected in query results</i>",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Clients successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Client"
                      }
                    },
                    {
                      "$ref": "#/components/schemas/ListClientsOffsetPaginatedResponseContent"
                    },
                    {
                      "$ref": "#/components/schemas/ListClientsPaginatedResponseContent"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:clients, read:client_keys, read:client_summary",
            "x-description-1": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_clients",
        "x-operation-name": "list",
        "x-operation-request-parameters-name": "ListClientsRequestParameters",
        "x-operation-group": "clients",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:clients",
              "read:client_keys",
              "read:client_credentials",
              "read:client_summary"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a client",
        "description": "Create a new client (application or SSO integration). For more information, read <a href=\"https://www.auth0.com/docs/get-started/auth0-overview/create-applications\">Create Applications</a>\n<a href=\"https://www.auth0.com/docs/authenticate/single-sign-on/api-endpoints-for-single-sign-on>\">API Endpoints for Single Sign-On</a>. \n\nNotes: \n- We recommend leaving the `client_secret` parameter unspecified to allow the generation of a safe secret.\n- The <code>client_authentication_methods</code> and <code>token_endpoint_auth_method</code> properties are mutually exclusive. Use \n<code>client_authentication_methods</code> to configure the client with Private Key JWT authentication method. Otherwise, use <code>token_endpoint_auth_method</code>\nto configure the client with client secret (basic or post) or with no authentication method (none).\n- When using <code>client_authentication_methods</code> to configure the client with Private Key JWT authentication method, specify fully defined credentials. \nThese credentials will be automatically enabled for Private Key JWT authentication on the client. \n- To configure <code>client_authentication_methods</code>, the <code>create:client_credentials</code> scope is required.\n- To configure <code>client_authentication_methods</code>, the property <code>jwt_configuration.alg</code> must be set to RS256.\n\n<div class=\"alert alert-warning\">SSO Integrations created via this endpoint will accept login requests and share user profile information.</div>\n",
        "tags": [
          "clients"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateClientResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:clients.",
            "x-description-1": "The account is not allowed to perform this operation.",
            "x-description-2": "You reached the limit of entities of this type for this tenant.",
            "x-description-3": "Organizations are only available to first party clients on user-based flows. Properties organization_usage and organization_require_behavior must be unset for third party clients."
          },
          "409": {
            "description": "Another client exists with the same alias."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_clients",
        "x-operation-name": "create",
        "x-operation-group": "clients",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:clients"
            ]
          }
        ]
      }
    },
    "/clients/{client_id}/credentials": {
      "get": {
        "summary": "Get client credentials",
        "description": "Get the details of a client credential.\n\n<b>Important</b>: To enable credentials to be used for a client authentication method, set the <code>client_authentication_methods</code> property on the client. To enable credentials to be used for JWT-Secured Authorization requests set the <code>signed_request_object</code> property on the client.\n",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "ID of the client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Credentials successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientCredential"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:client_credentials."
          },
          "404": {
            "description": "Client not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_credentials",
        "x-operation-name": "list",
        "x-operation-group": [
          "clients",
          "credentials"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:client_credentials"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a client credential",
        "description": "Create a client credential associated to your application. Credentials can be used to configure Private Key JWT and mTLS authentication methods, as well as for JWT-secured Authorization requests.\n\n<h5>Public Key</h5>Public Key credentials can be used to set up Private Key JWT client authentication and JWT-secured Authorization requests.\n\nSample: <pre><code>{\n  \"credential_type\": \"public_key\",\n  \"name\": \"string\",\n  \"pem\": \"string\",\n  \"alg\": \"RS256\",\n  \"parse_expiry_from_cert\": false,\n  \"expires_at\": \"2022-12-31T23:59:59Z\"\n}</code></pre>\n<h5>Certificate (CA-signed & self-signed)</h5>Certificate credentials can be used to set up mTLS client authentication. CA-signed certificates can be configured either with a signed certificate or with just the certificate Subject DN.\n\nCA-signed Certificate Sample (pem): <pre><code>{\n  \"credential_type\": \"x509_cert\",\n  \"name\": \"string\",\n  \"pem\": \"string\"\n}</code></pre>CA-signed Certificate Sample (subject_dn): <pre><code>{\n  \"credential_type\": \"cert_subject_dn\",\n  \"name\": \"string\",\n  \"subject_dn\": \"string\"\n}</code></pre>Self-signed Certificate Sample: <pre><code>{\n  \"credential_type\": \"cert_subject_dn\",\n  \"name\": \"string\",\n  \"pem\": \"string\"\n}</code></pre>\n\nThe credential will be created but not yet enabled for use until you set the corresponding properties in the client:\n<ul>\n  <li>To enable the credential for Private Key JWT or mTLS authentication methods, set the <code>client_authentication_methods</code> property on the client. For more information, read <a href=\"https://auth0.com/docs/get-started/applications/configure-private-key-jwt\">Configure Private Key JWT Authentication</a> and <a href=\"https://auth0.com/docs/get-started/applications/configure-mtls\">Configure mTLS Authentication</a></li>\n  <li>To enable the credential for JWT-secured Authorization requests, set the <code>signed_request_object</code>property on the client. For more information, read <a href=\"https://auth0.com/docs/get-started/applications/configure-jar\">Configure JWT-secured Authorization Requests (JAR)</a></li>\n</ul>\n",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "ID of the client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostClientCredentialRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PostClientCredentialRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Credential successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostClientCredentialResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:client_credentials."
          },
          "404": {
            "description": "Client not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_credentials",
        "x-operation-name": "create",
        "x-operation-group": [
          "clients",
          "credentials"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:client_credentials"
            ]
          }
        ]
      }
    },
    "/clients/{client_id}/credentials/{credential_id}": {
      "get": {
        "summary": "Get client credential details",
        "description": "Get the details of a client credential.\n\n<b>Important</b>: To enable credentials to be used for a client authentication method, set the <code>client_authentication_methods</code> property on the client. To enable credentials to be used for JWT-Secured Authorization requests set the <code>signed_request_object</code> property on the client.\n",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "ID of the client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credential_id",
            "in": "path",
            "description": "ID of the credential.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Credential successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientCredentialResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:client_credentials."
          },
          "404": {
            "description": "Client not found.",
            "x-description-1": "Credential does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_credentials_by_credential_id",
        "x-operation-name": "get",
        "x-operation-group": [
          "clients",
          "credentials"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:client_credentials"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a client credential",
        "description": "Delete a client credential you previously created. May be enabled or disabled. For more information, read <a href=\"https://www.auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow\">Client Credential Flow</a>.",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "ID of the client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credential_id",
            "in": "path",
            "description": "ID of the credential to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Credential successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:client_credentials."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_credentials_by_credential_id",
        "x-operation-name": "delete",
        "x-operation-group": [
          "clients",
          "credentials"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:client_credentials"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a client credential",
        "description": "Change a client credential you previously created. May be enabled or disabled. For more information, read <a href=\"https://www.auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow\">Client Credential Flow</a>.",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "ID of the client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credential_id",
            "in": "path",
            "description": "ID of the credential.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchClientCredentialRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchClientCredentialRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Credential successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchClientCredentialResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:client_credentials."
          },
          "404": {
            "description": "Client not found.",
            "x-description-1": "Credential does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_credentials_by_credential_id",
        "x-operation-name": "update",
        "x-operation-group": [
          "clients",
          "credentials"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:client_credentials"
            ]
          }
        ]
      }
    },
    "/clients/{id}": {
      "get": {
        "summary": "Get client by ID",
        "description": "Retrieve client details by ID. Clients are SSO connections or Applications linked with your Auth0 tenant. A list of fields to include or exclude may also be specified. \nFor more information, read <a href=\"https://www.auth0.com/docs/get-started/applications\"> Applications in Auth0</a> and <a href=\"https://www.auth0.com/docs/authenticate/single-sign-on\"> Single Sign-On</a>.\n<ul>\n  <li>\n    The following properties can be retrieved with any of the scopes:\n    <code>client_id</code>, <code>app_type</code>, <code>name</code>, and <code>description</code>.\n  </li>\n  <li>\n    The following properties can only be retrieved with the <code>read:clients</code> or\n    <code>read:client_keys</code> scopes:\n    <code>callbacks</code>, <code>oidc_logout</code>, <code>allowed_origins</code>,\n    <code>web_origins</code>, <code>tenant</code>, <code>global</code>, <code>config_route</code>,\n    <code>callback_url_template</code>, <code>jwt_configuration</code>,\n    <code>jwt_configuration.lifetime_in_seconds</code>, <code>jwt_configuration.secret_encoded</code>,\n    <code>jwt_configuration.scopes</code>, <code>jwt_configuration.alg</code>, <code>api_type</code>,\n    <code>logo_uri</code>, <code>allowed_clients</code>, <code>owners</code>, <code>custom_login_page</code>,\n    <code>custom_login_page_off</code>, <code>sso</code>, <code>addons</code>, <code>form_template</code>,\n    <code>custom_login_page_codeview</code>, <code>resource_servers</code>, <code>client_metadata</code>,\n    <code>mobile</code>, <code>mobile.android</code>, <code>mobile.ios</code>, <code>allowed_logout_urls</code>,\n    <code>token_endpoint_auth_method</code>, <code>is_first_party</code>, <code>oidc_conformant</code>,\n    <code>is_token_endpoint_ip_header_trusted</code>, <code>initiate_login_uri</code>, <code>grant_types</code>,\n    <code>refresh_token</code>, <code>refresh_token.rotation_type</code>, <code>refresh_token.expiration_type</code>,\n    <code>refresh_token.leeway</code>, <code>refresh_token.token_lifetime</code>, <code>refresh_token.policies</code>, <code>organization_usage</code>,\n    <code>organization_require_behavior</code>.\n  </li>\n  <li>\n    The following properties can only be retrieved with the <code>read:client_keys</code> or <code>read:client_credentials</code> scopes:\n    <code>encryption_key</code>, <code>encryption_key.pub</code>, <code>encryption_key.cert</code>,\n    <code>client_secret</code>, <code>client_authentication_methods</code> and <code>signing_key</code>.\n  </li>\n</ul>\n",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:clients, read:client_keys, read:client_credentials, read:client_summary.",
            "x-description-1": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes."
          },
          "404": {
            "description": "Client not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_clients_by_id",
        "x-operation-name": "get",
        "x-operation-request-parameters-name": "GetClientRequestParameters",
        "x-operation-group": "clients",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:clients",
              "read:client_keys",
              "read:client_credentials",
              "read:client_summary"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a client",
        "description": "Delete a client and related configuration (rules, connections, etc).",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Client successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Global client cannot be deleted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:clients."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_clients_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "clients",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:clients"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a client",
        "description": "Updates a client's settings. For more information, read <a href=\"https://www.auth0.com/docs/get-started/applications\"> Applications in Auth0</a> and <a href=\"https://www.auth0.com/docs/authenticate/single-sign-on\"> Single Sign-On</a>.\n\nNotes:\n- The `client_secret` and `signing_key` attributes can only be updated with the `update:client_keys` scope.\n- The <code>client_authentication_methods</code> and <code>token_endpoint_auth_method</code> properties are mutually exclusive. Use <code>client_authentication_methods</code> to configure the client with Private Key JWT authentication method. Otherwise, use <code>token_endpoint_auth_method</code> to configure the client with client secret (basic or post) or with no authentication method (none).\n- When using <code>client_authentication_methods</code> to configure the client with Private Key JWT authentication method, only specify the credential IDs that were generated when creating the credentials on the client.\n- To configure <code>client_authentication_methods</code>, the <code>update:client_credentials</code> scope is required.\n- To configure <code>client_authentication_methods</code>, the property <code>jwt_configuration.alg</code> must be set to RS256.\n- To change a client's <code>is_first_party</code> property to <code>false</code>, the <code>organization_usage</code> and <code>organization_require_behavior</code> properties must be unset.\n",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateClientResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:clients, update:client_keys.",
            "x-description-1": "Some fields cannot be updated with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes.",
            "x-description-2": "The account is not allowed to perform this operation.",
            "x-description-3": "Organizations are only available to first party clients on user-based flows. Properties organization_usage and organization_require_behavior must be unset for third party clients."
          },
          "404": {
            "description": "Client not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_clients_by_id",
        "x-operation-name": "update",
        "x-operation-group": "clients",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:clients",
              "update:client_keys",
              "update:client_credentials"
            ]
          }
        ]
      }
    },
    "/clients/{id}/connections": {
      "get": {
        "summary": "Get enabled connections for a client",
        "description": "Retrieve all connections that are enabled for the specified <a href=\"https://www.auth0.com/docs/get-started/applications\"> Application</a>, using checkpoint pagination. A list of fields to include or exclude for each connection may also be specified.\n<ul>\n  <li>\n    This endpoint requires the <code>read:connections</code> scope and any one of <code>read:clients</code> or <code>read:client_summary</code>.\n  </li>\n  <li>\n    <b>Note</b>: The first time you call this endpoint, omit the <code>from</code> parameter. If there are more results, a <code>next</code> value is included in the response. You can use this for subsequent API calls. When <code>next</code> is no longer included in the response, no further results are remaining.\n  </li>\n</ul>\n",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client for which to retrieve enabled connections.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "strategy",
            "in": "query",
            "description": "Provide strategies to only retrieve connections with such strategies",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ConnectionStrategyEnum"
              }
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include or exclude (depending on include_fields) from the result, empty to retrieve all fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "<code>true</code> if the fields specified are to be included in the result, <code>false</code> otherwise (defaults to <code>true</code>)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListClientConnectionsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: read:connections and any of: read:clients or read:client_summary."
          },
          "404": {
            "description": "Client does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_client_connections",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:connections",
              "read:clients",
              "read:client_summary"
            ]
          }
        ]
      }
    },
    "/clients/{id}/rotate-secret": {
      "post": {
        "summary": "Rotate a client secret",
        "description": "Rotate a client secret.\n\nThis endpoint cannot be used with clients configured with Private Key JWT authentication method (client_authentication_methods configured with private_key_jwt). The generated secret is NOT base64 encoded.\n\nFor more information, read <a href=\"https://www.auth0.com/docs/get-started/applications/rotate-client-secret\">Rotate Client Secrets</a>.",
        "tags": [
          "clients"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client that will rotate secrets.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret successfully rotated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RotateClientSecretResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:client_keys.",
            "x-description-1": "Some fields cannot be updated with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes."
          },
          "404": {
            "description": "Client not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_rotate-secret",
        "x-operation-name": "rotateSecret",
        "x-operation-group": "clients",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:client_keys"
            ]
          }
        ]
      }
    },
    "/connections": {
      "get": {
        "summary": "Get all connections",
        "description": "Retrieves detailed list of all <a href=\"https://auth0.com/docs/authenticate/identity-providers\">connections</a> that match the specified strategy. If no strategy is provided, all connections within your tenant are retrieved. This action can accept a list of fields to include or exclude from the resulting list of connections. \n\nThis endpoint supports two types of pagination:\n<ul>\n<li>Offset pagination</li>\n<li>Checkpoint pagination</li>\n</ul>\n\nCheckpoint pagination must be used if you need to retrieve more than 1000 connections.\n\n<h2>Checkpoint Pagination</h2>\n\nTo search by checkpoint, use the following parameters:\n<ul>\n<li><code>from</code>: Optional id from which to start selection.</li>\n<li><code>take</code>: The total amount of entries to retrieve when using the from parameter. Defaults to 50.</li>\n</ul>\n\n<b>Note</b>: The first time you call this endpoint using checkpoint pagination, omit the <code>from</code> parameter. If there are more results, a <code>next</code> value is included in the response. You can use this for subsequent API calls. When <code>next</code> is no longer included in the response, no pages are remaining.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "The amount of entries per page. Defaults to 100 if not provided",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number. Zero based",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "true if a query summary must be included in the result, false otherwise. Not returned when using checkpoint pagination. Default <code>false</code>.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "strategy",
            "in": "query",
            "description": "Provide strategies to only retrieve connections with such strategies",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ConnectionStrategyEnum"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Provide the name of the connection to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include or exclude (depending on include_fields) from the result, empty to retrieve all fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "<code>true</code> if the fields specified are to be included in the result, <code>false</code> otherwise (defaults to <code>true</code>)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The conections were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListConnectionsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:connections"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_connections",
        "x-operation-name": "list",
        "x-operation-request-parameters-name": "ListConnectionsQueryParameters",
        "x-operation-group": [
          "connections",
          "users"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:connections"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a connection",
        "description": "Creates a new connection according to the JSON object received in <code>body</code>.<br/>",
        "tags": [
          "connections"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConnectionRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateConnectionRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The connection was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateConnectionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "Your account is not allowed to set options.set_user_root_attributes",
            "x-description-2": "options.set_user_root_attributes can be set only for enterprise connections, social connections or custom database connections (using external users store)",
            "x-description-3": "No phone provider configured for the tenant",
            "x-description-4": "Passwordless connection cannot be made as delivery method (sms/text) is not supported by the configured Tenant phone provider"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: create:connections",
            "x-description-1": "You reached the limit of entities of this type for this tenant."
          },
          "409": {
            "description": "A connection with the same name already exists",
            "x-description-1": "A connection with the same name is being deleted, try again later",
            "x-description-2": "There is already another connection with some realms from \"realms\" parameter",
            "x-description-3": "There is already a domain connection enabled for strategy"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_connections",
        "x-operation-name": "create",
        "x-operation-group": [
          "connections",
          "users"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:connections"
            ]
          }
        ]
      }
    },
    "/connections/{id}": {
      "get": {
        "summary": "Get a connection",
        "description": "Retrieve details for a specified <a href=\"https://auth0.com/docs/authenticate/identity-providers\">connection</a> along with options that can be used for identity provider configuration.",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include or exclude (depending on include_fields) from the result, empty to retrieve all fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "<code>true</code> if the fields specified are to be included in the result, <code>false</code> otherwise (defaults to <code>true</code>)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The connection was retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConnectionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:connections"
          },
          "404": {
            "description": "The connection does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_connections_by_id",
        "x-operation-name": "get",
        "x-operation-request-parameters-name": "GetConnectionRequestParameters",
        "x-operation-group": "connections",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:connections"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a connection",
        "description": "Removes a specific <a href=\"https://auth0.com/docs/authenticate/identity-providers\">connection</a> from your tenant. This action cannot be undone. Once removed, users can no longer use this connection to authenticate.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The connection is being deleted."
          },
          "204": {
            "description": "The connection no longer exists."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: delete:connections"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_connections_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "connections",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:connections"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a connection",
        "description": "Update details for a specific <a href=\"https://auth0.com/docs/authenticate/identity-providers\">connection</a>, including option properties for identity provider configuration.\n\n<b>Note</b>: If you use the <code>options</code> parameter, the entire <code>options</code> object is overriden. To avoid partial data or other issues, ensure all parameters are present when using this option.",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConnectionRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConnectionRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The connection was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateConnectionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause.",
            "x-description-2": "This database contains users. You cannot change \"options.enabledDatabaseCustomization\" setting.",
            "x-description-3": "Your account is not allowed to set options.set_user_root_attributes",
            "x-description-4": "The Azure AD common endpoint cannot be enabled for this connection when SCIM is enabled.",
            "x-description-5": "options.set_user_root_attributes can be set only for enterprise connections, social connections or custom database connections (using external users store)"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: update:connections"
          },
          "404": {
            "description": "The connection does not exist"
          },
          "409": {
            "description": "The name/client_id tuple has already been used for another connection"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_connections_by_id",
        "x-operation-name": "update",
        "x-operation-group": "connections",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:connections"
            ]
          }
        ]
      }
    },
    "/connections/{id}/clients": {
      "get": {
        "summary": "Get enabled clients for a connection",
        "description": "Retrieve all clients that have the specified <a href=\"https://auth0.com/docs/authenticate/identity-providers\">connection</a> enabled.\n\n<b>Note</b>: The first time you call this endpoint, omit the <code>from</code> parameter. If there are more results, a <code>next</code> value is included in the response. You can use this for subsequent API calls. When <code>next</code> is no longer included in the response, no further results are remaining.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection for which enabled clients are to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConnectionEnabledClientsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: read:connections"
          },
          "404": {
            "description": "The connection does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_connection_clients",
        "x-operation-name": "getEnabledClients",
        "x-operation-request-parameters-name": "GetConnectionEnabledClientsRequestParameters",
        "x-operation-group": [
          "connections",
          "clients"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:connections"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update enabled clients for a connection",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to modify",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnabledClientConnectionsRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnabledClientConnectionsRequestContent"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause.",
            "x-description-2": "Tenant Phone Provider not set. Connection can not be enable on a client.",
            "x-description-3": "Passwordless cannot be enabled for a client, as delivery method (sms/text) is not supported by the configured Tenant phone provider"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: update:connections"
          },
          "404": {
            "description": "The connection does not exist",
            "x-description-1": "The client does not exist"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_clients",
        "x-operation-name": "updateEnabledClients",
        "x-operation-group": [
          "connections",
          "clients"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:connections"
            ]
          }
        ]
      }
    },
    "/connections/{id}/scim-configuration": {
      "get": {
        "summary": "Get a connection's SCIM configuration",
        "description": "Retrieves a scim configuration by its <code>connectionId</code>.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to retrieve its SCIM configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The connection's SCIM configuration was retrieved. See <strong>Response Schemas</strong> for schema.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetScimConfigurationResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Path validation error"
          },
          "404": {
            "description": "The connection does not exist",
            "x-description-1": "Not Found"
          }
        },
        "operationId": "get_scim-configuration",
        "x-operation-name": "getScimConfiguration",
        "x-operation-group": "connectionsScim",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:scim_config"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a connection's SCIM configuration",
        "description": "Deletes a scim configuration by its <code>connectionId</code>.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to delete its SCIM configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The connection's SCIM configuration has been deleted."
          },
          "400": {
            "description": "Path validation error"
          },
          "404": {
            "description": "The connection does not exist"
          }
        },
        "operationId": "delete_scim-configuration",
        "x-operation-name": "deleteScimConfiguration",
        "x-operation-group": "connectionsScim",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:scim_config"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Patch a connection's SCIM configuration",
        "description": "Update a scim configuration by its <code>connectionId</code>.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to update its SCIM configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScimConfigurationRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScimConfigurationRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The connection's SCIM configuration was updated. See <strong>Response Schemas</strong> for schema.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateScimConfigurationResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid mapping provided",
            "x-description-1": "Invalid payload",
            "x-description-2": "Path validation error"
          },
          "404": {
            "description": "The connection does not exist"
          }
        },
        "operationId": "patch_scim-configuration",
        "x-operation-name": "updateScimConfiguration",
        "x-operation-group": "connectionsScim",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:scim_config"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a SCIM configuration",
        "description": "Create a scim configuration for a connection.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to create its SCIM configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScimConfigurationRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateScimConfigurationRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The connection's SCIM configuration was created. See <strong>Response Schemas</strong> for schema.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateScimConfigurationResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Path validation error",
            "x-description-1": "SCIM configuration alreay exists for connection",
            "x-description-2": "Invalid mapping provided",
            "x-description-3": "Invalid payload",
            "x-description-4": "SCIM cannot be enabled for this connection when the Azure AD common endpoint is used."
          },
          "404": {
            "description": "The connection does not exist"
          }
        },
        "operationId": "post_scim-configuration",
        "x-operation-name": "createScimConfiguration",
        "x-operation-group": "connectionsScim",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:scim_config"
            ]
          }
        ]
      }
    },
    "/connections/{id}/scim-configuration/default-mapping": {
      "get": {
        "summary": "Get a connection's default SCIM mapping",
        "description": "Retrieves a scim configuration's default mapping by its <code>connectionId</code>.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to retrieve its default SCIM mapping",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The connection's default SCIM mapping was retrieved. See <strong>Response Schemas</strong> for schema.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetScimConfigurationDefaultMappingResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Path validation error"
          },
          "404": {
            "description": "Not Found",
            "x-description-1": "The connection does not exist"
          }
        },
        "operationId": "get_default-mapping",
        "x-operation-name": "getDefaultScimMapping",
        "x-operation-group": "connectionsScim",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:scim_config"
            ]
          }
        ]
      }
    },
    "/connections/{id}/scim-configuration/tokens": {
      "get": {
        "summary": "Get a connection's SCIM tokens",
        "description": "Retrieves all scim tokens by its connection <code>id</code>.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to retrieve its SCIM configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The connection's SCIM tokens were retrieved. See <strong>Response Schemas</strong> for schema.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetScimTokensResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Path validation error"
          },
          "404": {
            "description": "The connection does not exist"
          }
        },
        "operationId": "get_scim_tokens",
        "x-operation-name": "getScimTokens",
        "x-operation-group": "connectionsScim",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:scim_token"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a SCIM Token",
        "description": "Create a scim token for a scim client.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection to create its SCIM token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScimTokenRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateScimTokenRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The connection's SCIM token was created. See <strong>Response Schemas</strong> for schema.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateScimTokenResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Path validation error"
          },
          "404": {
            "description": "The connection does not exist"
          },
          "409": {
            "description": "Maximum of 2 tokens already issued for this connection"
          }
        },
        "operationId": "post_scim_token",
        "x-operation-name": "createScimToken",
        "x-operation-group": "connectionsScim",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:scim_token"
            ]
          }
        ]
      }
    },
    "/connections/{id}/scim-configuration/tokens/{tokenId}": {
      "delete": {
        "summary": "Delete a connection's SCIM token",
        "description": "Deletes a scim token by its connection <code>id</code> and <code>tokenId</code>.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The connection id that owns the SCIM token to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "description": "The id of the scim token to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The SCIM token has been deleted."
          },
          "400": {
            "description": "Path validation error"
          },
          "404": {
            "description": "The connection does not exist"
          }
        },
        "operationId": "delete_tokens_by_tokenId",
        "x-operation-name": "deleteScimToken",
        "x-operation-group": "connectionsScim",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:scim_token"
            ]
          }
        ]
      }
    },
    "/connections/{id}/status": {
      "get": {
        "summary": "Check connection status",
        "description": "Retrieves the status of an ad/ldap connection referenced by its <code>ID</code>. <code>200 OK</code> http status code response is returned  when the connection is online, otherwise a <code>404</code> status code is returned along with an error message",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the connection to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Connection status successfully retrieved."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:connections."
          },
          "404": {
            "description": "Connection not found.",
            "x-description-1": "not connected to any node"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_status",
        "x-operation-name": "checkStatus",
        "x-operation-group": "connections",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:connections"
            ]
          }
        ]
      }
    },
    "/connections/{id}/users": {
      "delete": {
        "summary": "Delete a connection user",
        "description": "Deletes a specified connection user by its email (you cannot delete all users from specific connection). Currently, only Database Connections are supported.\n",
        "tags": [
          "connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the connection (currently only database connections are supported)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email of the user to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user no longer exists."
          },
          "400": {
            "description": "The connection does not exist",
            "x-description-1": "Connection must be a database connection",
            "x-description-2": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: delete:users"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_users_by_email",
        "x-operation-name": "deleteUserByEmail",
        "x-operation-request-parameters-name": "DeleteConnectionUsersByEmailQueryParameters",
        "x-operation-group": [
          "connections",
          "users"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:users"
            ]
          }
        ]
      }
    },
    "/custom-domains": {
      "get": {
        "summary": "Get custom domains configurations",
        "description": "Retrieve details on <a href=\"https://auth0.com/docs/custom-domains\">custom domains</a>.",
        "tags": [
          "custom-domains"
        ],
        "responses": {
          "200": {
            "description": "Custom domains successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCustomDomainsResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:custom_domains.",
            "x-description-1": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes.",
            "x-description-2": "The account is not allowed to perform this operation.",
            "x-description-3": "There must be a verified credit card on file to perform this operation"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_custom-domains",
        "x-operation-name": "list",
        "x-operation-request-parameters-name": "ListCustomDomainsRequestParameters",
        "x-operation-group": "customDomains",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:custom_domains"
            ]
          }
        ]
      },
      "post": {
        "summary": "Configure a new custom domain",
        "description": "Create a new custom domain.\n\nNote: The custom domain will need to be verified before it will accept\nrequests.\n\nOptional attributes that can be updated:\n\n- custom_client_ip_header\n- tls_policy\n\n\nTLS Policies:\n\n- recommended - for modern usage this includes TLS 1.2 only\n- compatible - compatible with older browsers this policy includes TLS 1.0, 1.1, 1.2\n\n\nSome considerations:\n\n- The TLS ciphers and protocols available in each TLS policy follow industry recommendations, and may be updated occasionally.\n- Do not use the <code>compatible</code> TLS policy unless you have clients that require TLS 1.0.\n",
        "tags": [
          "custom-domains"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomDomainRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomDomainRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Custom domain successfully created (verification is pending).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCustomDomainResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "The 'tls_policy' cannot be set on self_managed domains",
            "x-description-2": "The 'custom_client_ip_header' cannot be set on auth0_managed domains"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:custom_domains.",
            "x-description-1": "The account is not allowed to perform this operation.",
            "x-description-2": "There must be a verified credit card on file to perform this operation"
          },
          "409": {
            "description": "Custom domain already exists.",
            "x-description-1": "You reached the maximum number of custom domains for your account."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_custom-domains",
        "x-operation-name": "create",
        "x-operation-group": "customDomains",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:custom_domains"
            ]
          }
        ]
      }
    },
    "/custom-domains/{id}": {
      "get": {
        "summary": "Get custom domain configuration",
        "description": "Retrieve a custom domain configuration and status.",
        "tags": [
          "custom-domains"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the custom domain to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom domain successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomDomainResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:custom_domains.",
            "x-description-1": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes.",
            "x-description-2": "The account is not allowed to perform this operation.",
            "x-description-3": "There must be a verified credit card on file to perform this operation"
          },
          "404": {
            "description": "Custom domain not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_custom-domains_by_id",
        "x-operation-name": "get",
        "x-operation-group": "customDomains",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:custom_domains"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete custom domain configuration",
        "description": "Delete a custom domain and stop serving requests for it.",
        "tags": [
          "custom-domains"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the custom domain to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Custom domain successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:custom_domains.",
            "x-description-1": "The account is not allowed to perform this operation.",
            "x-description-2": "There must be a verified credit card on file to perform this operation."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_custom-domains_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "customDomains",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:custom_domains"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update custom domain configuration",
        "description": "Update a custom domain.\n\nThese are the attributes that can be updated:\n\n- custom_client_ip_header\n- tls_policy\n\n<h5>Updating CUSTOM_CLIENT_IP_HEADER for a custom domain</h5>To update the <code>custom_client_ip_header</code> for a domain, the body to\nsend should be:\n<pre><code>{ \"custom_client_ip_header\": \"cf-connecting-ip\" }</code></pre>\n\n<h5>Updating TLS_POLICY for a custom domain</h5>To update the <code>tls_policy</code> for a domain, the body to send should be:\n<pre><code>{ \"tls_policy\": \"recommended\" }</code></pre>\n\n\nTLS Policies:\n\n- recommended - for modern usage this includes TLS 1.2 only\n\n\nSome considerations:\n\n- The TLS ciphers and protocols available in each TLS policy follow industry recommendations, and may be updated occasionally.\n- The <code>compatible</code> TLS policy is no longer supported.\n",
        "tags": [
          "custom-domains"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the custom domain to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomDomainRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomDomainRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom domain updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCustomDomainResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "The 'tls_policy' cannot be set on self_managed domains",
            "x-description-2": "The 'custom_client_ip_header' cannot be set on auth0_managed domains"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: update:custom_domains.",
            "x-description-1": "Your account is not allowed to perform this operation.",
            "x-description-2": "There must be a verified credit card on file to perform this operation"
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_custom-domains_by_id",
        "x-operation-name": "update",
        "x-operation-group": "customDomains",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:custom_domains"
            ]
          }
        ]
      }
    },
    "/custom-domains/{id}/test": {
      "post": {
        "summary": "Test a custom domain",
        "description": "Run the test process on a custom domain.",
        "tags": [
          "custom-domains"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the custom domain to test.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom domain test successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCustomDomainResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:custom_domains.",
            "x-description-1": "The account is not allowed to perform this operation.",
            "x-description-2": "There must be a verified credit card on file to perform this operation"
          },
          "404": {
            "description": "Custom domain not found."
          },
          "409": {
            "description": "The custom domain is not ready."
          }
        },
        "operationId": "post_test_domain",
        "x-operation-name": "test",
        "x-operation-group": "customDomains",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:custom_domains"
            ]
          }
        ]
      }
    },
    "/custom-domains/{id}/verify": {
      "post": {
        "summary": "Verify a custom domain",
        "description": "Run the verification process on a custom domain.\n\nNote: Check the <code>status</code> field to see its verification status. Once verification is complete, it may take up to 10 minutes before the custom domain can start accepting requests.\n\nFor <code>self_managed_certs</code>, when the custom domain is verified for the first time, the response will also include the <code>cname_api_key</code> which you will need to configure your proxy. This key must be kept secret, and is used to validate the proxy requests.\n\n<a href=\"https://auth0.com/docs/custom-domains#step-2-verify-ownership\">Learn more</a> about verifying custom domains that use Auth0 Managed certificates.\n<a href=\"https://auth0.com/docs/custom-domains/self-managed-certificates#step-2-verify-ownership\">Learn more</a> about verifying custom domains that use Self Managed certificates.\n",
        "tags": [
          "custom-domains"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the custom domain to verify.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom domain successfully verified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCustomDomainResponseContent"
                }
              }
            },
            "x-description-1": "Custom domain failed verification."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Custom domain already verified."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:custom_domains.",
            "x-description-1": "The account is not allowed to perform this operation.",
            "x-description-2": "There must be a verified credit card on file to perform this operation"
          },
          "404": {
            "description": "Custom domain not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_verify",
        "x-operation-name": "verify",
        "x-operation-group": "customDomains",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:custom_domains"
            ]
          }
        ]
      }
    },
    "/device-credentials": {
      "get": {
        "summary": "Retrieve device credentials",
        "description": "Retrieve device credential information (<code>public_key</code>, <code>refresh_token</code>, or <code>rotating_refresh_token</code>) associated with a specific user.\n",
        "tags": [
          "device-credentials"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page.  There is a maximum of 1000 results allowed from this endpoint.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "user_id of the devices to retrieve.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "client_id of the devices to retrieve.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of credentials to retrieve. Must be `public_key`, `refresh_token` or `rotating_refresh_token`. The property will default to `refresh_token` when paging is requested",
            "schema": {
              "$ref": "#/components/schemas/DeviceCredentialTypeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Device credentials successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDeviceCredentialsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation.",
            "x-description-3": "Username is malformed, try with '{connection}\\{email_or_username}'",
            "x-description-4": "Bad username or password."
          },
          "403": {
            "description": "User to be acted on does not match subject in bearer token.",
            "x-description-1": "Insufficient scope, expected any of: read:device_credentials",
            "x-description-2": "Cannot retrieve device credentials for that user.",
            "x-description-3": "Cannot retrieve device credentials for that client.",
            "x-description-4": "Must provide client_id parameter."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_device-credentials",
        "x-operation-name": "list",
        "x-operation-request-parameters-name": "ListDeviceCredentialsRequestParameters",
        "x-operation-group": "deviceCredentials",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:device_credentials"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a device public key credential",
        "description": "Create a device credential public key to manage refresh token rotation for a given <code>user_id</code>. Device Credentials APIs are designed for ad-hoc administrative use only and paging is by default enabled for GET requests.\n\nWhen refresh token rotation is enabled, the endpoint becomes consistent. For more information, read <a href=\"https://auth0.com/docs/get-started/tenant-settings/signing-keys\"> Signing Keys</a>.\n",
        "tags": [
          "device-credentials"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicKeyDeviceCredentialRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicKeyDeviceCredentialRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Device credentials successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePublicKeyDeviceCredentialResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Username is malformed, try with \"{connection}\\{email_or_username}\".",
            "x-description-3": "Bad username or password."
          },
          "403": {
            "description": "Cannot create device credentials for that user.",
            "x-description-1": "Cannot create device credentials for that client.",
            "x-description-2": "Insufficient scope; expected any of: create:current_user_device_credentials."
          },
          "409": {
            "description": "A public key already exists for the device."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_device-credentials",
        "x-operation-name": "createPublicKey",
        "x-operation-group": "deviceCredentials",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:current_user_device_credentials"
            ]
          }
        ]
      }
    },
    "/device-credentials/{id}": {
      "delete": {
        "summary": "Delete a device credential",
        "description": "Permanently delete a device credential (such as a refresh token or public key) with the given ID.",
        "tags": [
          "device-credentials"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the credential to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Device credentials successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation.",
            "x-description-3": "Username is malformed, try with \"{connection}\\{email_or_username}\".",
            "x-description-4": "Bad username or password."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:device_credentials, update:current_user, delete:current_user_device_credentials."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_device-credentials_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "deviceCredentials",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:device_credentials",
              "delete:current_user_device_credentials"
            ]
          }
        ]
      }
    },
    "/email-templates": {
      "post": {
        "summary": "Create an email template",
        "description": "Create an email template.",
        "tags": [
          "email-templates"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailTemplateRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailTemplateRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmailTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: create:email_templates."
          },
          "409": {
            "description": "Template (templateName) already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_email-templates",
        "x-operation-name": "create",
        "x-operation-group": "emailTemplates",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:email_templates"
            ]
          }
        ]
      }
    },
    "/email-templates/{templateName}": {
      "get": {
        "summary": "Get an email template",
        "description": "Retrieve an email template by pre-defined name. These names are `verify_email`, `verify_email_by_code`, `reset_email`, `reset_email_by_code`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, and `user_invitation`. The names `change_password`, and `password_reset` are also supported for legacy scenarios.",
        "tags": [
          "email-templates"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `reset_email_by_code`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EmailTemplateNameEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEmailTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: read:email_templates."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_email-templates_by_templateName",
        "x-operation-name": "get",
        "x-operation-group": "emailTemplates",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:email_templates"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Patch an email template",
        "description": "Modify an email template.",
        "tags": [
          "email-templates"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `reset_email_by_code`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EmailTemplateNameEnum"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailTemplateRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailTemplateRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateEmailTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: update:email_templates."
          },
          "404": {
            "description": "Template not found and cannot be updated."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_email-templates_by_templateName",
        "x-operation-name": "update",
        "x-operation-group": "emailTemplates",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:email_templates"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update an email template",
        "description": "Update an email template.",
        "tags": [
          "email-templates"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `reset_email_by_code`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EmailTemplateNameEnum"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetEmailTemplateRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetEmailTemplateRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetEmailTemplateResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected: update:email_templates."
          },
          "404": {
            "description": "Template not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "put_email-templates_by_templateName",
        "x-operation-name": "set",
        "x-operation-group": "emailTemplates",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:email_templates"
            ]
          }
        ]
      }
    },
    "/emails/provider": {
      "get": {
        "summary": "Get email provider",
        "description": "Retrieve details of the <a href=\"https://auth0.com/docs/customize/email/smtp-email-providers\">email provider configuration</a> in your tenant. A list of fields to include or exclude may also be specified.\n",
        "tags": [
          "emails"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include or exclude (dependent upon include_fields) from the result. Leave empty to retrieve `name` and `enabled`. Additional fields available include `credentials`, `default_from_address`, and `settings`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_fields",
            "in": "query",
            "description": "Whether specified fields are to be included (true) or excluded (false).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email provider successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEmailProviderResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:email_provider."
          },
          "404": {
            "description": "Email provider has not been configured."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_provider",
        "x-operation-name": "getProvider",
        "x-operation-request-parameters-name": "GetEmailProviderRequestParameters",
        "x-operation-group": "emails",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:email_provider"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete email provider",
        "description": "Delete the email provider.\n",
        "tags": [
          "emails"
        ],
        "responses": {
          "204": {
            "description": "The email provider has been deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation"
          },
          "403": {
            "description": "Insufficient scope, expected any of: delete:email_provider"
          },
          "404": {
            "description": "Email provider does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_provider",
        "x-operation-name": "deleteProvider",
        "x-operation-group": "emails",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:email_provider"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update email provider",
        "description": "Update an <a href=\"https://auth0.com/docs/email/providers\">email provider</a>. The <code>credentials</code> object\nrequires different properties depending on the email provider (which is specified using the <code>name</code> property):\n<ul>\n  <li><code>mandrill</code> requires <code>api_key</code></li>\n  <li><code>sendgrid</code> requires <code>api_key</code></li>\n  <li>\n    <code>sparkpost</code> requires <code>api_key</code>. Optionally, set <code>region</code> to <code>eu</code> to use\n    the SparkPost service hosted in Western Europe; set to <code>null</code> to use the SparkPost service hosted in\n    North America. <code>eu</code> or <code>null</code> are the only valid values for <code>region</code>.\n  </li>\n  <li>\n    <code>mailgun</code> requires <code>api_key</code> and <code>domain</code>. Optionally, set <code>region</code> to\n    <code>eu</code> to use the Mailgun service hosted in Europe; set to <code>null</code> otherwise. <code>eu</code> or\n    <code>null</code> are the only valid values for <code>region</code>.\n  </li>\n  <li><code>ses</code> requires <code>accessKeyId</code>, <code>secretAccessKey</code>, and <code>region</code></li>\n  <li>\n    <code>smtp</code> requires <code>smtp_host</code>, <code>smtp_port</code>, <code>smtp_user</code>, and\n    <code>smtp_pass</code>\n  </li>\n</ul>\nDepending on the type of provider it is possible to specify <code>settings</code> object with different configuration\noptions, which will be used when sending an email:\n<ul>\n  <li>\n    <code>smtp</code> provider, <code>settings</code> may contain <code>headers</code> object.\n    <ul>\n      <li>\n        When using AWS SES SMTP host, you may provide a name of configuration set in\n        <code>X-SES-Configuration-Set</code> header. Value must be a string.\n      </li>\n      <li>\n        When using Sparkpost host, you may provide value for\n        <code>X-MSYS_API</code> header. Value must be an object.\n      </li>\n    </ul>\n    for <code>ses</code> provider, <code>settings</code> may contain <code>message</code> object, where you can provide\n    a name of configuration set in <code>configuration_set_name</code> property. Value must be a string.\n  </li>\n</ul>\n",
        "tags": [
          "emails"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailProviderRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailProviderRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email provider successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateEmailProviderResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:email_provider."
          },
          "404": {
            "description": "Email provider has not been configured."
          },
          "409": {
            "description": "No deployed action was found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_provider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:email_provider"
            ]
          }
        ]
      },
      "post": {
        "summary": "Configure email provider",
        "description": "Create an <a href=\"https://auth0.com/docs/email/providers\">email provider</a>. The <code>credentials</code> object\nrequires different properties depending on the email provider (which is specified using the <code>name</code> property):\n<ul>\n  <li><code>mandrill</code> requires <code>api_key</code></li>\n  <li><code>sendgrid</code> requires <code>api_key</code></li>\n  <li>\n    <code>sparkpost</code> requires <code>api_key</code>. Optionally, set <code>region</code> to <code>eu</code> to use\n    the SparkPost service hosted in Western Europe; set to <code>null</code> to use the SparkPost service hosted in\n    North America. <code>eu</code> or <code>null</code> are the only valid values for <code>region</code>.\n  </li>\n  <li>\n    <code>mailgun</code> requires <code>api_key</code> and <code>domain</code>. Optionally, set <code>region</code> to\n    <code>eu</code> to use the Mailgun service hosted in Europe; set to <code>null</code> otherwise. <code>eu</code> or\n    <code>null</code> are the only valid values for <code>region</code>.\n  </li>\n  <li><code>ses</code> requires <code>accessKeyId</code>, <code>secretAccessKey</code>, and <code>region</code></li>\n  <li>\n    <code>smtp</code> requires <code>smtp_host</code>, <code>smtp_port</code>, <code>smtp_user</code>, and\n    <code>smtp_pass</code>\n  </li>\n</ul>\nDepending on the type of provider it is possible to specify <code>settings</code> object with different configuration\noptions, which will be used when sending an email:\n<ul>\n  <li>\n    <code>smtp</code> provider, <code>settings</code> may contain <code>headers</code> object.\n    <ul>\n      <li>\n        When using AWS SES SMTP host, you may provide a name of configuration set in\n        <code>X-SES-Configuration-Set</code> header. Value must be a string.\n      </li>\n      <li>\n        When using Sparkpost host, you may provide value for\n        <code>X-MSYS_API</code> header. Value must be an object.\n      </li>\n    </ul>\n  </li>\n  <li>\n    for <code>ses</code> provider, <code>settings</code> may contain <code>message</code> object, where you can provide\n    a name of configuration set in <code>configuration_set_name</code> property. Value must be a string.\n  </li>\n</ul>\n",
        "tags": [
          "emails"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailProviderRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailProviderRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Email provider successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmailProviderResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:email_provider."
          },
          "409": {
            "description": "Email provider is already configured.",
            "x-description-1": "No deployed action was found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_provider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:email_provider"
            ]
          }
        ]
      }
    },
    "/event-streams": {
      "get": {
        "summary": "Get event streams",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event streams successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventStreamResponseContent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:event_streams."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_event-streams",
        "x-operation-name": "list",
        "x-operation-request-parameters-name": "ListEventStreamsRequestParameters",
        "x-operation-group": "eventStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:event_streams"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create an event stream",
        "tags": [
          "event-streams"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateEventStreamWebHookRequestContent"
                  },
                  {
                    "$ref": "#/components/schemas/CreateEventStreamEventBridgeRequestContent"
                  }
                ]
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateEventStreamWebHookRequestContent"
                  },
                  {
                    "$ref": "#/components/schemas/CreateEventStreamEventBridgeRequestContent"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event Stream stream created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEventStreamResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:event_streams."
          },
          "409": {
            "description": "You have reached the maximum number of event streams for your account OR Event stream name already in use."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_event-streams",
        "x-operation-name": "create",
        "x-operation-group": "eventStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:event_streams"
            ]
          }
        ]
      }
    },
    "/event-streams/{id}": {
      "get": {
        "summary": "Get an event stream by ID",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event stream successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventStreamResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:event_streams."
          },
          "404": {
            "description": "The event stream does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_event-streams_by_id",
        "x-operation-name": "get",
        "x-operation-group": "eventStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:event_streams"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete an event stream",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The event stream was deleted."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:event_streams."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_event-streams_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "eventStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:event_streams"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update an event stream",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventStreamRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventStreamRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event stream successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateEventStreamResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:event_streams."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_event-streams_by_id",
        "x-operation-name": "update",
        "x-operation-group": "eventStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:event_streams"
            ]
          }
        ]
      }
    },
    "/event-streams/{id}/deliveries": {
      "get": {
        "summary": "Get this event stream's delivery history",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Comma-separated list of statuses by which to filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_types",
            "in": "query",
            "description": "Comma-separated list of event types by which to filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "description": "An RFC-3339 date-time for redelivery start, inclusive. Does not allow sub-second precision.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "An RFC-3339 date-time for redelivery end, exclusive. Does not allow sub-second precision.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event stream deliveries successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventStreamDelivery"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:event_streams, read:event_deliveries."
          },
          "404": {
            "description": "The event stream does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_event_deliveries",
        "x-operation-name": "list",
        "x-operation-request-parameters-name": "ListEventStreamDeliveriesRequestParameters",
        "x-operation-group": [
          "eventStreams",
          "deliveries"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:event_streams",
              "read:event_deliveries"
            ]
          }
        ]
      }
    },
    "/event-streams/{id}/deliveries/{event_id}": {
      "get": {
        "summary": "Get a specific event's delivery history",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "Unique identifier for the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delivery history for event successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventStreamDeliveryHistoryResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:event_deliveries."
          },
          "404": {
            "description": "The event stream does not exist.",
            "x-description-1": "The event does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_deliveries_by_event_id",
        "x-operation-name": "getHistory",
        "x-operation-group": [
          "eventStreams",
          "deliveries"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:event_deliveries"
            ]
          }
        ]
      }
    },
    "/event-streams/{id}/redeliver": {
      "post": {
        "summary": "Redeliver failed events",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventStreamRedeliveryRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventStreamRedeliveryRequestContent"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Redelivery request accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEventStreamRedeliveryResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:event_deliveries."
          },
          "404": {
            "description": "The event stream does not exist."
          },
          "409": {
            "description": "One or more events is not in a state that allows redelivery."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_redeliver",
        "x-operation-name": "create",
        "x-operation-group": [
          "eventStreams",
          "redeliveries"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:event_deliveries"
            ]
          }
        ]
      }
    },
    "/event-streams/{id}/redeliver/{event_id}": {
      "post": {
        "summary": "Redeliver a single failed event by ID",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "Unique identifier for the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Redelivery request accepted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:event_deliveries."
          },
          "404": {
            "description": "The event stream does not exist.",
            "x-description-1": "The event does not exist."
          },
          "409": {
            "description": "The event is not in a state that allows redelivery."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_redeliver_by_event_id",
        "x-operation-name": "createById",
        "x-operation-group": [
          "eventStreams",
          "redeliveries"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:event_deliveries"
            ]
          }
        ]
      }
    },
    "/event-streams/{id}/stats": {
      "get": {
        "summary": "Get stats for an event stream",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "description": "The RFC3339 start date for the stats query.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "The RFC3339 end date for the stats query.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event stream stats successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventStreamStatsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:event_deliveries."
          },
          "404": {
            "description": "The event stream does not exist."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_stats",
        "x-operation-name": "get",
        "x-operation-group": "eventStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:event_deliveries"
            ]
          }
        ]
      }
    },
    "/event-streams/{id}/test": {
      "post": {
        "summary": "Send a test event to an event stream",
        "tags": [
          "event-streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the event stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventStreamTestEventRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventStreamTestEventRequestContent"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Test event successfully submitted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEventStreamTestEventResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:event_streams."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_test_event",
        "x-operation-name": "createTestEvent",
        "x-operation-group": "eventStreams",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:event_streams"
            ]
          }
        ]
      }
    },
    "/flows": {
      "get": {
        "summary": "Get flows",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "hydration param",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 50,
                "enum": [
                  "form_count"
                ]
              }
            }
          },
          {
            "name": "synchronous",
            "in": "query",
            "description": "flag to filter by sync/async flows",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flows successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "name",
                          "created_at",
                          "updated_at"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "maxLength": 30,
                            "format": "flow-id"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 150
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "executed_at": {
                            "type": "string",
                            "format": "date"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "flows": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "name",
                              "created_at",
                              "updated_at"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "maxLength": 30,
                                "format": "flow-id"
                              },
                              "name": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "created_at": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updated_at": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "executed_at": {
                                "type": "string",
                                "format": "date"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:flows."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_flows",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:flows"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a flow",
        "tags": [
          "flows"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "actions": {
                    "type": "array",
                    "items": {}
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "actions": {
                    "type": "array",
                    "items": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Flow successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 30,
                      "format": "flow-id"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "actions": {
                      "type": "array",
                      "items": {}
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "executed_at": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:flows."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_flows",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:flows"
            ]
          }
        ]
      }
    },
    "/flows/vault/connections": {
      "get": {
        "summary": "Get Flows Vault connection list",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vault connections successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "app_id",
                          "name",
                          "ready",
                          "created_at",
                          "updated_at",
                          "fingerprint"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Flows Vault Connection identifier.",
                            "maxLength": 30,
                            "format": "flows-vault-connections-id"
                          },
                          "app_id": {
                            "type": "string",
                            "description": "Flows Vault Connection app identifier.",
                            "minLength": 1,
                            "maxLength": 55
                          },
                          "name": {
                            "type": "string",
                            "description": "Flows Vault Connection name.",
                            "minLength": 1,
                            "maxLength": 150
                          },
                          "account_name": {
                            "type": "string",
                            "description": "Flows Vault Connection custom account name.",
                            "minLength": 1,
                            "maxLength": 150
                          },
                          "ready": {
                            "type": "boolean",
                            "description": "Whether the Flows Vault Connection is configured."
                          },
                          "created_at": {
                            "type": "string",
                            "description": "The ISO 8601 formatted date when this Flows Vault Connection was created.",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "The ISO 8601 formatted date when this Flows Vault Connection was updated.",
                            "format": "date-time"
                          },
                          "refreshed_at": {
                            "type": "string",
                            "description": "The ISO 8601 formatted date when this Flows Vault Connection was refreshed.",
                            "format": "date-time"
                          },
                          "fingerprint": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "connections": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "app_id",
                              "name",
                              "ready",
                              "created_at",
                              "updated_at",
                              "fingerprint"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Flows Vault Connection identifier.",
                                "maxLength": 30,
                                "format": "flows-vault-connections-id"
                              },
                              "app_id": {
                                "type": "string",
                                "description": "Flows Vault Connection app identifier.",
                                "minLength": 1,
                                "maxLength": 55
                              },
                              "name": {
                                "type": "string",
                                "description": "Flows Vault Connection name.",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "account_name": {
                                "type": "string",
                                "description": "Flows Vault Connection custom account name.",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "ready": {
                                "type": "boolean",
                                "description": "Whether the Flows Vault Connection is configured."
                              },
                              "created_at": {
                                "type": "string",
                                "description": "The ISO 8601 formatted date when this Flows Vault Connection was created.",
                                "format": "date-time"
                              },
                              "updated_at": {
                                "type": "string",
                                "description": "The ISO 8601 formatted date when this Flows Vault Connection was updated.",
                                "format": "date-time"
                              },
                              "refreshed_at": {
                                "type": "string",
                                "description": "The ISO 8601 formatted date when this Flows Vault Connection was refreshed.",
                                "format": "date-time"
                              },
                              "fingerprint": {
                                "type": "string",
                                "minLength": 1
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:flows_vault_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_flows_vault_connections",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:flows_vault_connections"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a Flows Vault connection",
        "tags": [
          "flows"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "ACTIVECAMPAIGN"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "base_url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "AIRTABLE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "AUTH0"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "client_id",
                          "client_secret",
                          "domain"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_APP"
                            ]
                          },
                          "client_id": {
                            "type": "string"
                          },
                          "client_secret": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string",
                            "format": "hostname-rfc2181"
                          },
                          "audience": {
                            "type": "string",
                            "minLength": 1,
                            "format": "forms-url-https"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "BIGQUERY"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_JWT"
                            ]
                          },
                          "project_id": {
                            "type": "string"
                          },
                          "private_key": {
                            "type": "string"
                          },
                          "client_email": {
                            "type": "string",
                            "format": "email"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "CLEARBIT"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "DOCUSIGN"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "GOOGLE_SHEETS"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "HTTP"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "BEARER"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "HUBSPOT"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "api_key"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "API_KEY"
                                ]
                              },
                              "api_key": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "JWT"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                          "type",
                          "algorithm"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "JWT"
                            ]
                          },
                          "algorithm": {
                            "type": "string",
                            "enum": [
                              "HS256",
                              "HS384",
                              "HS512",
                              "RS256",
                              "RS384",
                              "RS512",
                              "ES256",
                              "ES384",
                              "ES512",
                              "PS256",
                              "PS384",
                              "PS512"
                            ]
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "MAILCHIMP"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "secret_key"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "API_KEY"
                                ]
                              },
                              "secret_key": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "MAILJET"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "PIPEDRIVE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "token"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "TOKEN"
                                ]
                              },
                              "token": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "SALESFORCE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "SENDGRID"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "SLACK"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "url"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "WEBHOOK"
                                ]
                              },
                              "url": {
                                "type": "string",
                                "format": "forms-url-https"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "STRIPE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "private_key",
                              "public_key"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "KEY_PAIR"
                                ]
                              },
                              "private_key": {
                                "type": "string"
                              },
                              "public_key": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              },
                              "environment": {
                                "type": "string",
                                "enum": [
                                  "live",
                                  "test"
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "TELEGRAM"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "TWILIO"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "account_id",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "account_id": {
                            "type": "string"
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "WHATSAPP"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "ZAPIER"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "url"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "WEBHOOK"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "ACTIVECAMPAIGN"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "base_url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "AIRTABLE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "AUTH0"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "client_id",
                          "client_secret",
                          "domain"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_APP"
                            ]
                          },
                          "client_id": {
                            "type": "string"
                          },
                          "client_secret": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string",
                            "format": "hostname-rfc2181"
                          },
                          "audience": {
                            "type": "string",
                            "minLength": 1,
                            "format": "forms-url-https"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "BIGQUERY"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_JWT"
                            ]
                          },
                          "project_id": {
                            "type": "string"
                          },
                          "private_key": {
                            "type": "string"
                          },
                          "client_email": {
                            "type": "string",
                            "format": "email"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "CLEARBIT"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "DOCUSIGN"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "GOOGLE_SHEETS"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "HTTP"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "BEARER"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "HUBSPOT"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "api_key"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "API_KEY"
                                ]
                              },
                              "api_key": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "JWT"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                          "type",
                          "algorithm"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "JWT"
                            ]
                          },
                          "algorithm": {
                            "type": "string",
                            "enum": [
                              "HS256",
                              "HS384",
                              "HS512",
                              "RS256",
                              "RS384",
                              "RS512",
                              "ES256",
                              "ES384",
                              "ES512",
                              "PS256",
                              "PS384",
                              "PS512"
                            ]
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "MAILCHIMP"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "secret_key"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "API_KEY"
                                ]
                              },
                              "secret_key": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "MAILJET"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "PIPEDRIVE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "token"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "TOKEN"
                                ]
                              },
                              "token": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "SALESFORCE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "SENDGRID"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "SLACK"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "url"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "WEBHOOK"
                                ]
                              },
                              "url": {
                                "type": "string",
                                "format": "forms-url-https"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "STRIPE"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "type",
                              "private_key",
                              "public_key"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "KEY_PAIR"
                                ]
                              },
                              "private_key": {
                                "type": "string"
                              },
                              "public_key": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "OAUTH_CODE"
                                ]
                              },
                              "code": {
                                "type": "string"
                              },
                              "environment": {
                                "type": "string",
                                "enum": [
                                  "live",
                                  "test"
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "TELEGRAM"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "TWILIO"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "account_id",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "account_id": {
                            "type": "string"
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "WHATSAPP"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "app_id": {
                        "type": "string",
                        "enum": [
                          "ZAPIER"
                        ]
                      },
                      "setup": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "url"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "WEBHOOK"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Connection successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "app_id",
                    "name",
                    "ready",
                    "created_at",
                    "updated_at",
                    "fingerprint"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Flows Vault Connection identifier.",
                      "maxLength": 30,
                      "format": "flows-vault-connections-id"
                    },
                    "app_id": {
                      "type": "string",
                      "description": "Flows Vault Connection app identifier.",
                      "minLength": 1,
                      "maxLength": 55
                    },
                    "environment": {
                      "type": "string",
                      "description": "Flows Vault Connection environment.",
                      "minLength": 1,
                      "maxLength": 55
                    },
                    "name": {
                      "type": "string",
                      "description": "Flows Vault Connection name.",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "account_name": {
                      "type": "string",
                      "description": "Flows Vault Connection custom account name.",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "Whether the Flows Vault Connection is configured."
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was created.",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was updated.",
                      "format": "date-time"
                    },
                    "refreshed_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was refreshed.",
                      "format": "date-time"
                    },
                    "fingerprint": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:flows_vault_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_flows_vault_connections",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:flows_vault_connections"
            ]
          }
        ]
      }
    },
    "/flows/vault/connections/{id}": {
      "get": {
        "summary": "Get a Flows Vault connection",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flows Vault connection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow vault connection successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "app_id",
                    "name",
                    "ready",
                    "created_at",
                    "updated_at",
                    "fingerprint"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Flows Vault Connection identifier.",
                      "maxLength": 30,
                      "format": "flows-vault-connections-id"
                    },
                    "app_id": {
                      "type": "string",
                      "description": "Flows Vault Connection app identifier.",
                      "minLength": 1,
                      "maxLength": 55
                    },
                    "environment": {
                      "type": "string",
                      "description": "Flows Vault Connection environment.",
                      "minLength": 1,
                      "maxLength": 55
                    },
                    "name": {
                      "type": "string",
                      "description": "Flows Vault Connection name.",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "account_name": {
                      "type": "string",
                      "description": "Flows Vault Connection custom account name.",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "Whether the Flows Vault Connection is configured."
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was created.",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was updated.",
                      "format": "date-time"
                    },
                    "refreshed_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was refreshed.",
                      "format": "date-time"
                    },
                    "fingerprint": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:flows_vault_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_flows_vault_connections_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:flows_vault_connections"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a Flows Vault connection",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Vault connection id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Connection successfully deleted."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:flows_vault_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_flows_vault_connections_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:flows_vault_connections"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a Flows Vault connection",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flows Vault connection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Flows Vault Connection name.",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "setup": {
                    "type": "object",
                    "description": "Flows Vault Connection configuration.",
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "base_url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "client_id",
                          "client_secret",
                          "domain"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_APP"
                            ]
                          },
                          "client_id": {
                            "type": "string"
                          },
                          "client_secret": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string",
                            "format": "hostname-rfc2181"
                          },
                          "audience": {
                            "type": "string",
                            "minLength": 1,
                            "format": "forms-url-https"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_JWT"
                            ]
                          },
                          "project_id": {
                            "type": "string"
                          },
                          "private_key": {
                            "type": "string"
                          },
                          "client_email": {
                            "type": "string",
                            "format": "email"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "BEARER"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                          "type",
                          "algorithm"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "JWT"
                            ]
                          },
                          "algorithm": {
                            "type": "string",
                            "enum": [
                              "HS256",
                              "HS384",
                              "HS512",
                              "RS256",
                              "RS384",
                              "RS512",
                              "ES256",
                              "ES384",
                              "ES512",
                              "PS256",
                              "PS384",
                              "PS512"
                            ]
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "url"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "WEBHOOK"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "private_key",
                          "public_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "KEY_PAIR"
                            ]
                          },
                          "private_key": {
                            "type": "string"
                          },
                          "public_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          },
                          "environment": {
                            "type": "string",
                            "enum": [
                              "live",
                              "test"
                            ]
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "account_id",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "account_id": {
                            "type": "string"
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "url"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "WEBHOOK"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Flows Vault Connection name.",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "setup": {
                    "type": "object",
                    "description": "Flows Vault Connection configuration.",
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "base_url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "client_id",
                          "client_secret",
                          "domain"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_APP"
                            ]
                          },
                          "client_id": {
                            "type": "string"
                          },
                          "client_secret": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string",
                            "format": "hostname-rfc2181"
                          },
                          "audience": {
                            "type": "string",
                            "minLength": 1,
                            "format": "forms-url-https"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_JWT"
                            ]
                          },
                          "project_id": {
                            "type": "string"
                          },
                          "private_key": {
                            "type": "string"
                          },
                          "client_email": {
                            "type": "string",
                            "format": "email"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "BEARER"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                          "type",
                          "algorithm"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "JWT"
                            ]
                          },
                          "algorithm": {
                            "type": "string",
                            "enum": [
                              "HS256",
                              "HS384",
                              "HS512",
                              "RS256",
                              "RS384",
                              "RS512",
                              "ES256",
                              "ES384",
                              "ES512",
                              "PS256",
                              "PS384",
                              "PS512"
                            ]
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key",
                          "secret_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "secret_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "url"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "WEBHOOK"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "private_key",
                          "public_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "KEY_PAIR"
                            ]
                          },
                          "private_key": {
                            "type": "string"
                          },
                          "public_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "OAUTH_CODE"
                            ]
                          },
                          "code": {
                            "type": "string"
                          },
                          "environment": {
                            "type": "string",
                            "enum": [
                              "live",
                              "test"
                            ]
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "account_id",
                          "api_key"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "API_KEY"
                            ]
                          },
                          "account_id": {
                            "type": "string"
                          },
                          "api_key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "TOKEN"
                            ]
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "url"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "WEBHOOK"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "format": "forms-url-https"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Flow vault connection successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "app_id",
                    "name",
                    "ready",
                    "created_at",
                    "updated_at",
                    "fingerprint"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Flows Vault Connection identifier.",
                      "maxLength": 30,
                      "format": "flows-vault-connections-id"
                    },
                    "app_id": {
                      "type": "string",
                      "description": "Flows Vault Connection app identifier.",
                      "minLength": 1,
                      "maxLength": 55
                    },
                    "environment": {
                      "type": "string",
                      "description": "Flows Vault Connection environment.",
                      "minLength": 1,
                      "maxLength": 55
                    },
                    "name": {
                      "type": "string",
                      "description": "Flows Vault Connection name.",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "account_name": {
                      "type": "string",
                      "description": "Flows Vault Connection custom account name.",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "Whether the Flows Vault Connection is configured."
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was created.",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was updated.",
                      "format": "date-time"
                    },
                    "refreshed_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this Flows Vault Connection was refreshed.",
                      "format": "date-time"
                    },
                    "fingerprint": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:flows_vault_connections."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_flows_vault_connections_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:flows_vault_connections"
            ]
          }
        ]
      }
    },
    "/flows/{flow_id}/executions": {
      "get": {
        "summary": "Get flow executions",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Optional Id from which to start selection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow executions successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "trace_id",
                          "status",
                          "created_at",
                          "updated_at"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Flow execution identifier",
                            "maxLength": 30,
                            "format": "flow-execution-id"
                          },
                          "trace_id": {
                            "type": "string",
                            "description": "Trace id",
                            "minLength": 1,
                            "maxLength": 50
                          },
                          "journey_id": {
                            "type": "string",
                            "description": "Journey id",
                            "minLength": 1,
                            "maxLength": 50
                          },
                          "status": {
                            "type": "string",
                            "description": "Execution status",
                            "minLength": 1,
                            "maxLength": 50
                          },
                          "created_at": {
                            "type": "string",
                            "description": "The ISO 8601 formatted date when this flow execution was created.",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "The ISO 8601 formatted date when this flow execution was updated.",
                            "format": "date-time"
                          },
                          "started_at": {
                            "type": "string",
                            "description": "The ISO 8601 formatted date when this flow execution started.",
                            "format": "date-time"
                          },
                          "ended_at": {
                            "type": "string",
                            "description": "The ISO 8601 formatted date when this flow execution ended.",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "executions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "trace_id",
                              "status",
                              "created_at",
                              "updated_at"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Flow execution identifier",
                                "maxLength": 30,
                                "format": "flow-execution-id"
                              },
                              "trace_id": {
                                "type": "string",
                                "description": "Trace id",
                                "minLength": 1,
                                "maxLength": 50
                              },
                              "journey_id": {
                                "type": "string",
                                "description": "Journey id",
                                "minLength": 1,
                                "maxLength": 50
                              },
                              "status": {
                                "type": "string",
                                "description": "Execution status",
                                "minLength": 1,
                                "maxLength": 50
                              },
                              "created_at": {
                                "type": "string",
                                "description": "The ISO 8601 formatted date when this flow execution was created.",
                                "format": "date-time"
                              },
                              "updated_at": {
                                "type": "string",
                                "description": "The ISO 8601 formatted date when this flow execution was updated.",
                                "format": "date-time"
                              },
                              "started_at": {
                                "type": "string",
                                "description": "The ISO 8601 formatted date when this flow execution started.",
                                "format": "date-time"
                              },
                              "ended_at": {
                                "type": "string",
                                "description": "The ISO 8601 formatted date when this flow execution ended.",
                                "format": "date-time"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:flows_executions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_flows_executions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:flows_executions"
            ]
          }
        ]
      }
    },
    "/flows/{flow_id}/executions/{execution_id}": {
      "get": {
        "summary": "Get a flow execution",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "execution_id",
            "in": "path",
            "description": "Flow execution id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Hydration param",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 5,
                "enum": [
                  "debug"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow execution successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "trace_id",
                    "status",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Flow execution identifier",
                      "maxLength": 30,
                      "format": "flow-execution-id"
                    },
                    "trace_id": {
                      "type": "string",
                      "description": "Trace id",
                      "minLength": 1,
                      "maxLength": 50
                    },
                    "journey_id": {
                      "type": "string",
                      "description": "Journey id",
                      "minLength": 1,
                      "maxLength": 50
                    },
                    "status": {
                      "type": "string",
                      "description": "Execution status",
                      "minLength": 1,
                      "maxLength": 50
                    },
                    "debug": {
                      "type": "object",
                      "description": "Flow execution debug.",
                      "additionalProperties": true
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this flow execution was created.",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this flow execution was updated.",
                      "format": "date-time"
                    },
                    "started_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this flow execution started.",
                      "format": "date-time"
                    },
                    "ended_at": {
                      "type": "string",
                      "description": "The ISO 8601 formatted date when this flow execution ended.",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:flows_executions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_flows_executions_by_execution_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:flows_executions"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a flow execution",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flows id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "execution_id",
            "in": "path",
            "description": "Flow execution identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Flow execution successfully deleted."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:flows_executions."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_flows_executions_by_execution_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:flows_executions"
            ]
          }
        ]
      }
    },
    "/flows/{id}": {
      "get": {
        "summary": "Get a flow",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "hydration param",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 50,
                "enum": [
                  "form_count",
                  "forms"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 30,
                      "format": "flow-id"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "actions": {
                      "type": "array",
                      "items": {}
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "executed_at": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:flows."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_flows_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:flows"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a flow",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Flow successfully deleted."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:flows."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_flows_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:flows"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a flow",
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "actions": {
                    "type": "array",
                    "items": {}
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "actions": {
                    "type": "array",
                    "items": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Flow successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 30,
                      "format": "flow-id"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "actions": {
                      "type": "array",
                      "items": {}
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "executed_at": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:flows."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_flows_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:flows"
            ]
          }
        ]
      }
    },
    "/forms": {
      "get": {
        "summary": "Get forms",
        "tags": [
          "forms"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page. Defaults to 50.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "hydration param",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 50,
                "enum": [
                  "flow_count",
                  "links"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Forms successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "name",
                          "created_at",
                          "updated_at"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "maxLength": 30,
                            "format": "form-id"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 150
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "embedded_at": {
                            "type": "string",
                            "format": "date"
                          },
                          "submitted_at": {
                            "type": "string",
                            "format": "date"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "forms": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "name",
                              "created_at",
                              "updated_at"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "maxLength": 30,
                                "format": "form-id"
                              },
                              "name": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "created_at": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updated_at": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "embedded_at": {
                                "type": "string",
                                "format": "date"
                              },
                              "submitted_at": {
                                "type": "string",
                                "format": "date"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause.",
            "x-description-1": "Invalid query string paging options. The message will vary depending on the cause"
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:forms."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_forms",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:forms"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a form",
        "tags": [
          "forms"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "messages": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "errors": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "custom": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  },
                  "languages": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "primary": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      },
                      "default": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      }
                    }
                  },
                  "translations": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "nodes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "anyOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type",
                            "config"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "FLOW"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "flow_id"
                              ],
                              "properties": {
                                "flow_id": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "format": "flow-id"
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "ROUTER"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "rules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "condition"
                                    ],
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      "alias": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 150
                                      },
                                      "condition": {},
                                      "next_node": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "format": "forms-custom-identifier"
                                          },
                                          {
                                            "type": "string",
                                            "enum": [
                                              "$ending"
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "fallback": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "STEP"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "components": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DIVIDER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 50
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "HTML"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "IMAGE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "src"
                                                ],
                                                "properties": {
                                                  "src": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "position": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "height": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "JUMP_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text",
                                                  "next_node"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  },
                                                  "next_node": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "format": "forms-custom-identifier"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "$ending"
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "style": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "background_color": {
                                                        "type": "string",
                                                        "format": "forms-hex-color"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RESEND_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "active_text",
                                                  "button_text",
                                                  "waiting_text",
                                                  "flow_id"
                                                ],
                                                "properties": {
                                                  "active_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "button_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "waiting_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "text_alignment": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "flow_id": {
                                                    "type": "string",
                                                    "maxLength": 30,
                                                    "format": "flow-id"
                                                  },
                                                  "max_attempts": {
                                                    "type": "number"
                                                  },
                                                  "waiting_time": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NEXT_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PREVIOUS_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RICH_TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "AUTH0_VERIFIABLE_CREDENTIALS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "url",
                                                  "alternate_text",
                                                  "access_token",
                                                  "verification_id"
                                                ],
                                                "properties": {
                                                  "url": {
                                                    "type": "string",
                                                    "maxLength": 2000
                                                  },
                                                  "size": {
                                                    "type": "number"
                                                  },
                                                  "alternate_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "access_token": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 5000
                                                  },
                                                  "verification_id": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "max_wait": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "GMAPS_ADDRESS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "api_key"
                                                ],
                                                "properties": {
                                                  "api_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RECAPTCHA"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "site_key",
                                                  "secret_key"
                                                ],
                                                "properties": {
                                                  "site_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "secret_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "BOOLEAN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "boolean"
                                                  },
                                                  "options": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "true": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      },
                                                      "false": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CARDS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CHOICE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CUSTOM"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "schema",
                                                  "code"
                                                ],
                                                "properties": {
                                                  "schema": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "code": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "css": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "params": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DATE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DROPDOWN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "EMAIL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "FILE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "multiple": {
                                                    "type": "boolean"
                                                  },
                                                  "storage": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "categories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "enum": [
                                                        "AUDIO",
                                                        "VIDEO",
                                                        "IMAGE",
                                                        "DOCUMENT",
                                                        "ARCHIVE"
                                                      ]
                                                    }
                                                  },
                                                  "extensions": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "maxLength": 50,
                                                      "format": "forms-file-extension"
                                                    }
                                                  },
                                                  "maxSize": {
                                                    "type": "integer"
                                                  },
                                                  "maxFiles": {
                                                    "type": "integer"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "LEGAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NUMBER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "number"
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  },
                                                  "min_value": {
                                                    "type": "number"
                                                  },
                                                  "max_value": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PASSWORD"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "hash": {
                                                    "type": "string",
                                                    "enum": [
                                                      "NONE",
                                                      "MD5",
                                                      "SHA1",
                                                      "SHA256",
                                                      "SHA512"
                                                    ]
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "min_length": {
                                                    "type": "integer"
                                                  },
                                                  "max_length": {
                                                    "type": "integer"
                                                  },
                                                  "complexity": {
                                                    "type": "boolean"
                                                  },
                                                  "nist": {
                                                    "type": "boolean"
                                                  },
                                                  "strength_meter": {
                                                    "type": "boolean"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PAYMENT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "charge",
                                                  "credentials"
                                                ],
                                                "properties": {
                                                  "provider": {
                                                    "type": "string",
                                                    "enum": [
                                                      "STRIPE"
                                                    ]
                                                  },
                                                  "charge": {
                                                    "type": "object",
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "one_off"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "ONE_OFF"
                                                            ]
                                                          },
                                                          "one_off": {
                                                            "type": "object",
                                                            "additionalProperties": true,
                                                            "required": [
                                                              "amount",
                                                              "currency"
                                                            ],
                                                            "properties": {
                                                              "amount": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "string",
                                                                    "minLength": 1
                                                                  },
                                                                  {
                                                                    "type": "number"
                                                                  }
                                                                ]
                                                              },
                                                              "currency": {
                                                                "type": "string",
                                                                "enum": [
                                                                  "AUD",
                                                                  "CAD",
                                                                  "CHF",
                                                                  "EUR",
                                                                  "GBP",
                                                                  "INR",
                                                                  "MXN",
                                                                  "SEK",
                                                                  "USD"
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "subscription"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "SUBSCRIPTION"
                                                            ]
                                                          },
                                                          "subscription": {
                                                            "type": "object",
                                                            "additionalProperties": true
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "credentials": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "required": [
                                                      "public_key",
                                                      "private_key"
                                                    ],
                                                    "properties": {
                                                      "public_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      },
                                                      "private_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      }
                                                    }
                                                  },
                                                  "customer": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "fields": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "card_number": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "expiration_date": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "security_code": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "trustmarks": {
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "SOCIAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {}
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "URL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "start": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "hidden_fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 500
                            }
                          }
                        }
                      },
                      "next_node": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "forms-custom-identifier"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "$ending"
                            ]
                          }
                        ]
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  },
                  "ending": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "redirection": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "delay": {
                            "type": "integer"
                          },
                          "target": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1024
                          }
                        }
                      },
                      "after_submit": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "flow_id": {
                            "type": "string",
                            "maxLength": 30,
                            "format": "flow-id"
                          }
                        }
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      },
                      "resume_flow": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  },
                  "style": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "css": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 5000
                      }
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "messages": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "errors": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "custom": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  },
                  "languages": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "primary": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      },
                      "default": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      }
                    }
                  },
                  "translations": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "nodes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "anyOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type",
                            "config"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "FLOW"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "flow_id"
                              ],
                              "properties": {
                                "flow_id": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "format": "flow-id"
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "ROUTER"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "rules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "condition"
                                    ],
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      "alias": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 150
                                      },
                                      "condition": {},
                                      "next_node": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "format": "forms-custom-identifier"
                                          },
                                          {
                                            "type": "string",
                                            "enum": [
                                              "$ending"
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "fallback": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "STEP"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "components": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DIVIDER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 50
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "HTML"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "IMAGE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "src"
                                                ],
                                                "properties": {
                                                  "src": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "position": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "height": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "JUMP_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text",
                                                  "next_node"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  },
                                                  "next_node": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "format": "forms-custom-identifier"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "$ending"
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "style": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "background_color": {
                                                        "type": "string",
                                                        "format": "forms-hex-color"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RESEND_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "active_text",
                                                  "button_text",
                                                  "waiting_text",
                                                  "flow_id"
                                                ],
                                                "properties": {
                                                  "active_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "button_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "waiting_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "text_alignment": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "flow_id": {
                                                    "type": "string",
                                                    "maxLength": 30,
                                                    "format": "flow-id"
                                                  },
                                                  "max_attempts": {
                                                    "type": "number"
                                                  },
                                                  "waiting_time": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NEXT_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PREVIOUS_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RICH_TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "AUTH0_VERIFIABLE_CREDENTIALS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "url",
                                                  "alternate_text",
                                                  "access_token",
                                                  "verification_id"
                                                ],
                                                "properties": {
                                                  "url": {
                                                    "type": "string",
                                                    "maxLength": 2000
                                                  },
                                                  "size": {
                                                    "type": "number"
                                                  },
                                                  "alternate_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "access_token": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 5000
                                                  },
                                                  "verification_id": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "max_wait": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "GMAPS_ADDRESS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "api_key"
                                                ],
                                                "properties": {
                                                  "api_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RECAPTCHA"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "site_key",
                                                  "secret_key"
                                                ],
                                                "properties": {
                                                  "site_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "secret_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "BOOLEAN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "boolean"
                                                  },
                                                  "options": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "true": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      },
                                                      "false": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CARDS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CHOICE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CUSTOM"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "schema",
                                                  "code"
                                                ],
                                                "properties": {
                                                  "schema": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "code": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "css": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "params": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DATE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DROPDOWN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "EMAIL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "FILE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "multiple": {
                                                    "type": "boolean"
                                                  },
                                                  "storage": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "categories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "enum": [
                                                        "AUDIO",
                                                        "VIDEO",
                                                        "IMAGE",
                                                        "DOCUMENT",
                                                        "ARCHIVE"
                                                      ]
                                                    }
                                                  },
                                                  "extensions": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "maxLength": 50,
                                                      "format": "forms-file-extension"
                                                    }
                                                  },
                                                  "maxSize": {
                                                    "type": "integer"
                                                  },
                                                  "maxFiles": {
                                                    "type": "integer"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "LEGAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NUMBER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "number"
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  },
                                                  "min_value": {
                                                    "type": "number"
                                                  },
                                                  "max_value": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PASSWORD"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "hash": {
                                                    "type": "string",
                                                    "enum": [
                                                      "NONE",
                                                      "MD5",
                                                      "SHA1",
                                                      "SHA256",
                                                      "SHA512"
                                                    ]
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "min_length": {
                                                    "type": "integer"
                                                  },
                                                  "max_length": {
                                                    "type": "integer"
                                                  },
                                                  "complexity": {
                                                    "type": "boolean"
                                                  },
                                                  "nist": {
                                                    "type": "boolean"
                                                  },
                                                  "strength_meter": {
                                                    "type": "boolean"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PAYMENT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "charge",
                                                  "credentials"
                                                ],
                                                "properties": {
                                                  "provider": {
                                                    "type": "string",
                                                    "enum": [
                                                      "STRIPE"
                                                    ]
                                                  },
                                                  "charge": {
                                                    "type": "object",
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "one_off"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "ONE_OFF"
                                                            ]
                                                          },
                                                          "one_off": {
                                                            "type": "object",
                                                            "additionalProperties": true,
                                                            "required": [
                                                              "amount",
                                                              "currency"
                                                            ],
                                                            "properties": {
                                                              "amount": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "string",
                                                                    "minLength": 1
                                                                  },
                                                                  {
                                                                    "type": "number"
                                                                  }
                                                                ]
                                                              },
                                                              "currency": {
                                                                "type": "string",
                                                                "enum": [
                                                                  "AUD",
                                                                  "CAD",
                                                                  "CHF",
                                                                  "EUR",
                                                                  "GBP",
                                                                  "INR",
                                                                  "MXN",
                                                                  "SEK",
                                                                  "USD"
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "subscription"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "SUBSCRIPTION"
                                                            ]
                                                          },
                                                          "subscription": {
                                                            "type": "object",
                                                            "additionalProperties": true
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "credentials": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "required": [
                                                      "public_key",
                                                      "private_key"
                                                    ],
                                                    "properties": {
                                                      "public_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      },
                                                      "private_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      }
                                                    }
                                                  },
                                                  "customer": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "fields": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "card_number": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "expiration_date": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "security_code": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "trustmarks": {
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "SOCIAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {}
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "URL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "start": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "hidden_fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 500
                            }
                          }
                        }
                      },
                      "next_node": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "forms-custom-identifier"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "$ending"
                            ]
                          }
                        ]
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  },
                  "ending": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "redirection": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "delay": {
                            "type": "integer"
                          },
                          "target": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1024
                          }
                        }
                      },
                      "after_submit": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "flow_id": {
                            "type": "string",
                            "maxLength": 30,
                            "format": "flow-id"
                          }
                        }
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      },
                      "resume_flow": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  },
                  "style": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "css": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 5000
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Form successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 30,
                      "format": "form-id"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "messages": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "errors": {
                          "type": "object",
                          "additionalProperties": true
                        },
                        "custom": {
                          "type": "object",
                          "additionalProperties": true
                        }
                      }
                    },
                    "languages": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "primary": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 55
                        },
                        "default": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 55
                        }
                      }
                    },
                    "translations": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "nodes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type",
                              "config"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "FLOW"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "flow_id"
                                ],
                                "properties": {
                                  "flow_id": {
                                    "type": "string",
                                    "maxLength": 30,
                                    "format": "flow-id"
                                  },
                                  "next_node": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "ROUTER"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "rules": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "required": [
                                        "id",
                                        "condition"
                                      ],
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "format": "forms-custom-identifier"
                                        },
                                        "alias": {
                                          "type": "string",
                                          "minLength": 1,
                                          "maxLength": 150
                                        },
                                        "condition": {},
                                        "next_node": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "format": "forms-custom-identifier"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "$ending"
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  "fallback": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "STEP"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "components": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DIVIDER"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 50
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "HTML"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "content": {
                                                      "type": "string",
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "IMAGE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "src"
                                                  ],
                                                  "properties": {
                                                    "src": {
                                                      "type": "string",
                                                      "maxLength": 500
                                                    },
                                                    "position": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LEFT",
                                                        "CENTER",
                                                        "RIGHT"
                                                      ]
                                                    },
                                                    "height": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "JUMP_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text",
                                                    "next_node"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    },
                                                    "next_node": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "format": "forms-custom-identifier"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "enum": [
                                                            "$ending"
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "style": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "background_color": {
                                                          "type": "string",
                                                          "format": "forms-hex-color"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RESEND_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "active_text",
                                                    "button_text",
                                                    "waiting_text",
                                                    "flow_id"
                                                  ],
                                                  "properties": {
                                                    "active_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "button_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "waiting_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "text_alignment": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LEFT",
                                                        "CENTER",
                                                        "RIGHT"
                                                      ]
                                                    },
                                                    "flow_id": {
                                                      "type": "string",
                                                      "maxLength": 30,
                                                      "format": "flow-id"
                                                    },
                                                    "max_attempts": {
                                                      "type": "number"
                                                    },
                                                    "waiting_time": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NEXT_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PREVIOUS_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RICH_TEXT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "content": {
                                                      "type": "string",
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AUTH0_VERIFIABLE_CREDENTIALS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "url",
                                                    "alternate_text",
                                                    "access_token",
                                                    "verification_id"
                                                  ],
                                                  "properties": {
                                                    "url": {
                                                      "type": "string",
                                                      "maxLength": 2000
                                                    },
                                                    "size": {
                                                      "type": "number"
                                                    },
                                                    "alternate_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "access_token": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 5000
                                                    },
                                                    "verification_id": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "max_wait": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "GMAPS_ADDRESS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "api_key"
                                                  ],
                                                  "properties": {
                                                    "api_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RECAPTCHA"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "site_key",
                                                    "secret_key"
                                                  ],
                                                  "properties": {
                                                    "site_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "secret_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "BOOLEAN"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "boolean"
                                                    },
                                                    "options": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "true": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 50
                                                        },
                                                        "false": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 50
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CARDS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CHOICE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CUSTOM"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "schema",
                                                    "code"
                                                  ],
                                                  "properties": {
                                                    "schema": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "code": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "css": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "params": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DATE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DROPDOWN"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "EMAIL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "FILE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "multiple": {
                                                      "type": "boolean"
                                                    },
                                                    "storage": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "categories": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "enum": [
                                                          "AUDIO",
                                                          "VIDEO",
                                                          "IMAGE",
                                                          "DOCUMENT",
                                                          "ARCHIVE"
                                                        ]
                                                      }
                                                    },
                                                    "extensions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "maxLength": 50,
                                                        "format": "forms-file-extension"
                                                      }
                                                    },
                                                    "maxSize": {
                                                      "type": "integer"
                                                    },
                                                    "maxFiles": {
                                                      "type": "integer"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "LEGAL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NUMBER"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "number"
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    },
                                                    "min_value": {
                                                      "type": "number"
                                                    },
                                                    "max_value": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PASSWORD"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "hash": {
                                                      "type": "string",
                                                      "enum": [
                                                        "NONE",
                                                        "MD5",
                                                        "SHA1",
                                                        "SHA256",
                                                        "SHA512"
                                                      ]
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "maxLength": 500
                                                    },
                                                    "min_length": {
                                                      "type": "integer"
                                                    },
                                                    "max_length": {
                                                      "type": "integer"
                                                    },
                                                    "complexity": {
                                                      "type": "boolean"
                                                    },
                                                    "nist": {
                                                      "type": "boolean"
                                                    },
                                                    "strength_meter": {
                                                      "type": "boolean"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PAYMENT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "charge",
                                                    "credentials"
                                                  ],
                                                  "properties": {
                                                    "provider": {
                                                      "type": "string",
                                                      "enum": [
                                                        "STRIPE"
                                                      ]
                                                    },
                                                    "charge": {
                                                      "type": "object",
                                                      "anyOf": [
                                                        {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "required": [
                                                            "type",
                                                            "one_off"
                                                          ],
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "ONE_OFF"
                                                              ]
                                                            },
                                                            "one_off": {
                                                              "type": "object",
                                                              "additionalProperties": true,
                                                              "required": [
                                                                "amount",
                                                                "currency"
                                                              ],
                                                              "properties": {
                                                                "amount": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "minLength": 1
                                                                    },
                                                                    {
                                                                      "type": "number"
                                                                    }
                                                                  ]
                                                                },
                                                                "currency": {
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "AUD",
                                                                    "CAD",
                                                                    "CHF",
                                                                    "EUR",
                                                                    "GBP",
                                                                    "INR",
                                                                    "MXN",
                                                                    "SEK",
                                                                    "USD"
                                                                  ]
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "required": [
                                                            "type",
                                                            "subscription"
                                                          ],
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "SUBSCRIPTION"
                                                              ]
                                                            },
                                                            "subscription": {
                                                              "type": "object",
                                                              "additionalProperties": true
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "credentials": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "required": [
                                                        "public_key",
                                                        "private_key"
                                                      ],
                                                      "properties": {
                                                        "public_key": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 250
                                                        },
                                                        "private_key": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 250
                                                        }
                                                      }
                                                    },
                                                    "customer": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "fields": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "card_number": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "expiration_date": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "security_code": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "trustmarks": {
                                                          "type": "boolean"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "SOCIAL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {}
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TEL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TEXT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "URL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "next_node": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "start": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "hidden_fields": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "value": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 500
                              }
                            }
                          }
                        },
                        "next_node": {
                          "anyOf": [
                            {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "$ending"
                              ]
                            }
                          ]
                        },
                        "coordinates": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "x",
                            "y"
                          ],
                          "properties": {
                            "x": {
                              "type": "integer"
                            },
                            "y": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "ending": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "redirection": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "target"
                          ],
                          "properties": {
                            "delay": {
                              "type": "integer"
                            },
                            "target": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1024
                            }
                          }
                        },
                        "after_submit": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "flow_id": {
                              "type": "string",
                              "maxLength": 30,
                              "format": "flow-id"
                            }
                          }
                        },
                        "coordinates": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "x",
                            "y"
                          ],
                          "properties": {
                            "x": {
                              "type": "integer"
                            },
                            "y": {
                              "type": "integer"
                            }
                          }
                        },
                        "resume_flow": {
                          "type": "boolean",
                          "enum": [
                            true
                          ]
                        }
                      }
                    },
                    "style": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "css": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 5000
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "embedded_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "submitted_at": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:forms."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_forms",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:forms"
            ]
          }
        ]
      }
    },
    "/forms/{id}": {
      "get": {
        "summary": "Get a form",
        "tags": [
          "forms"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Form identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "hydration param",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 50,
                "enum": [
                  "flow_count",
                  "links"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Form successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 30,
                      "format": "form-id"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "messages": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "errors": {
                          "type": "object",
                          "additionalProperties": true
                        },
                        "custom": {
                          "type": "object",
                          "additionalProperties": true
                        }
                      }
                    },
                    "languages": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "primary": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 55
                        },
                        "default": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 55
                        }
                      }
                    },
                    "translations": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "nodes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type",
                              "config"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "FLOW"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "flow_id"
                                ],
                                "properties": {
                                  "flow_id": {
                                    "type": "string",
                                    "maxLength": 30,
                                    "format": "flow-id"
                                  },
                                  "next_node": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "ROUTER"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "rules": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "required": [
                                        "id",
                                        "condition"
                                      ],
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "format": "forms-custom-identifier"
                                        },
                                        "alias": {
                                          "type": "string",
                                          "minLength": 1,
                                          "maxLength": 150
                                        },
                                        "condition": {},
                                        "next_node": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "format": "forms-custom-identifier"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "$ending"
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  "fallback": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "STEP"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "components": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DIVIDER"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 50
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "HTML"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "content": {
                                                      "type": "string",
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "IMAGE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "src"
                                                  ],
                                                  "properties": {
                                                    "src": {
                                                      "type": "string",
                                                      "maxLength": 500
                                                    },
                                                    "position": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LEFT",
                                                        "CENTER",
                                                        "RIGHT"
                                                      ]
                                                    },
                                                    "height": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "JUMP_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text",
                                                    "next_node"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    },
                                                    "next_node": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "format": "forms-custom-identifier"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "enum": [
                                                            "$ending"
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "style": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "background_color": {
                                                          "type": "string",
                                                          "format": "forms-hex-color"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RESEND_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "active_text",
                                                    "button_text",
                                                    "waiting_text",
                                                    "flow_id"
                                                  ],
                                                  "properties": {
                                                    "active_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "button_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "waiting_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "text_alignment": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LEFT",
                                                        "CENTER",
                                                        "RIGHT"
                                                      ]
                                                    },
                                                    "flow_id": {
                                                      "type": "string",
                                                      "maxLength": 30,
                                                      "format": "flow-id"
                                                    },
                                                    "max_attempts": {
                                                      "type": "number"
                                                    },
                                                    "waiting_time": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NEXT_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PREVIOUS_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RICH_TEXT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "content": {
                                                      "type": "string",
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AUTH0_VERIFIABLE_CREDENTIALS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "url",
                                                    "alternate_text",
                                                    "access_token",
                                                    "verification_id"
                                                  ],
                                                  "properties": {
                                                    "url": {
                                                      "type": "string",
                                                      "maxLength": 2000
                                                    },
                                                    "size": {
                                                      "type": "number"
                                                    },
                                                    "alternate_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "access_token": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 5000
                                                    },
                                                    "verification_id": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "max_wait": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "GMAPS_ADDRESS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "api_key"
                                                  ],
                                                  "properties": {
                                                    "api_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RECAPTCHA"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "site_key",
                                                    "secret_key"
                                                  ],
                                                  "properties": {
                                                    "site_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "secret_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "BOOLEAN"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "boolean"
                                                    },
                                                    "options": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "true": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 50
                                                        },
                                                        "false": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 50
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CARDS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CHOICE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CUSTOM"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "schema",
                                                    "code"
                                                  ],
                                                  "properties": {
                                                    "schema": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "code": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "css": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "params": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DATE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DROPDOWN"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "EMAIL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "FILE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "multiple": {
                                                      "type": "boolean"
                                                    },
                                                    "storage": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "categories": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "enum": [
                                                          "AUDIO",
                                                          "VIDEO",
                                                          "IMAGE",
                                                          "DOCUMENT",
                                                          "ARCHIVE"
                                                        ]
                                                      }
                                                    },
                                                    "extensions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "maxLength": 50,
                                                        "format": "forms-file-extension"
                                                      }
                                                    },
                                                    "maxSize": {
                                                      "type": "integer"
                                                    },
                                                    "maxFiles": {
                                                      "type": "integer"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "LEGAL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NUMBER"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "number"
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    },
                                                    "min_value": {
                                                      "type": "number"
                                                    },
                                                    "max_value": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PASSWORD"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "hash": {
                                                      "type": "string",
                                                      "enum": [
                                                        "NONE",
                                                        "MD5",
                                                        "SHA1",
                                                        "SHA256",
                                                        "SHA512"
                                                      ]
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "maxLength": 500
                                                    },
                                                    "min_length": {
                                                      "type": "integer"
                                                    },
                                                    "max_length": {
                                                      "type": "integer"
                                                    },
                                                    "complexity": {
                                                      "type": "boolean"
                                                    },
                                                    "nist": {
                                                      "type": "boolean"
                                                    },
                                                    "strength_meter": {
                                                      "type": "boolean"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PAYMENT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "charge",
                                                    "credentials"
                                                  ],
                                                  "properties": {
                                                    "provider": {
                                                      "type": "string",
                                                      "enum": [
                                                        "STRIPE"
                                                      ]
                                                    },
                                                    "charge": {
                                                      "type": "object",
                                                      "anyOf": [
                                                        {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "required": [
                                                            "type",
                                                            "one_off"
                                                          ],
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "ONE_OFF"
                                                              ]
                                                            },
                                                            "one_off": {
                                                              "type": "object",
                                                              "additionalProperties": true,
                                                              "required": [
                                                                "amount",
                                                                "currency"
                                                              ],
                                                              "properties": {
                                                                "amount": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "minLength": 1
                                                                    },
                                                                    {
                                                                      "type": "number"
                                                                    }
                                                                  ]
                                                                },
                                                                "currency": {
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "AUD",
                                                                    "CAD",
                                                                    "CHF",
                                                                    "EUR",
                                                                    "GBP",
                                                                    "INR",
                                                                    "MXN",
                                                                    "SEK",
                                                                    "USD"
                                                                  ]
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "required": [
                                                            "type",
                                                            "subscription"
                                                          ],
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "SUBSCRIPTION"
                                                              ]
                                                            },
                                                            "subscription": {
                                                              "type": "object",
                                                              "additionalProperties": true
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "credentials": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "required": [
                                                        "public_key",
                                                        "private_key"
                                                      ],
                                                      "properties": {
                                                        "public_key": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 250
                                                        },
                                                        "private_key": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 250
                                                        }
                                                      }
                                                    },
                                                    "customer": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "fields": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "card_number": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "expiration_date": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "security_code": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "trustmarks": {
                                                          "type": "boolean"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "SOCIAL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {}
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TEL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TEXT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "URL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "next_node": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "start": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "hidden_fields": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "value": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 500
                              }
                            }
                          }
                        },
                        "next_node": {
                          "anyOf": [
                            {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "$ending"
                              ]
                            }
                          ]
                        },
                        "coordinates": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "x",
                            "y"
                          ],
                          "properties": {
                            "x": {
                              "type": "integer"
                            },
                            "y": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "ending": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "redirection": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "target"
                          ],
                          "properties": {
                            "delay": {
                              "type": "integer"
                            },
                            "target": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1024
                            }
                          }
                        },
                        "after_submit": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "flow_id": {
                              "type": "string",
                              "maxLength": 30,
                              "format": "flow-id"
                            }
                          }
                        },
                        "coordinates": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "x",
                            "y"
                          ],
                          "properties": {
                            "x": {
                              "type": "integer"
                            },
                            "y": {
                              "type": "integer"
                            }
                          }
                        },
                        "resume_flow": {
                          "type": "boolean",
                          "enum": [
                            true
                          ]
                        }
                      }
                    },
                    "style": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "css": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 5000
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "embedded_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "submitted_at": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:forms."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_forms_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:forms"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a form",
        "tags": [
          "forms"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Form id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Form successfully deleted."
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:forms."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_forms_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:forms"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a form",
        "tags": [
          "forms"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Form identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "messages": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "errors": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "custom": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  },
                  "languages": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "primary": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      },
                      "default": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      }
                    }
                  },
                  "translations": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": true
                  },
                  "nodes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "anyOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type",
                            "config"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "FLOW"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "flow_id"
                              ],
                              "properties": {
                                "flow_id": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "format": "flow-id"
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "ROUTER"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "rules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "condition"
                                    ],
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      "alias": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 150
                                      },
                                      "condition": {},
                                      "next_node": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "format": "forms-custom-identifier"
                                          },
                                          {
                                            "type": "string",
                                            "enum": [
                                              "$ending"
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "fallback": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "STEP"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "components": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DIVIDER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 50
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "HTML"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "IMAGE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "src"
                                                ],
                                                "properties": {
                                                  "src": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "position": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "height": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "JUMP_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text",
                                                  "next_node"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  },
                                                  "next_node": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "format": "forms-custom-identifier"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "$ending"
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "style": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "background_color": {
                                                        "type": "string",
                                                        "format": "forms-hex-color"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RESEND_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "active_text",
                                                  "button_text",
                                                  "waiting_text",
                                                  "flow_id"
                                                ],
                                                "properties": {
                                                  "active_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "button_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "waiting_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "text_alignment": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "flow_id": {
                                                    "type": "string",
                                                    "maxLength": 30,
                                                    "format": "flow-id"
                                                  },
                                                  "max_attempts": {
                                                    "type": "number"
                                                  },
                                                  "waiting_time": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NEXT_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PREVIOUS_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RICH_TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "AUTH0_VERIFIABLE_CREDENTIALS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "url",
                                                  "alternate_text",
                                                  "access_token",
                                                  "verification_id"
                                                ],
                                                "properties": {
                                                  "url": {
                                                    "type": "string",
                                                    "maxLength": 2000
                                                  },
                                                  "size": {
                                                    "type": "number"
                                                  },
                                                  "alternate_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "access_token": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 5000
                                                  },
                                                  "verification_id": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "max_wait": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "GMAPS_ADDRESS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "api_key"
                                                ],
                                                "properties": {
                                                  "api_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RECAPTCHA"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "site_key",
                                                  "secret_key"
                                                ],
                                                "properties": {
                                                  "site_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "secret_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "BOOLEAN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "boolean"
                                                  },
                                                  "options": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "true": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      },
                                                      "false": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CARDS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CHOICE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CUSTOM"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "schema",
                                                  "code"
                                                ],
                                                "properties": {
                                                  "schema": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "code": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "css": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "params": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DATE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DROPDOWN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "EMAIL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "FILE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "multiple": {
                                                    "type": "boolean"
                                                  },
                                                  "storage": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "categories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "enum": [
                                                        "AUDIO",
                                                        "VIDEO",
                                                        "IMAGE",
                                                        "DOCUMENT",
                                                        "ARCHIVE"
                                                      ]
                                                    }
                                                  },
                                                  "extensions": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "maxLength": 50,
                                                      "format": "forms-file-extension"
                                                    }
                                                  },
                                                  "maxSize": {
                                                    "type": "integer"
                                                  },
                                                  "maxFiles": {
                                                    "type": "integer"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "LEGAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NUMBER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "number"
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  },
                                                  "min_value": {
                                                    "type": "number"
                                                  },
                                                  "max_value": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PASSWORD"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "hash": {
                                                    "type": "string",
                                                    "enum": [
                                                      "NONE",
                                                      "MD5",
                                                      "SHA1",
                                                      "SHA256",
                                                      "SHA512"
                                                    ]
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "min_length": {
                                                    "type": "integer"
                                                  },
                                                  "max_length": {
                                                    "type": "integer"
                                                  },
                                                  "complexity": {
                                                    "type": "boolean"
                                                  },
                                                  "nist": {
                                                    "type": "boolean"
                                                  },
                                                  "strength_meter": {
                                                    "type": "boolean"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PAYMENT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "charge",
                                                  "credentials"
                                                ],
                                                "properties": {
                                                  "provider": {
                                                    "type": "string",
                                                    "enum": [
                                                      "STRIPE"
                                                    ]
                                                  },
                                                  "charge": {
                                                    "type": "object",
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "one_off"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "ONE_OFF"
                                                            ]
                                                          },
                                                          "one_off": {
                                                            "type": "object",
                                                            "additionalProperties": true,
                                                            "required": [
                                                              "amount",
                                                              "currency"
                                                            ],
                                                            "properties": {
                                                              "amount": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "string",
                                                                    "minLength": 1
                                                                  },
                                                                  {
                                                                    "type": "number"
                                                                  }
                                                                ]
                                                              },
                                                              "currency": {
                                                                "type": "string",
                                                                "enum": [
                                                                  "AUD",
                                                                  "CAD",
                                                                  "CHF",
                                                                  "EUR",
                                                                  "GBP",
                                                                  "INR",
                                                                  "MXN",
                                                                  "SEK",
                                                                  "USD"
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "subscription"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "SUBSCRIPTION"
                                                            ]
                                                          },
                                                          "subscription": {
                                                            "type": "object",
                                                            "additionalProperties": true
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "credentials": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "required": [
                                                      "public_key",
                                                      "private_key"
                                                    ],
                                                    "properties": {
                                                      "public_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      },
                                                      "private_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      }
                                                    }
                                                  },
                                                  "customer": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "fields": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "card_number": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "expiration_date": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "security_code": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "trustmarks": {
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "SOCIAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {}
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "URL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "start": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "hidden_fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 500
                            }
                          }
                        }
                      },
                      "next_node": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "forms-custom-identifier"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "$ending"
                            ]
                          }
                        ]
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  },
                  "ending": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "redirection": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "delay": {
                            "type": "integer"
                          },
                          "target": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1024
                          }
                        }
                      },
                      "after_submit": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "flow_id": {
                            "type": "string",
                            "maxLength": 30,
                            "format": "flow-id"
                          }
                        }
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      },
                      "resume_flow": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  },
                  "style": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "css": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 5000
                      }
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "messages": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "errors": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "custom": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  },
                  "languages": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "primary": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      },
                      "default": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 55
                      }
                    }
                  },
                  "translations": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": true
                  },
                  "nodes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "anyOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type",
                            "config"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "FLOW"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "flow_id"
                              ],
                              "properties": {
                                "flow_id": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "format": "flow-id"
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "ROUTER"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "rules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "condition"
                                    ],
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      "alias": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 150
                                      },
                                      "condition": {},
                                      "next_node": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "format": "forms-custom-identifier"
                                          },
                                          {
                                            "type": "string",
                                            "enum": [
                                              "$ending"
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "fallback": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "STEP"
                              ]
                            },
                            "coordinates": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "x",
                                "y"
                              ],
                              "properties": {
                                "x": {
                                  "type": "integer"
                                },
                                "y": {
                                  "type": "integer"
                                }
                              }
                            },
                            "alias": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 150
                            },
                            "config": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "components": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DIVIDER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 50
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "HTML"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "IMAGE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "src"
                                                ],
                                                "properties": {
                                                  "src": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "position": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "height": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "JUMP_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text",
                                                  "next_node"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  },
                                                  "next_node": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "format": "forms-custom-identifier"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "$ending"
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "style": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "background_color": {
                                                        "type": "string",
                                                        "format": "forms-hex-color"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RESEND_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "active_text",
                                                  "button_text",
                                                  "waiting_text",
                                                  "flow_id"
                                                ],
                                                "properties": {
                                                  "active_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "button_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "waiting_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "text_alignment": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ]
                                                  },
                                                  "flow_id": {
                                                    "type": "string",
                                                    "maxLength": 30,
                                                    "format": "flow-id"
                                                  },
                                                  "max_attempts": {
                                                    "type": "number"
                                                  },
                                                  "waiting_time": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NEXT_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PREVIOUS_BUTTON"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "text"
                                                ],
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "maxLength": 150
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RICH_TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "content": {
                                                    "type": "string",
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "AUTH0_VERIFIABLE_CREDENTIALS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "url",
                                                  "alternate_text",
                                                  "access_token",
                                                  "verification_id"
                                                ],
                                                "properties": {
                                                  "url": {
                                                    "type": "string",
                                                    "maxLength": 2000
                                                  },
                                                  "size": {
                                                    "type": "number"
                                                  },
                                                  "alternate_text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "access_token": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 5000
                                                  },
                                                  "verification_id": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 255
                                                  },
                                                  "max_wait": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "GMAPS_ADDRESS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "api_key"
                                                ],
                                                "properties": {
                                                  "api_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "RECAPTCHA"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "site_key",
                                                  "secret_key"
                                                ],
                                                "properties": {
                                                  "site_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "secret_key": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "type": "object",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "BOOLEAN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "boolean"
                                                  },
                                                  "options": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "true": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      },
                                                      "false": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 50
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CARDS"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CHOICE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "CUSTOM"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "schema",
                                                  "code"
                                                ],
                                                "properties": {
                                                  "schema": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "code": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "css": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "params": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DATE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "DROPDOWN"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "EMAIL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "FILE"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "multiple": {
                                                    "type": "boolean"
                                                  },
                                                  "storage": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "categories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "enum": [
                                                        "AUDIO",
                                                        "VIDEO",
                                                        "IMAGE",
                                                        "DOCUMENT",
                                                        "ARCHIVE"
                                                      ]
                                                    }
                                                  },
                                                  "extensions": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "maxLength": 50,
                                                      "format": "forms-file-extension"
                                                    }
                                                  },
                                                  "maxSize": {
                                                    "type": "integer"
                                                  },
                                                  "maxFiles": {
                                                    "type": "integer"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "LEGAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 10000
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "NUMBER"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "number"
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  },
                                                  "min_value": {
                                                    "type": "number"
                                                  },
                                                  "max_value": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PASSWORD"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "hash": {
                                                    "type": "string",
                                                    "enum": [
                                                      "NONE",
                                                      "MD5",
                                                      "SHA1",
                                                      "SHA256",
                                                      "SHA512"
                                                    ]
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "maxLength": 500
                                                  },
                                                  "min_length": {
                                                    "type": "integer"
                                                  },
                                                  "max_length": {
                                                    "type": "integer"
                                                  },
                                                  "complexity": {
                                                    "type": "boolean"
                                                  },
                                                  "nist": {
                                                    "type": "boolean"
                                                  },
                                                  "strength_meter": {
                                                    "type": "boolean"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type",
                                              "config"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "PAYMENT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                  "charge",
                                                  "credentials"
                                                ],
                                                "properties": {
                                                  "provider": {
                                                    "type": "string",
                                                    "enum": [
                                                      "STRIPE"
                                                    ]
                                                  },
                                                  "charge": {
                                                    "type": "object",
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "one_off"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "ONE_OFF"
                                                            ]
                                                          },
                                                          "one_off": {
                                                            "type": "object",
                                                            "additionalProperties": true,
                                                            "required": [
                                                              "amount",
                                                              "currency"
                                                            ],
                                                            "properties": {
                                                              "amount": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "string",
                                                                    "minLength": 1
                                                                  },
                                                                  {
                                                                    "type": "number"
                                                                  }
                                                                ]
                                                              },
                                                              "currency": {
                                                                "type": "string",
                                                                "enum": [
                                                                  "AUD",
                                                                  "CAD",
                                                                  "CHF",
                                                                  "EUR",
                                                                  "GBP",
                                                                  "INR",
                                                                  "MXN",
                                                                  "SEK",
                                                                  "USD"
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "required": [
                                                          "type",
                                                          "subscription"
                                                        ],
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "SUBSCRIPTION"
                                                            ]
                                                          },
                                                          "subscription": {
                                                            "type": "object",
                                                            "additionalProperties": true
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "credentials": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "required": [
                                                      "public_key",
                                                      "private_key"
                                                    ],
                                                    "properties": {
                                                      "public_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      },
                                                      "private_key": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 250
                                                      }
                                                    }
                                                  },
                                                  "customer": {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  "fields": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                      "card_number": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "expiration_date": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "security_code": {
                                                        "type": "object",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "label": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          },
                                                          "placeholder": {
                                                            "type": "string",
                                                            "minLength": 1,
                                                            "maxLength": 250
                                                          }
                                                        }
                                                      },
                                                      "trustmarks": {
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "SOCIAL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {}
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "TEXT"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  },
                                                  {
                                                    "type": "object",
                                                    "additionalProperties": true
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "additionalProperties": true,
                                            "required": [
                                              "type"
                                            ],
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "URL"
                                                ]
                                              },
                                              "config": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "default_value": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "placeholder": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "maxLength": 500
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "next_node": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "format": "forms-custom-identifier"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "$ending"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "start": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "hidden_fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 500
                            }
                          }
                        }
                      },
                      "next_node": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "forms-custom-identifier"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "$ending"
                            ]
                          }
                        ]
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  },
                  "ending": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "redirection": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "delay": {
                            "type": "integer"
                          },
                          "target": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1024
                          }
                        }
                      },
                      "after_submit": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "flow_id": {
                            "type": "string",
                            "maxLength": 30,
                            "format": "flow-id"
                          }
                        }
                      },
                      "coordinates": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "x",
                          "y"
                        ],
                        "properties": {
                          "x": {
                            "type": "integer"
                          },
                          "y": {
                            "type": "integer"
                          }
                        }
                      },
                      "resume_flow": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  },
                  "style": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "css": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 5000
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Form successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 30,
                      "format": "form-id"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 150
                    },
                    "messages": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "errors": {
                          "type": "object",
                          "additionalProperties": true
                        },
                        "custom": {
                          "type": "object",
                          "additionalProperties": true
                        }
                      }
                    },
                    "languages": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "primary": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 55
                        },
                        "default": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 55
                        }
                      }
                    },
                    "translations": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "nodes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type",
                              "config"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "FLOW"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "flow_id"
                                ],
                                "properties": {
                                  "flow_id": {
                                    "type": "string",
                                    "maxLength": 30,
                                    "format": "flow-id"
                                  },
                                  "next_node": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "ROUTER"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "rules": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "required": [
                                        "id",
                                        "condition"
                                      ],
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "format": "forms-custom-identifier"
                                        },
                                        "alias": {
                                          "type": "string",
                                          "minLength": 1,
                                          "maxLength": 150
                                        },
                                        "condition": {},
                                        "next_node": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "format": "forms-custom-identifier"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "$ending"
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  "fallback": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "type"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "STEP"
                                ]
                              },
                              "coordinates": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "x",
                                  "y"
                                ],
                                "properties": {
                                  "x": {
                                    "type": "integer"
                                  },
                                  "y": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "alias": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 150
                              },
                              "config": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "components": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DIVIDER"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 50
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "HTML"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "content": {
                                                      "type": "string",
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "IMAGE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "src"
                                                  ],
                                                  "properties": {
                                                    "src": {
                                                      "type": "string",
                                                      "maxLength": 500
                                                    },
                                                    "position": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LEFT",
                                                        "CENTER",
                                                        "RIGHT"
                                                      ]
                                                    },
                                                    "height": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "JUMP_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text",
                                                    "next_node"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    },
                                                    "next_node": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "format": "forms-custom-identifier"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "enum": [
                                                            "$ending"
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "style": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "background_color": {
                                                          "type": "string",
                                                          "format": "forms-hex-color"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RESEND_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "active_text",
                                                    "button_text",
                                                    "waiting_text",
                                                    "flow_id"
                                                  ],
                                                  "properties": {
                                                    "active_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "button_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "waiting_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "text_alignment": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LEFT",
                                                        "CENTER",
                                                        "RIGHT"
                                                      ]
                                                    },
                                                    "flow_id": {
                                                      "type": "string",
                                                      "maxLength": 30,
                                                      "format": "flow-id"
                                                    },
                                                    "max_attempts": {
                                                      "type": "number"
                                                    },
                                                    "waiting_time": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NEXT_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PREVIOUS_BUTTON"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "text"
                                                  ],
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "maxLength": 150
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RICH_TEXT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "content": {
                                                      "type": "string",
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AUTH0_VERIFIABLE_CREDENTIALS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "url",
                                                    "alternate_text",
                                                    "access_token",
                                                    "verification_id"
                                                  ],
                                                  "properties": {
                                                    "url": {
                                                      "type": "string",
                                                      "maxLength": 2000
                                                    },
                                                    "size": {
                                                      "type": "number"
                                                    },
                                                    "alternate_text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "access_token": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 5000
                                                    },
                                                    "verification_id": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 255
                                                    },
                                                    "max_wait": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "GMAPS_ADDRESS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "api_key"
                                                  ],
                                                  "properties": {
                                                    "api_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RECAPTCHA"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "site_key",
                                                    "secret_key"
                                                  ],
                                                  "properties": {
                                                    "site_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "secret_key": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "BOOLEAN"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "boolean"
                                                    },
                                                    "options": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "true": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 50
                                                        },
                                                        "false": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 50
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CARDS"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CHOICE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "CUSTOM"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "schema",
                                                    "code"
                                                  ],
                                                  "properties": {
                                                    "schema": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "code": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "css": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "params": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DATE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "DROPDOWN"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "EMAIL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "FILE"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "multiple": {
                                                      "type": "boolean"
                                                    },
                                                    "storage": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "categories": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "enum": [
                                                          "AUDIO",
                                                          "VIDEO",
                                                          "IMAGE",
                                                          "DOCUMENT",
                                                          "ARCHIVE"
                                                        ]
                                                      }
                                                    },
                                                    "extensions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "maxLength": 50,
                                                        "format": "forms-file-extension"
                                                      }
                                                    },
                                                    "maxSize": {
                                                      "type": "integer"
                                                    },
                                                    "maxFiles": {
                                                      "type": "integer"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "LEGAL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 10000
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NUMBER"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "number"
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    },
                                                    "min_value": {
                                                      "type": "number"
                                                    },
                                                    "max_value": {
                                                      "type": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PASSWORD"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "hash": {
                                                      "type": "string",
                                                      "enum": [
                                                        "NONE",
                                                        "MD5",
                                                        "SHA1",
                                                        "SHA256",
                                                        "SHA512"
                                                      ]
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "maxLength": 500
                                                    },
                                                    "min_length": {
                                                      "type": "integer"
                                                    },
                                                    "max_length": {
                                                      "type": "integer"
                                                    },
                                                    "complexity": {
                                                      "type": "boolean"
                                                    },
                                                    "nist": {
                                                      "type": "boolean"
                                                    },
                                                    "strength_meter": {
                                                      "type": "boolean"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type",
                                                "config"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "PAYMENT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": [
                                                    "charge",
                                                    "credentials"
                                                  ],
                                                  "properties": {
                                                    "provider": {
                                                      "type": "string",
                                                      "enum": [
                                                        "STRIPE"
                                                      ]
                                                    },
                                                    "charge": {
                                                      "type": "object",
                                                      "anyOf": [
                                                        {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "required": [
                                                            "type",
                                                            "one_off"
                                                          ],
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "ONE_OFF"
                                                              ]
                                                            },
                                                            "one_off": {
                                                              "type": "object",
                                                              "additionalProperties": true,
                                                              "required": [
                                                                "amount",
                                                                "currency"
                                                              ],
                                                              "properties": {
                                                                "amount": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "minLength": 1
                                                                    },
                                                                    {
                                                                      "type": "number"
                                                                    }
                                                                  ]
                                                                },
                                                                "currency": {
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "AUD",
                                                                    "CAD",
                                                                    "CHF",
                                                                    "EUR",
                                                                    "GBP",
                                                                    "INR",
                                                                    "MXN",
                                                                    "SEK",
                                                                    "USD"
                                                                  ]
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "required": [
                                                            "type",
                                                            "subscription"
                                                          ],
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "SUBSCRIPTION"
                                                              ]
                                                            },
                                                            "subscription": {
                                                              "type": "object",
                                                              "additionalProperties": true
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "credentials": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "required": [
                                                        "public_key",
                                                        "private_key"
                                                      ],
                                                      "properties": {
                                                        "public_key": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 250
                                                        },
                                                        "private_key": {
                                                          "type": "string",
                                                          "minLength": 1,
                                                          "maxLength": 250
                                                        }
                                                      }
                                                    },
                                                    "customer": {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    "fields": {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "card_number": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "expiration_date": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "security_code": {
                                                          "type": "object",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "label": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            },
                                                            "placeholder": {
                                                              "type": "string",
                                                              "minLength": 1,
                                                              "maxLength": 250
                                                            }
                                                          }
                                                        },
                                                        "trustmarks": {
                                                          "type": "boolean"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "SOCIAL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {}
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TEL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TEXT"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": true
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": true,
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "URL"
                                                  ]
                                                },
                                                "config": {
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "default_value": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "placeholder": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 500
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "next_node": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "format": "forms-custom-identifier"
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "$ending"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "start": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "hidden_fields": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "type": "string",
                                "format": "forms-custom-identifier"
                              },
                              "value": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 500
                              }
                            }
                          }
                        },
                        "next_node": {
                          "anyOf": [
                            {
                              "type": "string",
                              "format": "forms-custom-identifier"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "$ending"
                              ]
                            }
                          ]
                        },
                        "coordinates": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "x",
                            "y"
                          ],
                          "properties": {
                            "x": {
                              "type": "integer"
                            },
                            "y": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "ending": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "redirection": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "target"
                          ],
                          "properties": {
                            "delay": {
                              "type": "integer"
                            },
                            "target": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1024
                            }
                          }
                        },
                        "after_submit": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "flow_id": {
                              "type": "string",
                              "maxLength": 30,
                              "format": "flow-id"
                            }
                          }
                        },
                        "coordinates": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "x",
                            "y"
                          ],
                          "properties": {
                            "x": {
                              "type": "integer"
                            },
                            "y": {
                              "type": "integer"
                            }
                          }
                        },
                        "resume_flow": {
                          "type": "boolean",
                          "enum": [
                            true
                          ]
                        }
                      }
                    },
                    "style": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "css": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 5000
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "embedded_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "submitted_at": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation.",
            "x-description-2": "Client is not global."
          },
          "403": {
            "description": "Insufficient scope; expected any of: update:forms."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "patch_forms_by_id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:forms"
            ]
          }
        ]
      }
    },
    "/grants": {
      "get": {
        "summary": "Get grants",
        "description": "Retrieve the <a href=\"https://auth0.com/docs/api-auth/which-oauth-flow-to-use\">grants</a> associated with your account. ",
        "tags": [
          "grants"
        ],
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "user_id of the grants to retrieve.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "client_id of the grants to retrieve.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "audience",
            "in": "query",
            "description": "audience of the grants to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Grants successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUserGrantsResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:grants."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_grants",
        "x-operation-name": "list",
        "x-operation-request-parameters-name": "ListUserGrantsRequestParameters",
        "x-operation-group": "userGrants",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:grants"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a grant by user_id",
        "description": "Delete a grant associated with your account. ",
        "tags": [
          "grants"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "user_id of the grant to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User grant successfully deleted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:grants."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_grants_by_user_id",
        "x-operation-name": "deleteByUserId",
        "x-operation-request-parameters-name": "DeleteUserGrantByUserIdRequestParameters",
        "x-operation-group": "userGrants",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:grants"
            ]
          }
        ]
      }
    },
    "/grants/{id}": {
      "delete": {
        "summary": "Delete a grant by id",
        "description": "Delete a grant associated with your account. ",
        "tags": [
          "grants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the grant to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User grant successfully deleted."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:grants."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_grants_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "userGrants",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:grants"
            ]
          }
        ]
      }
    },
    "/guardian/enrollments/ticket": {
      "post": {
        "summary": "Create a multi-factor authentication enrollment ticket",
        "description": "Create a <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/auth0-guardian/create-custom-enrollment-tickets\">multi-factor authentication (MFA) enrollment ticket</a>, and optionally send an email with the created ticket, to a given user.\nCreate a <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/auth0-guardian/create-custom-enrollment-tickets\">multi-factor authentication (MFA) enrollment ticket</a>, and optionally send an email with the created ticket to a given user. Enrollment tickets can specify which factor users must enroll with or allow existing MFA users to enroll in additional factors.<br/> \n\nNote: Users cannot enroll in Email as a factor through custom enrollment tickets. \n",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGuardianEnrollmentTicketRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateGuardianEnrollmentTicketRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Enrollment ticket successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGuardianEnrollmentTicketResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          },
          "404": {
            "description": "User not found."
          }
        },
        "operationId": "post_ticket",
        "x-operation-name": "createEnrollmentTicket",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:guardian_enrollment_tickets"
            ]
          }
        ]
      }
    },
    "/guardian/enrollments/{id}": {
      "get": {
        "summary": "Get a multi-factor authentication enrollment",
        "description": "Retrieve details, such as status and type, for a specific multi-factor authentication enrollment registered to a user account.",
        "tags": [
          "guardian"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enrollment to be retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Enrollment successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGuardianEnrollmentResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_enrollments_by_id",
        "x-operation-name": "getEnrollment",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_enrollments"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a multi-factor authentication enrollment",
        "description": "Remove a specific multi-factor authentication (MFA) enrollment from a user's account. This allows the user to re-enroll with MFA. For more information, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/reset-user-mfa\">Reset User Multi-Factor Authentication and Recovery Codes</a>.",
        "tags": [
          "guardian"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enrollment to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Enrollment successfully deleted."
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope (expected delete:enrollment)."
          }
        },
        "operationId": "delete_enrollments_by_id",
        "x-operation-name": "deleteEnrollment",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:guardian_enrollments"
            ]
          }
        ]
      }
    },
    "/guardian/factors": {
      "get": {
        "summary": "Get Factors and multi-factor authentication details",
        "description": "Retrieve details of all <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors\">multi-factor authentication factors</a> associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Factors successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GuardianFactor"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_factors",
        "x-operation-name": "listFactors",
        "x-operation-request-parameters-name": "ListFactorsRequestParameters",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/duo/settings": {
      "get": {
        "summary": "Get DUO Configuration",
        "description": "Retrieves the DUO account and factor configuration.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "DUO settings successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGuardianFactorDuoSettingsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_factor_duo_settings",
        "x-operation-name": "getFactorDuoSettings",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update the DUO Configuration",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGuardianFactorDuoSettingsRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGuardianFactorDuoSettingsRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "DUO settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateGuardianFactorDuoSettingsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "patch_factor_duo_settings",
        "x-operation-name": "updateFactorDuoSettings",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update the DUO Configuration",
        "description": "Set the DUO account configuration and other properties specific to this factor.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorDuoSettingsRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorDuoSettingsRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "DUO settings successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorDuoSettingsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_factor_duo_settings",
        "x-operation-name": "setFactorDuoSettings",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/phone/message-types": {
      "get": {
        "summary": "Get Enabled Phone Factors",
        "description": "Retrieve list of <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-sms-voice-notifications-mfa\">phone-type MFA factors</a> (i.e., sms and voice) that are enabled for your tenant.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Returns the enabled phone factors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGuardianFactorPhoneMessageTypesResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "get_message-types",
        "x-operation-name": "getFactorPhoneMessageTypes",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update the Enabled Phone Factors",
        "description": "Replace the list of <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-sms-voice-notifications-mfa\">phone-type MFA factors</a> (i.e., sms and voice) that are enabled for your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorPhoneMessageTypesRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorPhoneMessageTypesRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns selected SMS provider configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorPhoneMessageTypesResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          },
          "404": {
            "description": "The phone factor does not exist."
          }
        },
        "operationId": "put_message-types",
        "x-operation-name": "setFactorPhoneMessageTypes",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/phone/providers/twilio": {
      "get": {
        "summary": "Get Twilio configuration",
        "description": "Retrieve configuration details for a Twilio phone provider that has been set up in your tenant. To learn more, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-sms-voice-notifications-mfa\">Configure SMS and Voice Notifications for MFA</a>. ",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Twilio Phone configuration successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGuardianFactorsProviderPhoneTwilioResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_phone_twilio_factor_provider",
        "x-operation-name": "getPhoneTwilioFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Twilio configuration",
        "description": "Update the configuration of a Twilio phone provider that has been set up in your tenant. To learn more, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-sms-voice-notifications-mfa\">Configure SMS and Voice Notifications for MFA</a>. ",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPhoneTwilioRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPhoneTwilioRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Twilio Phone configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorsProviderPhoneTwilioResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_twilio",
        "x-operation-name": "setPhoneTwilioFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/phone/selected-provider": {
      "get": {
        "summary": "Get phone provider configuration",
        "description": "Retrieve details of the multi-factor authentication phone provider configured for your tenant.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Returns selected Phone provider configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGuardianFactorsProviderPhoneResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "get_guardian_phone_providers",
        "x-operation-name": "getPhoneFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update phone provider configuration",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPhoneRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPhoneRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns selected Phone provider configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorsProviderPhoneResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "put_phone_providers",
        "x-operation-name": "setPhoneFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/phone/templates": {
      "get": {
        "summary": "Get Enrollment and Verification Phone Templates",
        "description": "Retrieve details of the multi-factor authentication enrollment and verification templates for phone-type factors available in your tenant.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Phone enrollment and verification templates successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGuardianFactorPhoneTemplatesResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_factor_phone_templates",
        "x-operation-name": "getFactorPhoneTemplates",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Enrollment and Verification Phone Templates",
        "description": "Customize the messages sent to complete phone enrollment and verification (subscription required).",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorPhoneTemplatesRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorPhoneTemplatesRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone enrollment and verification templates successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorPhoneTemplatesResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_factor_phone_templates",
        "x-operation-name": "setFactorPhoneTemplates",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/push-notification/providers/apns": {
      "get": {
        "summary": "Get APNS push notification configuration",
        "description": "Retrieve configuration details for the multi-factor authentication APNS provider associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "APNS configuration successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGuardianFactorsProviderApnsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_apns",
        "x-operation-name": "getApnsFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update APNs provider configuration",
        "description": "Modify configuration details of the multi-factor authentication APNS provider associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationApnsRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationApnsRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "APNS configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationApnsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas.",
            "x-description-1": "The PKCS #12 file is invalid. Please ensure the client certificate is not expired, the environment matches, and the key and certificate are not encrypted with a deprecated algorithm."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "patch_apns",
        "x-operation-name": "setPushNotificationApnsFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update APNS configuration",
        "description": "Overwrite all configuration details of the multi-factor authentication APNS provider associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationApnsRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationApnsRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "APNS configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationApnsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas.",
            "x-description-1": "The PKCS #12 file is invalid. Please ensure the client certificate is not expired, the environment matches, and the key and certificate are not encrypted with a deprecated algorithm."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_apns",
        "x-operation-name": "setPushNotificationApnsFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/push-notification/providers/fcm": {
      "patch": {
        "summary": "Updates FCM configuration",
        "description": "Modify configuration details of the multi-factor authentication FCM provider associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationFcmRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationFcmRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "FCM configuration updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationFcmResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "patch_fcm",
        "x-operation-name": "setPushNotificationFcmFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Updates FCM configuration",
        "description": "Overwrite all configuration details of the multi-factor authentication FCM provider associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationFcmRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationFcmRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "FCM configuration updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationFcmResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "put_fcm",
        "x-operation-name": "setPushNotificationFcmFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/push-notification/providers/fcmv1": {
      "patch": {
        "summary": "Updates FCMV1 configuration",
        "description": "Modify configuration details of the multi-factor authentication FCMV1 provider associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationFcmv1RequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationFcmv1RequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "FCMV1 configuration updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationFcmv1ResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas",
            "x-description-1": "Invalid server credentials"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "patch_fcmv1",
        "x-operation-name": "setPushNotificationFcmv1FactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Updates FCMV1 configuration",
        "description": "Overwrite all configuration details of the multi-factor authentication FCMV1 provider associated with your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationFcmv1RequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationFcmv1RequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "FCMV1 configuration updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationFcmv1ResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas",
            "x-description-1": "Invalid server credentials"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "put_fcmv1",
        "x-operation-name": "setPushNotificationFcmv1FactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/push-notification/providers/sns": {
      "get": {
        "summary": "Get AWS SNS configuration",
        "description": "Retrieve configuration details for an AWS SNS push notification provider that has been enabled for MFA. To learn more, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-push-notifications-for-mfa\">Configure Push Notifications for MFA</a>. ",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "AWS SNS configuration successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGuardianFactorsProviderSnsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_sns",
        "x-operation-name": "getSnsFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update AWS SNS configuration",
        "description": "Configure the <a href=\"https://auth0.com/docs/multifactor-authentication/developer/sns-configuration\">AWS SNS push notification provider configuration</a> (subscription required).",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGuardianFactorsProviderPushNotificationSnsRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGuardianFactorsProviderPushNotificationSnsRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "AWS SNS configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateGuardianFactorsProviderPushNotificationSnsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "patch_sns",
        "x-operation-name": "updatePushNotificationSnsFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update AWS SNS configuration",
        "description": "Configure the <a href=\"https://auth0.com/docs/multifactor-authentication/developer/sns-configuration\">AWS SNS push notification provider configuration</a> (subscription required).",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationSnsRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationSnsRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "AWS SNS configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationSnsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_sns",
        "x-operation-name": "setPushNotificationSnsFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/push-notification/selected-provider": {
      "get": {
        "summary": "Get push notification provider",
        "description": "Modify the push notification provider configured for your tenant. For more information, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-push-notifications-for-mfa\">Configure Push Notifications for MFA</a>. ",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Returns selected push notification provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGuardianFactorsProviderPushNotificationResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "get_pn_providers",
        "x-operation-name": "getPushNotificationFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Push Notification configuration",
        "description": "Modify the push notification provider configured for your tenant. For more information, review <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-push-notifications-for-mfa\">Configure Push Notifications for MFA</a>. ",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns selected push notification provider configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorsProviderPushNotificationResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "put_pn_providers",
        "x-operation-name": "setPushNotificationFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/sms/providers/twilio": {
      "get": {
        "summary": "Get Twilio SMS configuration",
        "description": "Retrieve the <a href=\"https://auth0.com/docs/multifactor-authentication/twilio-configuration\">Twilio SMS provider configuration</a> (subscription required).\n\n    A new endpoint is available to retrieve the Twilio configuration related to phone factors (<a href='https://auth0.com/docs/api/management/v2/#!/Guardian/get_twilio'>phone Twilio configuration</a>). It has the same payload as this one. Please use it instead.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Twilio SMS configuration successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGuardianFactorsProviderSmsTwilioResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_sms_twilio_factor_provider",
        "x-operation-name": "getSmsTwilioFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Twilio SMS configuration",
        "description": "This endpoint has been deprecated. To complete this action, use the <a href=\"https://auth0.com/docs/api/management/v2/guardian/put-twilio\">Update Twilio phone configuration</a> endpoint.\n\n    <b>Previous functionality</b>: Update the Twilio SMS provider configuration.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderSmsTwilioRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderSmsTwilioRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Twilio SMS configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorsProviderSmsTwilioResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_sms_twilio_factor_provider",
        "x-operation-name": "setSmsTwilioFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/sms/selected-provider": {
      "get": {
        "summary": "Get SMS configuration",
        "description": "This endpoint has been deprecated. To complete this action, use the <a href=\"https://auth0.com/docs/api/management/v2/guardian/get-phone-providers\">Retrieve phone configuration</a> endpoint instead.\n\n    <b>Previous functionality</b>: Retrieve details for the multi-factor authentication SMS provider configured for your tenant.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Returns selected SMS provider configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGuardianFactorsProviderSmsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "get_sms_providers",
        "x-operation-name": "getSmsFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update SMS configuration",
        "description": "This endpoint has been deprecated. To complete this action, use the <a href=\"https://auth0.com/docs/api/management/v2/guardian/put-phone-providers\">Update phone configuration</a> endpoint instead.\n\n    <b>Previous functionality</b>: Update the multi-factor authentication SMS provider configuration in your tenant.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderSmsRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorsProviderSmsRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns selected SMS provider configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorsProviderSmsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "put_sms_providers",
        "x-operation-name": "setSmsFactorProvider",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/sms/templates": {
      "get": {
        "summary": "Get SMS enrollment and verification templates",
        "description": "This endpoint has been deprecated. To complete this action, use the <a href=\"https://auth0.com/docs/api/management/v2/guardian/get-factor-phone-templates\">Retrieve enrollment and verification phone templates</a> endpoint instead.\n\n    <b>Previous function</b>: Retrieve details of SMS enrollment and verification templates configured for your tenant.",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "SMS enrollment and verification templates successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGuardianFactorSmsTemplatesResponseContent"
                }
              }
            }
          },
          "204": {
            "description": "No content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGuardianFactorSmsTemplatesResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "get_factor_sms_templates",
        "x-operation-name": "getFactorSmsTemplates",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:guardian_factors"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update SMS enrollment and verification templates",
        "description": "This endpoint has been deprecated. To complete this action, use the <a href=\"https://auth0.com/docs/api/management/v2/guardian/put-factor-phone-templates\">Update enrollment and verification phone templates</a> endpoint instead.\n\n    <b>Previous functionality</b>: Customize the messages sent to complete SMS enrollment and verification.",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorSmsTemplatesRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorSmsTemplatesRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SMS enrollment and verification templates successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorSmsTemplatesResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_factor_sms_templates",
        "x-operation-name": "setFactorSmsTemplates",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/factors/{name}": {
      "put": {
        "summary": "Update multi-factor authentication type",
        "description": "Update the status (i.e., enabled or disabled) of a specific multi-factor authentication factor.",
        "tags": [
          "guardian"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Factor name. Can be `sms`, `push-notification`, `email`, `duo` `otp` `webauthn-roaming`, `webauthn-platform`, or `recovery-code`.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GuardianFactorNameEnum"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianFactorRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Factor updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianFactorResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas."
          },
          "401": {
            "description": "Token has expired or signature is invalid."
          },
          "403": {
            "description": "Insufficient scope."
          }
        },
        "operationId": "put_factors_by_name",
        "x-operation-name": "setFactor",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:guardian_factors"
            ]
          }
        ]
      }
    },
    "/guardian/policies": {
      "get": {
        "summary": "Get multi-factor authentication policies",
        "description": "Retrieve the <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/enable-mfa\">multi-factor authentication (MFA) policies</a> configured for your tenant.\n\nThe following policies are supported:\n<ul>\n<li><code>all-applications</code> policy prompts with MFA for all logins.</li>\n<li><code>confidence-score</code> policy prompts with MFA only for low confidence logins.</li>\n</ul>\n\n<b>Note</b>: The <code>confidence-score</code> policy is part of the <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/adaptive-mfa\">Adaptive MFA feature</a>. Adaptive MFA requires an add-on for the Enterprise plan; review <a href=\"https://auth0.com/pricing\">Auth0 Pricing</a> for more details.\n",
        "tags": [
          "guardian"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListGuardianPoliciesResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "get_policies",
        "x-operation-name": "listPolicies",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:mfa_policies"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update multi-factor authentication policies",
        "description": "Set <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/enable-mfa\">multi-factor authentication (MFA) policies</a> for your tenant.\n\nThe following policies are supported:\n<ul>\n<li><code>all-applications</code> policy prompts with MFA for all logins.</li>\n<li><code>confidence-score</code> policy prompts with MFA only for low confidence logins.</li>\n</ul>\n\n<b>Note</b>: The <code>confidence-score</code> policy is part of the <a href=\"https://auth0.com/docs/secure/multi-factor-authentication/adaptive-mfa\">Adaptive MFA feature</a>. Adaptive MFA requires an add-on for the Enterprise plan; review <a href=\"https://auth0.com/pricing\">Auth0 Pricing</a> for more details.\n",
        "tags": [
          "guardian"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianPoliciesRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetGuardianPoliciesRequestContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policies updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetGuardianPoliciesResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input based on schemas"
          },
          "401": {
            "description": "Token has expired or signature is invalid"
          },
          "403": {
            "description": "Insufficient scope"
          }
        },
        "operationId": "put_policies",
        "x-operation-name": "setPolicies",
        "x-operation-group": "guardian",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "update:mfa_policies"
            ]
          }
        ]
      }
    },
    "/hooks": {
      "get": {
        "summary": "Get hooks",
        "description": "Retrieve all <a href=\"https://auth0.com/docs/hooks\">hooks</a>. Accepts a list of fields to include or exclude in the result.\n",
        "tags": [
          "hooks"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index of the results to return. First page is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_totals",
            "in": "query",
            "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Optional filter on whether a hook is enabled (true) or disabled (false).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerId",
            "in": "query",
            "description": "Retrieves hooks that match the trigger",
            "schema": {
              "$ref": "#/components/schemas/HookTriggerIdEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hooks successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListHooksResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:hooks."
          },
          "404": {
            "description": "Hook not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_hooks",
        "x-operation-name": "list",
        "x-operation-request-parameters-name": "ListHooksRequestParameters",
        "x-operation-group": "hooks",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:hooks"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a hook",
        "description": "Create a new hook.\n",
        "tags": [
          "hooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHookRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateHookRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Hook successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateHookResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: create:hooks.",
            "x-description-1": "This endpoint is disabled for your tenant."
          },
          "409": {
            "description": "Hook with the same name already exists."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "post_hooks",
        "x-operation-name": "create",
        "x-operation-group": "hooks",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "create:hooks"
            ]
          }
        ]
      }
    },
    "/hooks/{id}": {
      "get": {
        "summary": "Get a hook",
        "description": "Retrieve <a href=\"https://auth0.com/docs/hooks\">a hook</a> by its ID. Accepts a list of fields to include in the result.\n",
        "tags": [
          "hooks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the hook to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include in the result. Leave empty to retrieve all fields.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hook successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetHookResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause.",
            "x-description-1": "Invalid request query string. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Client is not global.",
            "x-description-2": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: read:hooks."
          },
          "404": {
            "description": "Hook not found."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "get_hooks_by_id",
        "x-operation-name": "get",
        "x-operation-request-parameters-name": "GetHookRequestParameters",
        "x-operation-group": "hooks",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "read:hooks"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a hook",
        "description": "Delete a hook.\n",
        "tags": [
          "hooks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the hook to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Hook successfully deleted."
          },
          "400": {
            "description": "Invalid request URI. The message will vary depending on the cause."
          },
          "401": {
            "description": "Invalid token.",
            "x-description-1": "Invalid signature received for JSON Web Token validation."
          },
          "403": {
            "description": "Insufficient scope; expected any of: delete:hooks."
          },
          "429": {
            "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
          }
        },
        "operationId": "delete_hooks_by_id",
        "x-operation-name": "delete",
        "x-operation-group": "hooks",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "oAuth2ClientCredentials": [
              "delete:hooks"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a hook",
        "description": "Update an existing hook.\n",
        "tags": [
          "hooks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the hook to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateHookRequestContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateHookRequestContent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Hook successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateHookResponseContent"
                }
              }
            }
          },
          "400": {
